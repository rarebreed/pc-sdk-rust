/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct WebChatMessage {
    /// The globally unique identifier for the object.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "conversation")]
    pub conversation: Box<crate::models::WebChatConversation>,
    #[serde(rename = "sender")]
    pub sender: Box<crate::models::WebChatMemberInfo>,
    /// The message body.
    #[serde(rename = "body")]
    pub body: String,
    /// The purpose of the message within the conversation, such as a standard text entry versus a greeting.
    #[serde(rename = "bodyType")]
    pub body_type: BodyType,
    /// The timestamp of the message, in ISO-8601 format
    #[serde(rename = "timestamp")]
    pub timestamp: String,
    /// The URI for this object
    #[serde(rename = "selfUri", skip_serializing_if = "Option::is_none")]
    pub self_uri: Option<String>,
}

impl WebChatMessage {
    pub fn new(conversation: crate::models::WebChatConversation, sender: crate::models::WebChatMemberInfo, body: String, body_type: BodyType, timestamp: String) -> WebChatMessage {
        WebChatMessage {
            id: None,
            name: None,
            conversation: Box::new(conversation),
            sender: Box::new(sender),
            body,
            body_type,
            timestamp,
            self_uri: None,
        }
    }
}

/// The purpose of the message within the conversation, such as a standard text entry versus a greeting.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum BodyType {
    #[serde(rename = "standard")]
    Standard,
    #[serde(rename = "notice")]
    Notice,
    #[serde(rename = "member-join")]
    MemberJoin,
    #[serde(rename = "member-leave")]
    MemberLeave,
    #[serde(rename = "media-request")]
    MediaRequest,
}

impl Default for BodyType {
    fn default() -> BodyType {
        Self::Standard
    }
}

