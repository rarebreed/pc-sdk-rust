/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */

/// OpenNormalizedMessage : Open Messaging rich media message structure



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct OpenNormalizedMessage {
    /// Unique ID of the message. This ID is generated by Messaging Platform. Message receipts will have the same ID as the message they reference, as such should only be set when sending a message receipt.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "channel")]
    pub channel: Box<crate::models::OpenMessagingChannel>,
    /// Message type.
    #[serde(rename = "type")]
    pub _type: Type,
    /// Message text.
    #[serde(rename = "text", skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
    /// List of content elements.
    #[serde(rename = "content", skip_serializing_if = "Option::is_none")]
    pub content: Option<Vec<crate::models::OpenMessageContent>>,
    /// Message receipt status, only used with type Receipt.
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    /// List of reasons for a message receipt that indicates the message has failed. Only used with Failed status.
    #[serde(rename = "reasons", skip_serializing_if = "Option::is_none")]
    pub reasons: Option<Vec<crate::models::Reason>>,
    /// Indicates if this is the last message receipt for this message, or if another message receipt can be expected.
    #[serde(rename = "isFinalReceipt", skip_serializing_if = "Option::is_none")]
    pub is_final_receipt: Option<bool>,
    /// The direction of the message.
    #[serde(rename = "direction", skip_serializing_if = "Option::is_none")]
    pub direction: Option<Direction>,
    /// Additional metadata about this message.
    #[serde(rename = "metadata", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<::std::collections::HashMap<String, String>>,
}

impl OpenNormalizedMessage {
    /// Open Messaging rich media message structure
    pub fn new(channel: crate::models::OpenMessagingChannel, _type: Type) -> OpenNormalizedMessage {
        OpenNormalizedMessage {
            id: None,
            channel: Box::new(channel),
            _type,
            text: None,
            content: None,
            status: None,
            reasons: None,
            is_final_receipt: None,
            direction: None,
            metadata: None,
        }
    }
}

/// Message type.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "Text")]
    Text,
    #[serde(rename = "Receipt")]
    Receipt,
}

impl Default for Type {
    fn default() -> Type {
        Self::Text
    }
}
/// Message receipt status, only used with type Receipt.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "Sent")]
    Sent,
    #[serde(rename = "Delivered")]
    Delivered,
    #[serde(rename = "Read")]
    Read,
    #[serde(rename = "Failed")]
    Failed,
    #[serde(rename = "Published")]
    Published,
    #[serde(rename = "Removed")]
    Removed,
}

impl Default for Status {
    fn default() -> Status {
        Self::Sent
    }
}
/// The direction of the message.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Direction {
    #[serde(rename = "Inbound")]
    Inbound,
    #[serde(rename = "Outbound")]
    Outbound,
}

impl Default for Direction {
    fn default() -> Direction {
        Self::Inbound
    }
}

