/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct MessageData {
    /// The globally unique identifier for the object.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The unique identifier of the message from provider
    #[serde(rename = "providerMessageId", skip_serializing_if = "Option::is_none")]
    pub provider_message_id: Option<String>,
    /// The time when the message was received or sent. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "timestamp")]
    pub timestamp: String,
    /// The sender of the text message.
    #[serde(rename = "fromAddress", skip_serializing_if = "Option::is_none")]
    pub from_address: Option<String>,
    /// The recipient of the text message.
    #[serde(rename = "toAddress", skip_serializing_if = "Option::is_none")]
    pub to_address: Option<String>,
    /// The direction of the message.
    #[serde(rename = "direction", skip_serializing_if = "Option::is_none")]
    pub direction: Option<Direction>,
    /// Type of text messenger.
    #[serde(rename = "messengerType", skip_serializing_if = "Option::is_none")]
    pub messenger_type: Option<MessengerType>,
    /// The body of the text message.
    #[serde(rename = "textBody")]
    pub text_body: String,
    /// The status of the message.
    #[serde(rename = "status")]
    pub status: Status,
    /// The media details associated to a message.
    #[serde(rename = "media", skip_serializing_if = "Option::is_none")]
    pub media: Option<Vec<crate::models::MessageMedia>>,
    /// The sticker details associated to a message.
    #[serde(rename = "stickers", skip_serializing_if = "Option::is_none")]
    pub stickers: Option<Vec<crate::models::MessageSticker>>,
    #[serde(rename = "normalizedMessage", skip_serializing_if = "Option::is_none")]
    pub normalized_message: Option<Box<crate::models::ConversationNormalizedMessage>>,
    /// The delivery event associated with this message in normalized format, if the message direction was outbound
    #[serde(rename = "normalizedReceipts", skip_serializing_if = "Option::is_none")]
    pub normalized_receipts: Option<Vec<crate::models::ConversationNormalizedMessage>>,
    #[serde(rename = "createdBy", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<Box<crate::models::User>>,
    /// The id of the conversation of this message.
    #[serde(rename = "conversationId", skip_serializing_if = "Option::is_none")]
    pub conversation_id: Option<String>,
    /// The URI for this object
    #[serde(rename = "selfUri", skip_serializing_if = "Option::is_none")]
    pub self_uri: Option<String>,
}

impl MessageData {
    pub fn new(timestamp: String, text_body: String, status: Status) -> MessageData {
        MessageData {
            id: None,
            name: None,
            provider_message_id: None,
            timestamp,
            from_address: None,
            to_address: None,
            direction: None,
            messenger_type: None,
            text_body,
            status,
            media: None,
            stickers: None,
            normalized_message: None,
            normalized_receipts: None,
            created_by: None,
            conversation_id: None,
            self_uri: None,
        }
    }
}

/// The direction of the message.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Direction {
    #[serde(rename = "inbound")]
    Inbound,
    #[serde(rename = "outbound")]
    Outbound,
}

impl Default for Direction {
    fn default() -> Direction {
        Self::Inbound
    }
}
/// Type of text messenger.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MessengerType {
    #[serde(rename = "sms")]
    Sms,
    #[serde(rename = "facebook")]
    Facebook,
    #[serde(rename = "twitter")]
    Twitter,
    #[serde(rename = "line")]
    Line,
    #[serde(rename = "whatsapp")]
    Whatsapp,
    #[serde(rename = "webmessaging")]
    Webmessaging,
    #[serde(rename = "instagram")]
    Instagram,
    #[serde(rename = "open")]
    Open,
}

impl Default for MessengerType {
    fn default() -> MessengerType {
        Self::Sms
    }
}
/// The status of the message.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "queued")]
    Queued,
    #[serde(rename = "sent")]
    Sent,
    #[serde(rename = "failed")]
    Failed,
    #[serde(rename = "received")]
    Received,
    #[serde(rename = "delivery-success")]
    DeliverySuccess,
    #[serde(rename = "delivery-failed")]
    DeliveryFailed,
    #[serde(rename = "read")]
    Read,
}

impl Default for Status {
    fn default() -> Status {
        Self::Queued
    }
}

