/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct WorkPlanConfigurationViolationMessage {
    /// Type of configuration violation message for this work plan
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<Type>,
    /// Arguments of the message that provide information about the misconfigured value or the threshold that is exceeded by the misconfigured value
    #[serde(rename = "arguments", skip_serializing_if = "Option::is_none")]
    pub arguments: Option<Vec<crate::models::WorkPlanValidationMessageArgument>>,
    /// Severity of the message. A message with Error severity indicates the scheduler won't be able to produce schedules and thus the work plan is invalid.
    #[serde(rename = "severity", skip_serializing_if = "Option::is_none")]
    pub severity: Option<Severity>,
}

impl WorkPlanConfigurationViolationMessage {
    pub fn new() -> WorkPlanConfigurationViolationMessage {
        WorkPlanConfigurationViolationMessage {
            _type: None,
            arguments: None,
            severity: None,
        }
    }
}

/// Type of configuration violation message for this work plan
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "ActivitiesOverlap")]
    ActivitiesOverlap,
    #[serde(rename = "ActivityEndGreaterThanShiftStop")]
    ActivityEndGreaterThanShiftStop,
    #[serde(rename = "ActivityPaidTimeGreaterThanShiftPaidTime")]
    ActivityPaidTimeGreaterThanShiftPaidTime,
    #[serde(rename = "ActivityStartBeforeShiftStart")]
    ActivityStartBeforeShiftStart,
    #[serde(rename = "ActivityStartGreaterThanEqualToShiftStop")]
    ActivityStartGreaterThanEqualToShiftStop,
    #[serde(rename = "ActivityStartIncrementMinutesNotDivisibleByScheduleIntervalMinutes")]
    ActivityStartIncrementMinutesNotDivisibleByScheduleIntervalMinutes,
    #[serde(rename = "DailyExactPaidMinutes")]
    DailyExactPaidMinutes,
    #[serde(rename = "DailyMaxTotalLessThanWeeklyMin")]
    DailyMaxTotalLessThanWeeklyMin,
    #[serde(rename = "DailyMaxTotalLessThanWeeklyMinWithOptional")]
    DailyMaxTotalLessThanWeeklyMinWithOptional,
    #[serde(rename = "DailyMaxTotalLessThanWeeklyMinWithoutOptional")]
    DailyMaxTotalLessThanWeeklyMinWithoutOptional,
    #[serde(rename = "DailyMinTotalGreaterThanWeeklyMax")]
    DailyMinTotalGreaterThanWeeklyMax,
    #[serde(rename = "DailyMinTotalGreaterThanWeeklyMaxWithOptional")]
    DailyMinTotalGreaterThanWeeklyMaxWithOptional,
    #[serde(rename = "DailyMinTotalGreaterThanWeeklyMaxWithoutOptional")]
    DailyMinTotalGreaterThanWeeklyMaxWithoutOptional,
    #[serde(rename = "DailyRequiredDaysGreaterThanWeeklyMaxDays")]
    DailyRequiredDaysGreaterThanWeeklyMaxDays,
    #[serde(rename = "DailyShiftHasNoDaysSelected")]
    DailyShiftHasNoDaysSelected,
    #[serde(rename = "DailyShiftMaxPossibilitiesViolated")]
    DailyShiftMaxPossibilitiesViolated,
    #[serde(rename = "EarliestShiftStopIsTooLate")]
    EarliestShiftStopIsTooLate,
    #[serde(rename = "ExactPaidTimeNotDivisibleByGranularity")]
    ExactPaidTimeNotDivisibleByGranularity,
    #[serde(rename = "MaxConsecutiveWorkingDaysNoMoreThanDoubleMaxWorkingDaysPerWeek")]
    MaxConsecutiveWorkingDaysNoMoreThanDoubleMaxWorkingDaysPerWeek,
    #[serde(rename = "MaxDaysOffPerPlanningPeriodNotCorrect")]
    MaxDaysOffPerPlanningPeriodNotCorrect,
    #[serde(rename = "MaxPaidTimeIsMoreThanShiftLength")]
    MaxPaidTimeIsMoreThanShiftLength,
    #[serde(rename = "MaxPaidTimeNotDivisibleByGranularity")]
    MaxPaidTimeNotDivisibleByGranularity,
    #[serde(rename = "MaxPaidTimePerPlanningPeriod")]
    MaxPaidTimePerPlanningPeriod,
    #[serde(rename = "MaxShifts")]
    MaxShifts,
    #[serde(rename = "MinPaidTimeNotDivisibleByGranularity")]
    MinPaidTimeNotDivisibleByGranularity,
    #[serde(rename = "MinPaidTimePerPlanningPeriod")]
    MinPaidTimePerPlanningPeriod,
    #[serde(rename = "NoShifts")]
    NoShifts,
    #[serde(rename = "PaidTimeGreaterThanMaxWorkTime")]
    PaidTimeGreaterThanMaxWorkTime,
    #[serde(rename = "PaidTimeLessThanMinWorkTime")]
    PaidTimeLessThanMinWorkTime,
    #[serde(rename = "PaidTimeNotMetByShiftStartStop")]
    PaidTimeNotMetByShiftStartStop,
    #[serde(rename = "ShiftDaysSelectMoreThanMinWorkingDays")]
    ShiftDaysSelectMoreThanMinWorkingDays,
    #[serde(rename = "ShiftStopEarlierThanStart")]
    ShiftStopEarlierThanStart,
    #[serde(rename = "ShiftVarianceCannotBeMet")]
    ShiftVarianceCannotBeMet,
    #[serde(rename = "WeeklyExactPaidMinutes")]
    WeeklyExactPaidMinutes,
}

impl Default for Type {
    fn default() -> Type {
        Self::ActivitiesOverlap
    }
}
/// Severity of the message. A message with Error severity indicates the scheduler won't be able to produce schedules and thus the work plan is invalid.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Severity {
    #[serde(rename = "Information")]
    Information,
    #[serde(rename = "Warning")]
    Warning,
    #[serde(rename = "Error")]
    Error,
}

impl Default for Severity {
    fn default() -> Severity {
        Self::Information
    }
}

