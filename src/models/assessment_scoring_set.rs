/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct AssessmentScoringSet {
    /// The total score of the answers
    #[serde(rename = "totalScore", skip_serializing_if = "Option::is_none")]
    pub total_score: Option<f32>,
    /// The total score for the critical questions
    #[serde(rename = "totalCriticalScore", skip_serializing_if = "Option::is_none")]
    pub total_critical_score: Option<f32>,
    /// The total score for the non-critical questions
    #[serde(rename = "totalNonCriticalScore", skip_serializing_if = "Option::is_none")]
    pub total_non_critical_score: Option<f32>,
    /// The individual scores for each question group
    #[serde(rename = "questionGroupScores")]
    pub question_group_scores: Vec<crate::models::AssessmentQuestionGroupScore>,
    /// If the assessment was not passed, the reasons for failure.
    #[serde(rename = "failureReasons", skip_serializing_if = "Option::is_none")]
    pub failure_reasons: Option<std::collections::HashSet<FailureReasons>>,
    /// Comments provided for these answers.
    #[serde(rename = "comments", skip_serializing_if = "Option::is_none")]
    pub comments: Option<String>,
    /// Comments provided by agent.
    #[serde(rename = "agentComments", skip_serializing_if = "Option::is_none")]
    pub agent_comments: Option<String>,
    /// True if the assessment was passed
    #[serde(rename = "isPassed", skip_serializing_if = "Option::is_none")]
    pub is_passed: Option<bool>,
}

impl AssessmentScoringSet {
    pub fn new(question_group_scores: Vec<crate::models::AssessmentQuestionGroupScore>) -> AssessmentScoringSet {
        AssessmentScoringSet {
            total_score: None,
            total_critical_score: None,
            total_non_critical_score: None,
            question_group_scores,
            failure_reasons: None,
            comments: None,
            agent_comments: None,
            is_passed: None,
        }
    }
}

/// If the assessment was not passed, the reasons for failure.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FailureReasons {
    #[serde(rename = "Score")]
    Score,
    #[serde(rename = "CriticalScore")]
    CriticalScore,
    #[serde(rename = "KillQuestion")]
    KillQuestion,
}

impl Default for FailureReasons {
    fn default() -> FailureReasons {
        Self::Score
    }
}

