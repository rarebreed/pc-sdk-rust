/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */

/// IntegrationType : Descriptor for a type of Integration.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct IntegrationType {
    /// The ID of the integration type.
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Description of the integration type.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// PureCloud provider of the integration type.
    #[serde(rename = "provider", skip_serializing_if = "Option::is_none")]
    pub provider: Option<String>,
    /// Category describing the integration type.
    #[serde(rename = "category", skip_serializing_if = "Option::is_none")]
    pub category: Option<String>,
    /// Collection of logos.
    #[serde(rename = "images", skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<crate::models::UserImage>>,
    /// URI of the schema describing the key-value properties needed to configure an integration of this type.
    #[serde(rename = "configPropertiesSchemaUri", skip_serializing_if = "Option::is_none")]
    pub config_properties_schema_uri: Option<String>,
    /// URI of the schema describing the advanced JSON document needed to configure an integration of this type.
    #[serde(rename = "configAdvancedSchemaUri", skip_serializing_if = "Option::is_none")]
    pub config_advanced_schema_uri: Option<String>,
    /// URI of a page with more information about the integration type
    #[serde(rename = "helpUri", skip_serializing_if = "Option::is_none")]
    pub help_uri: Option<String>,
    /// URI of a page with terms and conditions for the integration type
    #[serde(rename = "termsOfServiceUri", skip_serializing_if = "Option::is_none")]
    pub terms_of_service_uri: Option<String>,
    /// Name of the vendor of this integration type
    #[serde(rename = "vendorName", skip_serializing_if = "Option::is_none")]
    pub vendor_name: Option<String>,
    /// URI of the vendor's website
    #[serde(rename = "vendorWebsiteUri", skip_serializing_if = "Option::is_none")]
    pub vendor_website_uri: Option<String>,
    /// URI of the marketplace listing for this integration type
    #[serde(rename = "marketplaceUri", skip_serializing_if = "Option::is_none")]
    pub marketplace_uri: Option<String>,
    /// URI of frequently asked questions about the integration type
    #[serde(rename = "faqUri", skip_serializing_if = "Option::is_none")]
    pub faq_uri: Option<String>,
    /// URI of a privacy policy for users of the integration type
    #[serde(rename = "privacyPolicyUri", skip_serializing_if = "Option::is_none")]
    pub privacy_policy_uri: Option<String>,
    /// URI for vendor support
    #[serde(rename = "supportContactUri", skip_serializing_if = "Option::is_none")]
    pub support_contact_uri: Option<String>,
    /// URI for vendor sales information
    #[serde(rename = "salesContactUri", skip_serializing_if = "Option::is_none")]
    pub sales_contact_uri: Option<String>,
    /// List of links to additional help resources
    #[serde(rename = "helpLinks", skip_serializing_if = "Option::is_none")]
    pub help_links: Option<Vec<crate::models::HelpLink>>,
    /// Map of credentials for integrations of this type. The key is the name of a credential that can be provided in the credentials property of the integration configuration.
    #[serde(rename = "credentials", skip_serializing_if = "Option::is_none")]
    pub credentials: Option<::std::collections::HashMap<String, crate::models::CredentialSpecification>>,
    /// Indicates if the integration type is installable or not.
    #[serde(rename = "nonInstallable", skip_serializing_if = "Option::is_none")]
    pub non_installable: Option<bool>,
    /// The maximum number of integration instances allowable for this integration type
    #[serde(rename = "maxInstances", skip_serializing_if = "Option::is_none")]
    pub max_instances: Option<i32>,
    /// List of permissions required to permit user access to the integration type.
    #[serde(rename = "userPermissions", skip_serializing_if = "Option::is_none")]
    pub user_permissions: Option<Vec<String>>,
    /// List of OAuth Client IDs that must be authorized when the integration is created.
    #[serde(rename = "vendorOAuthClientIds", skip_serializing_if = "Option::is_none")]
    pub vendor_o_auth_client_ids: Option<Vec<String>>,
    /// The URI for this object
    #[serde(rename = "selfUri", skip_serializing_if = "Option::is_none")]
    pub self_uri: Option<String>,
}

impl IntegrationType {
    /// Descriptor for a type of Integration.
    pub fn new(id: String) -> IntegrationType {
        IntegrationType {
            id,
            name: None,
            description: None,
            provider: None,
            category: None,
            images: None,
            config_properties_schema_uri: None,
            config_advanced_schema_uri: None,
            help_uri: None,
            terms_of_service_uri: None,
            vendor_name: None,
            vendor_website_uri: None,
            marketplace_uri: None,
            faq_uri: None,
            privacy_policy_uri: None,
            support_contact_uri: None,
            sales_contact_uri: None,
            help_links: None,
            credentials: None,
            non_installable: None,
            max_instances: None,
            user_permissions: None,
            vendor_o_auth_client_ids: None,
            self_uri: None,
        }
    }
}


