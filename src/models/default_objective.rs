/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct DefaultObjective {
    /// The globally unique identifier for the object.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The id of this objective's base template
    #[serde(rename = "templateId", skip_serializing_if = "Option::is_none")]
    pub template_id: Option<String>,
    /// Objective zone specifies min,max points and values for the associated metric
    #[serde(rename = "zones", skip_serializing_if = "Option::is_none")]
    pub zones: Option<Vec<crate::models::ObjectiveZone>>,
    /// A flag for whether this objective is enabled for the related metric
    #[serde(rename = "enabled", skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// A list of media types for the metric
    #[serde(rename = "mediaTypes", skip_serializing_if = "Option::is_none")]
    pub media_types: Option<Vec<MediaTypes>>,
    /// A list of queues for the metric
    #[serde(rename = "queues", skip_serializing_if = "Option::is_none")]
    pub queues: Option<Vec<crate::models::AddressableEntityRef>>,
    /// A list of topic ids for detected topic metrics
    #[serde(rename = "topics", skip_serializing_if = "Option::is_none")]
    pub topics: Option<Vec<crate::models::AddressableEntityRef>>,
    /// A filter type for topic Ids. It's only used for objectives with topicIds. Default filter behavior is \"or\".
    #[serde(rename = "topicIdsFilterType", skip_serializing_if = "Option::is_none")]
    pub topic_ids_filter_type: Option<TopicIdsFilterType>,
}

impl DefaultObjective {
    pub fn new() -> DefaultObjective {
        DefaultObjective {
            id: None,
            template_id: None,
            zones: None,
            enabled: None,
            media_types: None,
            queues: None,
            topics: None,
            topic_ids_filter_type: None,
        }
    }
}

/// A list of media types for the metric
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MediaTypes {
    #[serde(rename = "callback")]
    Callback,
    #[serde(rename = "chat")]
    Chat,
    #[serde(rename = "cobrowse")]
    Cobrowse,
    #[serde(rename = "email")]
    Email,
    #[serde(rename = "message")]
    Message,
    #[serde(rename = "screenshare")]
    Screenshare,
    #[serde(rename = "unknown")]
    Unknown,
    #[serde(rename = "video")]
    Video,
    #[serde(rename = "voice")]
    Voice,
}

impl Default for MediaTypes {
    fn default() -> MediaTypes {
        Self::Callback
    }
}
/// A filter type for topic Ids. It's only used for objectives with topicIds. Default filter behavior is \"or\".
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TopicIdsFilterType {
    #[serde(rename = "and")]
    And,
    #[serde(rename = "or")]
    Or,
}

impl Default for TopicIdsFilterType {
    fn default() -> TopicIdsFilterType {
        Self::And
    }
}

