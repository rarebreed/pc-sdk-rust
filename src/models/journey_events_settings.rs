/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */

/// JourneyEventsSettings : Settings concerning journey events



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct JourneyEventsSettings {
    /// Whether or not journey event collection is enabled.
    #[serde(rename = "enabled", skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// List of parameters to be excluded from the query string.
    #[serde(rename = "excludedQueryParameters", skip_serializing_if = "Option::is_none")]
    pub excluded_query_parameters: Option<Vec<String>>,
    /// Whether or not to keep the URL fragment.
    #[serde(rename = "shouldKeepUrlFragment", skip_serializing_if = "Option::is_none")]
    pub should_keep_url_fragment: Option<bool>,
    /// List of query parameters used for search (e.g. 'q').
    #[serde(rename = "searchQueryParameters", skip_serializing_if = "Option::is_none")]
    pub search_query_parameters: Option<Vec<String>>,
    /// Controls how the pageview events are tracked.
    #[serde(rename = "pageviewConfig", skip_serializing_if = "Option::is_none")]
    pub pageview_config: Option<PageviewConfig>,
    /// Tracks when and where a visitor clicks on a webpage.
    #[serde(rename = "clickEvents", skip_serializing_if = "Option::is_none")]
    pub click_events: Option<Vec<crate::models::SelectorEventTrigger>>,
    /// Controls how the form submitted and form abandoned events are tracked after a visitor interacts with a form element.
    #[serde(rename = "formsTrackEvents", skip_serializing_if = "Option::is_none")]
    pub forms_track_events: Option<Vec<crate::models::FormsTrackTrigger>>,
    /// Tracks when and where a visitor becomes inactive on a webpage.
    #[serde(rename = "idleEvents", skip_serializing_if = "Option::is_none")]
    pub idle_events: Option<Vec<crate::models::IdleEventTrigger>>,
    /// Tracks when elements become visible or hidden on screen.
    #[serde(rename = "inViewportEvents", skip_serializing_if = "Option::is_none")]
    pub in_viewport_events: Option<Vec<crate::models::SelectorEventTrigger>>,
    /// Tracks when a visitor scrolls to a specific percentage of a webpage.
    #[serde(rename = "scrollDepthEvents", skip_serializing_if = "Option::is_none")]
    pub scroll_depth_events: Option<Vec<crate::models::ScrollPercentageEventTrigger>>,
}

impl JourneyEventsSettings {
    /// Settings concerning journey events
    pub fn new() -> JourneyEventsSettings {
        JourneyEventsSettings {
            enabled: None,
            excluded_query_parameters: None,
            should_keep_url_fragment: None,
            search_query_parameters: None,
            pageview_config: None,
            click_events: None,
            forms_track_events: None,
            idle_events: None,
            in_viewport_events: None,
            scroll_depth_events: None,
        }
    }
}

/// Controls how the pageview events are tracked.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PageviewConfig {
    #[serde(rename = "Auto")]
    Auto,
    #[serde(rename = "Once")]
    Once,
    #[serde(rename = "Off")]
    Off,
}

impl Default for PageviewConfig {
    fn default() -> PageviewConfig {
        Self::Auto
    }
}

