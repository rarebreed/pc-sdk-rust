/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Video {
    /// The connection state of this communication.
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<State>,
    /// A globally unique identifier for this communication.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The room id context (xmpp jid) for the conference session.
    #[serde(rename = "context", skip_serializing_if = "Option::is_none")]
    pub context: Option<String>,
    /// Indicates whether this participant has muted their outgoing audio.
    #[serde(rename = "audioMuted", skip_serializing_if = "Option::is_none")]
    pub audio_muted: Option<bool>,
    /// Indicates whether this participant has muted/paused their outgoing video.
    #[serde(rename = "videoMuted", skip_serializing_if = "Option::is_none")]
    pub video_muted: Option<bool>,
    /// Indicates whether this participant is sharing their screen to the session.
    #[serde(rename = "sharingScreen", skip_serializing_if = "Option::is_none")]
    pub sharing_screen: Option<bool>,
    /// The number of peer participants from the perspective of the participant in the conference.
    #[serde(rename = "peerCount", skip_serializing_if = "Option::is_none")]
    pub peer_count: Option<i32>,
    /// System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.
    #[serde(rename = "disconnectType", skip_serializing_if = "Option::is_none")]
    pub disconnect_type: Option<DisconnectType>,
    /// The timestamp the communication has when it is first put into an alerting state. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "startAlertingTime", skip_serializing_if = "Option::is_none")]
    pub start_alerting_time: Option<String>,
    /// The timestamp when this communication was connected in the cloud clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "connectedTime", skip_serializing_if = "Option::is_none")]
    pub connected_time: Option<String>,
    /// The timestamp when this communication disconnected from the conversation in the provider clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "disconnectedTime", skip_serializing_if = "Option::is_none")]
    pub disconnected_time: Option<String>,
    /// The source provider for the video.
    #[serde(rename = "provider", skip_serializing_if = "Option::is_none")]
    pub provider: Option<String>,
    /// The id of the peer communication corresponding to a matching leg for this communication.
    #[serde(rename = "peerId", skip_serializing_if = "Option::is_none")]
    pub peer_id: Option<String>,
    /// List of media stream ids
    #[serde(rename = "msids", skip_serializing_if = "Option::is_none")]
    pub msids: Option<Vec<String>>,
    #[serde(rename = "self", skip_serializing_if = "Option::is_none")]
    pub _self: Option<Box<crate::models::Address>>,
    #[serde(rename = "wrapup", skip_serializing_if = "Option::is_none")]
    pub wrapup: Option<Box<crate::models::Wrapup>>,
    #[serde(rename = "afterCallWork", skip_serializing_if = "Option::is_none")]
    pub after_call_work: Option<Box<crate::models::AfterCallWork>>,
    /// Indicates if after-call work is required for a communication. Only used when the ACW Setting is Agent Requested.
    #[serde(rename = "afterCallWorkRequired", skip_serializing_if = "Option::is_none")]
    pub after_call_work_required: Option<bool>,
}

impl Video {
    pub fn new() -> Video {
        Video {
            state: None,
            id: None,
            context: None,
            audio_muted: None,
            video_muted: None,
            sharing_screen: None,
            peer_count: None,
            disconnect_type: None,
            start_alerting_time: None,
            connected_time: None,
            disconnected_time: None,
            provider: None,
            peer_id: None,
            msids: None,
            _self: None,
            wrapup: None,
            after_call_work: None,
            after_call_work_required: None,
        }
    }
}

/// The connection state of this communication.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "alerting")]
    Alerting,
    #[serde(rename = "dialing")]
    Dialing,
    #[serde(rename = "contacting")]
    Contacting,
    #[serde(rename = "offering")]
    Offering,
    #[serde(rename = "connected")]
    Connected,
    #[serde(rename = "disconnected")]
    Disconnected,
    #[serde(rename = "terminated")]
    Terminated,
    #[serde(rename = "none")]
    None,
}

impl Default for State {
    fn default() -> State {
        Self::Alerting
    }
}
/// System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DisconnectType {
    #[serde(rename = "endpoint")]
    Endpoint,
    #[serde(rename = "client")]
    Client,
    #[serde(rename = "system")]
    System,
    #[serde(rename = "timeout")]
    Timeout,
    #[serde(rename = "transfer")]
    Transfer,
    #[serde(rename = "transfer.conference")]
    TransferConference,
    #[serde(rename = "transfer.consult")]
    TransferConsult,
    #[serde(rename = "transfer.forward")]
    TransferForward,
    #[serde(rename = "transfer.noanswer")]
    TransferNoanswer,
    #[serde(rename = "transfer.notavailable")]
    TransferNotavailable,
    #[serde(rename = "transport.failure")]
    TransportFailure,
    #[serde(rename = "error")]
    Error,
    #[serde(rename = "peer")]
    Peer,
    #[serde(rename = "other")]
    Other,
    #[serde(rename = "spam")]
    Spam,
    #[serde(rename = "uncallable")]
    Uncallable,
}

impl Default for DisconnectType {
    fn default() -> DisconnectType {
        Self::Endpoint
    }
}

