/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ConversationChannel {
    /// The type or category of this channel.
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<Type>,
    /// Message type for messaging conversations.
    #[serde(rename = "messageType", skip_serializing_if = "Option::is_none")]
    pub message_type: Option<MessageType>,
    /// The source provider for the conversation (e.g. Edge, PureCloud Messaging, PureCloud Email).
    #[serde(rename = "platform", skip_serializing_if = "Option::is_none")]
    pub platform: Option<String>,
}

impl ConversationChannel {
    pub fn new() -> ConversationChannel {
        ConversationChannel {
            _type: None,
            message_type: None,
            platform: None,
        }
    }
}

/// The type or category of this channel.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "Unknown")]
    Unknown,
    #[serde(rename = "Call")]
    Call,
    #[serde(rename = "Callback")]
    Callback,
    #[serde(rename = "Email")]
    Email,
    #[serde(rename = "GenericObject")]
    GenericObject,
    #[serde(rename = "Messaging")]
    Messaging,
    #[serde(rename = "Social")]
    Social,
    #[serde(rename = "Webchat")]
    Webchat,
    #[serde(rename = "Voice")]
    Voice,
    #[serde(rename = "Chat")]
    Chat,
    #[serde(rename = "Cobrowse")]
    Cobrowse,
    #[serde(rename = "Video")]
    Video,
    #[serde(rename = "Screenshare")]
    Screenshare,
    #[serde(rename = "Message")]
    Message,
}

impl Default for Type {
    fn default() -> Type {
        Self::Unknown
    }
}
/// Message type for messaging conversations.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MessageType {
    #[serde(rename = "Unknown")]
    Unknown,
    #[serde(rename = "Sms")]
    Sms,
    #[serde(rename = "Twitter")]
    Twitter,
    #[serde(rename = "Facebook")]
    Facebook,
    #[serde(rename = "Line")]
    Line,
    #[serde(rename = "WhatsApp")]
    WhatsApp,
    #[serde(rename = "WebMessaging")]
    WebMessaging,
    #[serde(rename = "Open")]
    Open,
    #[serde(rename = "Instagram")]
    Instagram,
}

impl Default for MessageType {
    fn default() -> MessageType {
        Self::Unknown
    }
}

