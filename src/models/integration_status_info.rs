/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */

/// IntegrationStatusInfo : Status information for an Integration.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct IntegrationStatusInfo {
    /// Machine-readable status as reported by the integration.
    #[serde(rename = "code", skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,
    /// Localized, human-readable, effective status of the integration.
    #[serde(rename = "effective", skip_serializing_if = "Option::is_none")]
    pub effective: Option<String>,
    #[serde(rename = "detail", skip_serializing_if = "Option::is_none")]
    pub detail: Option<Box<crate::models::MessageInfo>>,
    /// Date and time (in UTC) when the integration status (i.e. the code field) was last updated. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "lastUpdated", skip_serializing_if = "Option::is_none")]
    pub last_updated: Option<String>,
}

impl IntegrationStatusInfo {
    /// Status information for an Integration.
    pub fn new() -> IntegrationStatusInfo {
        IntegrationStatusInfo {
            code: None,
            effective: None,
            detail: None,
            last_updated: None,
        }
    }
}

/// Machine-readable status as reported by the integration.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Code {
    #[serde(rename = "ACTIVE")]
    ACTIVE,
    #[serde(rename = "ACTIVATING")]
    ACTIVATING,
    #[serde(rename = "INACTIVE")]
    INACTIVE,
    #[serde(rename = "DEACTIVATING")]
    DEACTIVATING,
    #[serde(rename = "ERROR")]
    ERROR,
}

impl Default for Code {
    fn default() -> Code {
        Self::ACTIVE
    }
}

