/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */

/// WorkPlanShift : Shift in a work plan



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct WorkPlanShift {
    /// Name of the shift
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "days", skip_serializing_if = "Option::is_none")]
    pub days: Option<Box<crate::models::SetWrapperDayOfWeek>>,
    /// Whether the start time of the shift is flexible
    #[serde(rename = "flexibleStartTime", skip_serializing_if = "Option::is_none")]
    pub flexible_start_time: Option<bool>,
    /// Exact start time of the shift defined as offset minutes from midnight. Used if flexibleStartTime == false
    #[serde(rename = "exactStartTimeMinutesFromMidnight", skip_serializing_if = "Option::is_none")]
    pub exact_start_time_minutes_from_midnight: Option<i32>,
    /// Earliest start time of the shift defined as offset minutes from midnight. Used if flexibleStartTime == true
    #[serde(rename = "earliestStartTimeMinutesFromMidnight", skip_serializing_if = "Option::is_none")]
    pub earliest_start_time_minutes_from_midnight: Option<i32>,
    /// Latest start time of the shift defined as offset minutes from midnight. Used if flexibleStartTime == true
    #[serde(rename = "latestStartTimeMinutesFromMidnight", skip_serializing_if = "Option::is_none")]
    pub latest_start_time_minutes_from_midnight: Option<i32>,
    /// Whether the latest stop time constraint for the shift is enabled.  Deprecated, use constrainLatestStopTime instead
    #[serde(rename = "constrainStopTime", skip_serializing_if = "Option::is_none")]
    pub constrain_stop_time: Option<bool>,
    /// Whether the latest stop time constraint for the shift is enabled
    #[serde(rename = "constrainLatestStopTime", skip_serializing_if = "Option::is_none")]
    pub constrain_latest_stop_time: Option<bool>,
    /// Latest stop time of the shift defined as offset minutes from midnight. Used if constrainStopTime == true
    #[serde(rename = "latestStopTimeMinutesFromMidnight", skip_serializing_if = "Option::is_none")]
    pub latest_stop_time_minutes_from_midnight: Option<i32>,
    /// Whether the earliest stop time constraint for the shift is enabled
    #[serde(rename = "constrainEarliestStopTime", skip_serializing_if = "Option::is_none")]
    pub constrain_earliest_stop_time: Option<bool>,
    /// This is the earliest time a shift can end
    #[serde(rename = "earliestStopTimeMinutesFromMidnight", skip_serializing_if = "Option::is_none")]
    pub earliest_stop_time_minutes_from_midnight: Option<i32>,
    /// Increment in offset minutes that would contribute to different possible start times for the shift. Used if flexibleStartTime == true
    #[serde(rename = "startIncrementMinutes", skip_serializing_if = "Option::is_none")]
    pub start_increment_minutes: Option<i32>,
    /// Whether the paid time setting for the shift is flexible
    #[serde(rename = "flexiblePaidTime", skip_serializing_if = "Option::is_none")]
    pub flexible_paid_time: Option<bool>,
    /// Exact paid time in minutes configured for the shift. Used if flexiblePaidTime == false
    #[serde(rename = "exactPaidTimeMinutes", skip_serializing_if = "Option::is_none")]
    pub exact_paid_time_minutes: Option<i32>,
    /// Minimum paid time in minutes configured for the shift. Used if flexiblePaidTime == true
    #[serde(rename = "minimumPaidTimeMinutes", skip_serializing_if = "Option::is_none")]
    pub minimum_paid_time_minutes: Option<i32>,
    /// Maximum paid time in minutes configured for the shift. Used if flexiblePaidTime == true
    #[serde(rename = "maximumPaidTimeMinutes", skip_serializing_if = "Option::is_none")]
    pub maximum_paid_time_minutes: Option<i32>,
    /// Whether the contiguous time constraint for the shift is enabled
    #[serde(rename = "constrainContiguousWorkTime", skip_serializing_if = "Option::is_none")]
    pub constrain_contiguous_work_time: Option<bool>,
    /// Minimum contiguous time in minutes configured for the shift. Used if constrainContiguousWorkTime == true
    #[serde(rename = "minimumContiguousWorkTimeMinutes", skip_serializing_if = "Option::is_none")]
    pub minimum_contiguous_work_time_minutes: Option<i32>,
    /// Maximum contiguous time in minutes configured for the shift. Used if constrainContiguousWorkTime == true
    #[serde(rename = "maximumContiguousWorkTimeMinutes", skip_serializing_if = "Option::is_none")]
    pub maximum_contiguous_work_time_minutes: Option<i32>,
    /// Activities configured for this shift
    #[serde(rename = "activities", skip_serializing_if = "Option::is_none")]
    pub activities: Option<Vec<crate::models::WorkPlanActivity>>,
    /// ID of the shift. This is required only for the case of updating an existing shift
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// If marked true for updating an existing shift, the shift will be permanently deleted
    #[serde(rename = "delete", skip_serializing_if = "Option::is_none")]
    pub delete: Option<bool>,
    /// ID of shift in the context of work plan validation
    #[serde(rename = "validationId", skip_serializing_if = "Option::is_none")]
    pub validation_id: Option<String>,
}

impl WorkPlanShift {
    /// Shift in a work plan
    pub fn new(name: String) -> WorkPlanShift {
        WorkPlanShift {
            name,
            days: None,
            flexible_start_time: None,
            exact_start_time_minutes_from_midnight: None,
            earliest_start_time_minutes_from_midnight: None,
            latest_start_time_minutes_from_midnight: None,
            constrain_stop_time: None,
            constrain_latest_stop_time: None,
            latest_stop_time_minutes_from_midnight: None,
            constrain_earliest_stop_time: None,
            earliest_stop_time_minutes_from_midnight: None,
            start_increment_minutes: None,
            flexible_paid_time: None,
            exact_paid_time_minutes: None,
            minimum_paid_time_minutes: None,
            maximum_paid_time_minutes: None,
            constrain_contiguous_work_time: None,
            minimum_contiguous_work_time_minutes: None,
            maximum_contiguous_work_time_minutes: None,
            activities: None,
            id: None,
            delete: None,
            validation_id: None,
        }
    }
}


