/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ReportingTurn {
    /// The chosen user input associated with this reporting turn.
    #[serde(rename = "userInput", skip_serializing_if = "Option::is_none")]
    pub user_input: Option<String>,
    /// The bot prompts associated with this reporting turn.
    #[serde(rename = "botPrompts", skip_serializing_if = "Option::is_none")]
    pub bot_prompts: Option<Vec<String>>,
    /// The bot session ID that this reporting turn is grouped under.
    #[serde(rename = "sessionId", skip_serializing_if = "Option::is_none")]
    pub session_id: Option<String>,
    #[serde(rename = "askAction", skip_serializing_if = "Option::is_none")]
    pub ask_action: Option<Box<crate::models::ReportingTurnAction>>,
    #[serde(rename = "intent", skip_serializing_if = "Option::is_none")]
    pub intent: Option<Box<crate::models::ReportingTurnIntent>>,
    #[serde(rename = "knowledge", skip_serializing_if = "Option::is_none")]
    pub knowledge: Option<Box<crate::models::ReportingTurnKnowledge>>,
    /// Timestamp indicating when the original turn was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "dateCreated", skip_serializing_if = "Option::is_none")]
    pub date_created: Option<String>,
    /// Result of the bot flow 'ask' action.
    #[serde(rename = "askActionResult", skip_serializing_if = "Option::is_none")]
    pub ask_action_result: Option<AskActionResult>,
    #[serde(rename = "conversation", skip_serializing_if = "Option::is_none")]
    pub conversation: Option<Box<crate::models::AddressableEntityRef>>,
}

impl ReportingTurn {
    pub fn new() -> ReportingTurn {
        ReportingTurn {
            user_input: None,
            bot_prompts: None,
            session_id: None,
            ask_action: None,
            intent: None,
            knowledge: None,
            date_created: None,
            ask_action_result: None,
            conversation: None,
        }
    }
}

/// Result of the bot flow 'ask' action.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AskActionResult {
    #[serde(rename = "SuccessCollection")]
    SuccessCollection,
    #[serde(rename = "SuccessConfirmationYes")]
    SuccessConfirmationYes,
    #[serde(rename = "SuccessConfirmationNo")]
    SuccessConfirmationNo,
    #[serde(rename = "NoMatchCollection")]
    NoMatchCollection,
    #[serde(rename = "NoMatchConfirmation")]
    NoMatchConfirmation,
    #[serde(rename = "AgentRequestedByUser")]
    AgentRequestedByUser,
    #[serde(rename = "ConfirmationRequired")]
    ConfirmationRequired,
    #[serde(rename = "Error")]
    Error,
    #[serde(rename = "ExpressionError")]
    ExpressionError,
    #[serde(rename = "NoInputCollection")]
    NoInputCollection,
    #[serde(rename = "NoInputConfirmation")]
    NoInputConfirmation,
    #[serde(rename = "DisambiguationRequired")]
    DisambiguationRequired,
    #[serde(rename = "SuccessDisambiguation")]
    SuccessDisambiguation,
    #[serde(rename = "SuccessDisambiguationNone")]
    SuccessDisambiguationNone,
    #[serde(rename = "NoMatchDisambiguation")]
    NoMatchDisambiguation,
    #[serde(rename = "NoInputDisambiguation")]
    NoInputDisambiguation,
}

impl Default for AskActionResult {
    fn default() -> AskActionResult {
        Self::SuccessCollection
    }
}

