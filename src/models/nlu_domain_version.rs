/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct NluDomainVersion {
    /// The globally unique identifier for the object.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "domain", skip_serializing_if = "Option::is_none")]
    pub domain: Option<Box<crate::models::NluDomain>>,
    /// The description of the NLU domain version.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The language that the NLU domain version supports.
    #[serde(rename = "language")]
    pub language: String,
    /// Whether this NLU domain version has been published.
    #[serde(rename = "published", skip_serializing_if = "Option::is_none")]
    pub published: Option<bool>,
    /// The date when the NLU domain version was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "dateCreated", skip_serializing_if = "Option::is_none")]
    pub date_created: Option<String>,
    /// The date when the NLU domain version was updated. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "dateModified", skip_serializing_if = "Option::is_none")]
    pub date_modified: Option<String>,
    /// The date when the NLU domain version was trained. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "dateTrained", skip_serializing_if = "Option::is_none")]
    pub date_trained: Option<String>,
    /// The date when the NLU domain version was published. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "datePublished", skip_serializing_if = "Option::is_none")]
    pub date_published: Option<String>,
    /// The training status of the NLU domain version.
    #[serde(rename = "trainingStatus", skip_serializing_if = "Option::is_none")]
    pub training_status: Option<TrainingStatus>,
    /// The evaluation status of the NLU domain version.
    #[serde(rename = "evaluationStatus", skip_serializing_if = "Option::is_none")]
    pub evaluation_status: Option<EvaluationStatus>,
    /// The intents defined for this NLU domain version.
    #[serde(rename = "intents", skip_serializing_if = "Option::is_none")]
    pub intents: Option<Vec<crate::models::IntentDefinition>>,
    /// The entity types defined for this NLU domain version.
    #[serde(rename = "entityTypes", skip_serializing_if = "Option::is_none")]
    pub entity_types: Option<Vec<crate::models::NamedEntityTypeDefinition>>,
    /// The entities defined for this NLU domain version.This field is mutually exclusive with entityTypeBindings
    #[serde(rename = "entities", skip_serializing_if = "Option::is_none")]
    pub entities: Option<Vec<crate::models::NamedEntityDefinition>>,
    /// The URI for this object
    #[serde(rename = "selfUri", skip_serializing_if = "Option::is_none")]
    pub self_uri: Option<String>,
}

impl NluDomainVersion {
    pub fn new(language: String) -> NluDomainVersion {
        NluDomainVersion {
            id: None,
            domain: None,
            description: None,
            language,
            published: None,
            date_created: None,
            date_modified: None,
            date_trained: None,
            date_published: None,
            training_status: None,
            evaluation_status: None,
            intents: None,
            entity_types: None,
            entities: None,
            self_uri: None,
        }
    }
}

/// The training status of the NLU domain version.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TrainingStatus {
    #[serde(rename = "Untrained")]
    Untrained,
    #[serde(rename = "Training")]
    Training,
    #[serde(rename = "Trained")]
    Trained,
    #[serde(rename = "Error")]
    Error,
    #[serde(rename = "Unknown")]
    Unknown,
}

impl Default for TrainingStatus {
    fn default() -> TrainingStatus {
        Self::Untrained
    }
}
/// The evaluation status of the NLU domain version.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EvaluationStatus {
    #[serde(rename = "Unevaluated")]
    Unevaluated,
    #[serde(rename = "Evaluating")]
    Evaluating,
    #[serde(rename = "Evaluated")]
    Evaluated,
    #[serde(rename = "Error")]
    Error,
}

impl Default for EvaluationStatus {
    fn default() -> EvaluationStatus {
        Self::Unevaluated
    }
}

