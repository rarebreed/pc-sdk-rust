/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct AnalyticsSession {
    /// ID(s) of Skill(s) that are active on the conversation
    #[serde(rename = "activeSkillIds", skip_serializing_if = "Option::is_none")]
    pub active_skill_ids: Option<Vec<String>>,
    /// Marker for an agent that skipped after call work
    #[serde(rename = "acwSkipped", skip_serializing_if = "Option::is_none")]
    pub acw_skipped: Option<bool>,
    /// The address that initiated an action
    #[serde(rename = "addressFrom", skip_serializing_if = "Option::is_none")]
    pub address_from: Option<String>,
    /// The email address for the participant on the other side of the email conversation
    #[serde(rename = "addressOther", skip_serializing_if = "Option::is_none")]
    pub address_other: Option<String>,
    /// The email address for the participant on this side of the email conversation
    #[serde(rename = "addressSelf", skip_serializing_if = "Option::is_none")]
    pub address_self: Option<String>,
    /// The address receiving an action
    #[serde(rename = "addressTo", skip_serializing_if = "Option::is_none")]
    pub address_to: Option<String>,
    /// Unique identifier of the active virtual agent assistant
    #[serde(rename = "agentAssistantId", skip_serializing_if = "Option::is_none")]
    pub agent_assistant_id: Option<String>,
    /// Bullseye ring of the targeted agent
    #[serde(rename = "agentBullseyeRing", skip_serializing_if = "Option::is_none")]
    pub agent_bullseye_ring: Option<i32>,
    /// Flag indicating an agent-owned callback
    #[serde(rename = "agentOwned", skip_serializing_if = "Option::is_none")]
    pub agent_owned: Option<bool>,
    /// Automatic Number Identification (caller's number)
    #[serde(rename = "ani", skip_serializing_if = "Option::is_none")]
    pub ani: Option<String>,
    /// ID of the user that manually assigned a conversation
    #[serde(rename = "assignerId", skip_serializing_if = "Option::is_none")]
    pub assigner_id: Option<String>,
    /// Flag that indicates that the identity of the customer has been asserted as verified by the provider.
    #[serde(rename = "authenticated", skip_serializing_if = "Option::is_none")]
    pub authenticated: Option<bool>,
    /// Callback phone number(s)
    #[serde(rename = "callbackNumbers", skip_serializing_if = "Option::is_none")]
    pub callback_numbers: Option<Vec<String>>,
    /// Scheduled callback date/time. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "callbackScheduledTime", skip_serializing_if = "Option::is_none")]
    pub callback_scheduled_time: Option<String>,
    /// The name of the user requesting a call back
    #[serde(rename = "callbackUserName", skip_serializing_if = "Option::is_none")]
    pub callback_user_name: Option<String>,
    /// The participantId being coached (if someone (e.g. an agent) is being coached, this would correspond to one of the other participantIds present in the conversation)
    #[serde(rename = "coachedParticipantId", skip_serializing_if = "Option::is_none")]
    pub coached_participant_id: Option<String>,
    /// Describes side of the cobrowse (sharer or viewer)
    #[serde(rename = "cobrowseRole", skip_serializing_if = "Option::is_none")]
    pub cobrowse_role: Option<String>,
    /// A unique identifier for a PureCloud cobrowse room
    #[serde(rename = "cobrowseRoomId", skip_serializing_if = "Option::is_none")]
    pub cobrowse_room_id: Option<String>,
    /// The email or SMS delivery status
    #[serde(rename = "deliveryStatus", skip_serializing_if = "Option::is_none")]
    pub delivery_status: Option<DeliveryStatus>,
    /// Date and time of the most recent delivery status change. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "deliveryStatusChangeDate", skip_serializing_if = "Option::is_none")]
    pub delivery_status_change_date: Option<String>,
    /// Destination address(es) of transfers or consults
    #[serde(rename = "destinationAddresses", skip_serializing_if = "Option::is_none")]
    pub destination_addresses: Option<Vec<String>>,
    /// The direction of the communication
    #[serde(rename = "direction", skip_serializing_if = "Option::is_none")]
    pub direction: Option<Direction>,
    /// (Dialer) Analyzer (for example speech.person)
    #[serde(rename = "dispositionAnalyzer", skip_serializing_if = "Option::is_none")]
    pub disposition_analyzer: Option<String>,
    /// (Dialer) Result of the analysis (for example disposition.classification.callable.machine)
    #[serde(rename = "dispositionName", skip_serializing_if = "Option::is_none")]
    pub disposition_name: Option<String>,
    /// Dialed number identification service (number dialed by the calling party)
    #[serde(rename = "dnis", skip_serializing_if = "Option::is_none")]
    pub dnis: Option<String>,
    /// Unique identifier of the edge device
    #[serde(rename = "edgeId", skip_serializing_if = "Option::is_none")]
    pub edge_id: Option<String>,
    /// Number of eligible agents for each predictive routing attempt
    #[serde(rename = "eligibleAgentCounts", skip_serializing_if = "Option::is_none")]
    pub eligible_agent_counts: Option<Vec<i32>>,
    /// Extended email delivery status
    #[serde(rename = "extendedDeliveryStatus", skip_serializing_if = "Option::is_none")]
    pub extended_delivery_status: Option<String>,
    /// Type of flow in that occurred when entering ACD.
    #[serde(rename = "flowInType", skip_serializing_if = "Option::is_none")]
    pub flow_in_type: Option<String>,
    /// Type of flow out that occurred when emitting tFlowOut.
    #[serde(rename = "flowOutType", skip_serializing_if = "Option::is_none")]
    pub flow_out_type: Option<String>,
    /// Identifier of the journey action.
    #[serde(rename = "journeyActionId", skip_serializing_if = "Option::is_none")]
    pub journey_action_id: Option<String>,
    /// Identifier of the journey action map that triggered the action.
    #[serde(rename = "journeyActionMapId", skip_serializing_if = "Option::is_none")]
    pub journey_action_map_id: Option<String>,
    /// Version of the journey action map that triggered the action.
    #[serde(rename = "journeyActionMapVersion", skip_serializing_if = "Option::is_none")]
    pub journey_action_map_version: Option<i32>,
    /// Primary identifier of the journey customer in the source where the activities originate from.
    #[serde(rename = "journeyCustomerId", skip_serializing_if = "Option::is_none")]
    pub journey_customer_id: Option<String>,
    /// Type of primary identifier of the journey customer (e.g. cookie).
    #[serde(rename = "journeyCustomerIdType", skip_serializing_if = "Option::is_none")]
    pub journey_customer_id_type: Option<String>,
    /// Unique identifier of the journey session.
    #[serde(rename = "journeyCustomerSessionId", skip_serializing_if = "Option::is_none")]
    pub journey_customer_session_id: Option<String>,
    /// Type or category of journey sessions (e.g. web, ticket, delivery, atm).
    #[serde(rename = "journeyCustomerSessionIdType", skip_serializing_if = "Option::is_none")]
    pub journey_customer_session_id_type: Option<String>,
    /// Media bridge ID for the conference session consistent across all participants
    #[serde(rename = "mediaBridgeId", skip_serializing_if = "Option::is_none")]
    pub media_bridge_id: Option<String>,
    /// Count of any media (images, files, etc) included in this session
    #[serde(rename = "mediaCount", skip_serializing_if = "Option::is_none")]
    pub media_count: Option<i32>,
    /// The session media type
    #[serde(rename = "mediaType", skip_serializing_if = "Option::is_none")]
    pub media_type: Option<MediaType>,
    /// Message type for messaging services. E.g.: sms, facebook, twitter, line
    #[serde(rename = "messageType", skip_serializing_if = "Option::is_none")]
    pub message_type: Option<String>,
    /// The participantId being monitored (if someone (e.g. an agent) is being monitored, this would correspond to one of the other participantIds present in the conversation)
    #[serde(rename = "monitoredParticipantId", skip_serializing_if = "Option::is_none")]
    pub monitored_participant_id: Option<String>,
    /// (Dialer) Unique identifier of the outbound campaign
    #[serde(rename = "outboundCampaignId", skip_serializing_if = "Option::is_none")]
    pub outbound_campaign_id: Option<String>,
    /// (Dialer) Unique identifier of the contact
    #[serde(rename = "outboundContactId", skip_serializing_if = "Option::is_none")]
    pub outbound_contact_id: Option<String>,
    /// (Dialer) Unique identifier of the contact list that this contact belongs to
    #[serde(rename = "outboundContactListId", skip_serializing_if = "Option::is_none")]
    pub outbound_contact_list_id: Option<String>,
    /// This identifies pairs of related sessions on a conversation. E.g. an external session’s peerId will be the session that the call originally connected to, e.g. if an IVR was dialed, the IVR session, which will also have the external session’s ID as its peer. After that point, any transfers of that session to other internal components (acd, agent, etc.) will all spawn new sessions whose peerIds point back to that original external session.
    #[serde(rename = "peerId", skip_serializing_if = "Option::is_none")]
    pub peer_id: Option<String>,
    /// The original voice protocol call ID, e.g. a SIP call ID
    #[serde(rename = "protocolCallId", skip_serializing_if = "Option::is_none")]
    pub protocol_call_id: Option<String>,
    /// The source provider for the communication.
    #[serde(rename = "provider", skip_serializing_if = "Option::is_none")]
    pub provider: Option<String>,
    /// Flag determining if an audio recording was started or not
    #[serde(rename = "recording", skip_serializing_if = "Option::is_none")]
    pub recording: Option<bool>,
    /// Name, phone number, or email address of the remote party.
    #[serde(rename = "remote", skip_serializing_if = "Option::is_none")]
    pub remote: Option<String>,
    /// Unique identifier for the remote party
    #[serde(rename = "remoteNameDisplayable", skip_serializing_if = "Option::is_none")]
    pub remote_name_displayable: Option<String>,
    /// ID(s) of Skill(s) that have been removed by bullseye routing
    #[serde(rename = "removedSkillIds", skip_serializing_if = "Option::is_none")]
    pub removed_skill_ids: Option<Vec<String>>,
    /// Routing type(s) for requested/attempted routing methods.
    #[serde(rename = "requestedRoutings", skip_serializing_if = "Option::is_none")]
    pub requested_routings: Option<Vec<RequestedRoutings>>,
    /// Unique identifier for the room
    #[serde(rename = "roomId", skip_serializing_if = "Option::is_none")]
    pub room_id: Option<String>,
    /// Routing ring for bullseye or preferred agent routing
    #[serde(rename = "routingRing", skip_serializing_if = "Option::is_none")]
    pub routing_ring: Option<i32>,
    /// Direct ScreenShare address
    #[serde(rename = "screenShareAddressSelf", skip_serializing_if = "Option::is_none")]
    pub screen_share_address_self: Option<String>,
    /// A unique identifier for a PureCloud ScreenShare room
    #[serde(rename = "screenShareRoomId", skip_serializing_if = "Option::is_none")]
    pub screen_share_room_id: Option<String>,
    /// A unique identifier for a script
    #[serde(rename = "scriptId", skip_serializing_if = "Option::is_none")]
    pub script_id: Option<String>,
    /// Selected agent ID
    #[serde(rename = "selectedAgentId", skip_serializing_if = "Option::is_none")]
    pub selected_agent_id: Option<String>,
    /// Selected agent GPR rank
    #[serde(rename = "selectedAgentRank", skip_serializing_if = "Option::is_none")]
    pub selected_agent_rank: Option<i32>,
    /// Dialed number for the current session; this can be different from dnis, e.g. if the call was transferred
    #[serde(rename = "sessionDnis", skip_serializing_if = "Option::is_none")]
    pub session_dnis: Option<String>,
    /// The unique identifier of this session
    #[serde(rename = "sessionId", skip_serializing_if = "Option::is_none")]
    pub session_id: Option<String>,
    /// Flag determining if screenShare is started or not (true/false)
    #[serde(rename = "sharingScreen", skip_serializing_if = "Option::is_none")]
    pub sharing_screen: Option<bool>,
    /// (Dialer) Whether the agent can skip the dialer contact
    #[serde(rename = "skipEnabled", skip_serializing_if = "Option::is_none")]
    pub skip_enabled: Option<bool>,
    /// The number of seconds before PureCloud begins the call for a call back (0 disables automatic calling)
    #[serde(rename = "timeoutSeconds", skip_serializing_if = "Option::is_none")]
    pub timeout_seconds: Option<i32>,
    /// Complete routing method
    #[serde(rename = "usedRouting", skip_serializing_if = "Option::is_none")]
    pub used_routing: Option<UsedRouting>,
    /// Direct Video address
    #[serde(rename = "videoAddressSelf", skip_serializing_if = "Option::is_none")]
    pub video_address_self: Option<String>,
    /// A unique identifier for a PureCloud video room
    #[serde(rename = "videoRoomId", skip_serializing_if = "Option::is_none")]
    pub video_room_id: Option<String>,
    /// Number of waiting interactions for each predictive routing attempt
    #[serde(rename = "waitingInteractionCounts", skip_serializing_if = "Option::is_none")]
    pub waiting_interaction_counts: Option<Vec<i32>>,
    /// Proposed agents
    #[serde(rename = "proposedAgents", skip_serializing_if = "Option::is_none")]
    pub proposed_agents: Option<Vec<crate::models::AnalyticsProposedAgent>>,
    /// MediaEndpointStats associated with this session
    #[serde(rename = "mediaEndpointStats", skip_serializing_if = "Option::is_none")]
    pub media_endpoint_stats: Option<Vec<crate::models::AnalyticsMediaEndpointStat>>,
    #[serde(rename = "flow", skip_serializing_if = "Option::is_none")]
    pub flow: Option<Box<crate::models::AnalyticsFlow>>,
    /// List of metrics for this session
    #[serde(rename = "metrics", skip_serializing_if = "Option::is_none")]
    pub metrics: Option<Vec<crate::models::AnalyticsSessionMetric>>,
    /// List of segments for this session
    #[serde(rename = "segments", skip_serializing_if = "Option::is_none")]
    pub segments: Option<Vec<crate::models::AnalyticsConversationSegment>>,
}

impl AnalyticsSession {
    pub fn new() -> AnalyticsSession {
        AnalyticsSession {
            active_skill_ids: None,
            acw_skipped: None,
            address_from: None,
            address_other: None,
            address_self: None,
            address_to: None,
            agent_assistant_id: None,
            agent_bullseye_ring: None,
            agent_owned: None,
            ani: None,
            assigner_id: None,
            authenticated: None,
            callback_numbers: None,
            callback_scheduled_time: None,
            callback_user_name: None,
            coached_participant_id: None,
            cobrowse_role: None,
            cobrowse_room_id: None,
            delivery_status: None,
            delivery_status_change_date: None,
            destination_addresses: None,
            direction: None,
            disposition_analyzer: None,
            disposition_name: None,
            dnis: None,
            edge_id: None,
            eligible_agent_counts: None,
            extended_delivery_status: None,
            flow_in_type: None,
            flow_out_type: None,
            journey_action_id: None,
            journey_action_map_id: None,
            journey_action_map_version: None,
            journey_customer_id: None,
            journey_customer_id_type: None,
            journey_customer_session_id: None,
            journey_customer_session_id_type: None,
            media_bridge_id: None,
            media_count: None,
            media_type: None,
            message_type: None,
            monitored_participant_id: None,
            outbound_campaign_id: None,
            outbound_contact_id: None,
            outbound_contact_list_id: None,
            peer_id: None,
            protocol_call_id: None,
            provider: None,
            recording: None,
            remote: None,
            remote_name_displayable: None,
            removed_skill_ids: None,
            requested_routings: None,
            room_id: None,
            routing_ring: None,
            screen_share_address_self: None,
            screen_share_room_id: None,
            script_id: None,
            selected_agent_id: None,
            selected_agent_rank: None,
            session_dnis: None,
            session_id: None,
            sharing_screen: None,
            skip_enabled: None,
            timeout_seconds: None,
            used_routing: None,
            video_address_self: None,
            video_room_id: None,
            waiting_interaction_counts: None,
            proposed_agents: None,
            media_endpoint_stats: None,
            flow: None,
            metrics: None,
            segments: None,
        }
    }
}

/// The email or SMS delivery status
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DeliveryStatus {
    #[serde(rename = "DeliveryFailed")]
    DeliveryFailed,
    #[serde(rename = "DeliverySuccess")]
    DeliverySuccess,
    #[serde(rename = "Failed")]
    Failed,
    #[serde(rename = "Queued")]
    Queued,
    #[serde(rename = "Read")]
    Read,
    #[serde(rename = "Received")]
    Received,
    #[serde(rename = "Sent")]
    Sent,
}

impl Default for DeliveryStatus {
    fn default() -> DeliveryStatus {
        Self::DeliveryFailed
    }
}
/// The direction of the communication
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Direction {
    #[serde(rename = "inbound")]
    Inbound,
    #[serde(rename = "outbound")]
    Outbound,
}

impl Default for Direction {
    fn default() -> Direction {
        Self::Inbound
    }
}
/// The session media type
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MediaType {
    #[serde(rename = "callback")]
    Callback,
    #[serde(rename = "chat")]
    Chat,
    #[serde(rename = "cobrowse")]
    Cobrowse,
    #[serde(rename = "email")]
    Email,
    #[serde(rename = "message")]
    Message,
    #[serde(rename = "screenshare")]
    Screenshare,
    #[serde(rename = "unknown")]
    Unknown,
    #[serde(rename = "video")]
    Video,
    #[serde(rename = "voice")]
    Voice,
}

impl Default for MediaType {
    fn default() -> MediaType {
        Self::Callback
    }
}
/// Routing type(s) for requested/attempted routing methods.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RequestedRoutings {
    #[serde(rename = "Bullseye")]
    Bullseye,
    #[serde(rename = "Last")]
    Last,
    #[serde(rename = "Manual")]
    Manual,
    #[serde(rename = "Predictive")]
    Predictive,
    #[serde(rename = "Preferred")]
    Preferred,
    #[serde(rename = "Standard")]
    Standard,
}

impl Default for RequestedRoutings {
    fn default() -> RequestedRoutings {
        Self::Bullseye
    }
}
/// Complete routing method
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum UsedRouting {
    #[serde(rename = "Bullseye")]
    Bullseye,
    #[serde(rename = "Last")]
    Last,
    #[serde(rename = "Manual")]
    Manual,
    #[serde(rename = "Predictive")]
    Predictive,
    #[serde(rename = "Preferred")]
    Preferred,
    #[serde(rename = "Standard")]
    Standard,
}

impl Default for UsedRouting {
    fn default() -> UsedRouting {
        Self::Bullseye
    }
}

