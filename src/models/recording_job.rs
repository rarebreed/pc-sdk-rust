/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct RecordingJob {
    /// The globally unique identifier for the object.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The current state of the job.
    #[serde(rename = "state")]
    pub state: State,
    #[serde(rename = "recordingJobsQuery", skip_serializing_if = "Option::is_none")]
    pub recording_jobs_query: Option<Box<crate::models::RecordingJobsQuery>>,
    /// Date when the job was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "dateCreated", skip_serializing_if = "Option::is_none")]
    pub date_created: Option<String>,
    /// Total number of conversations affected.
    #[serde(rename = "totalConversations", skip_serializing_if = "Option::is_none")]
    pub total_conversations: Option<i32>,
    /// Total number of recordings affected.
    #[serde(rename = "totalRecordings", skip_serializing_if = "Option::is_none")]
    pub total_recordings: Option<i32>,
    /// Total number of recordings that have been skipped.
    #[serde(rename = "totalSkippedRecordings", skip_serializing_if = "Option::is_none")]
    pub total_skipped_recordings: Option<i32>,
    /// Total number of recordings that the bulk job failed to process.
    #[serde(rename = "totalFailedRecordings", skip_serializing_if = "Option::is_none")]
    pub total_failed_recordings: Option<i32>,
    /// Total number of recordings have been processed.
    #[serde(rename = "totalProcessedRecordings", skip_serializing_if = "Option::is_none")]
    pub total_processed_recordings: Option<i32>,
    /// Progress in percentage based on the number of recordings
    #[serde(rename = "percentProgress", skip_serializing_if = "Option::is_none")]
    pub percent_progress: Option<i32>,
    /// Error occurred during the job execution
    #[serde(rename = "errorMessage", skip_serializing_if = "Option::is_none")]
    pub error_message: Option<String>,
    /// Get IDs of recordings that the bulk job failed for
    #[serde(rename = "failedRecordings", skip_serializing_if = "Option::is_none")]
    pub failed_recordings: Option<String>,
    /// The URI for this object
    #[serde(rename = "selfUri", skip_serializing_if = "Option::is_none")]
    pub self_uri: Option<String>,
    #[serde(rename = "user", skip_serializing_if = "Option::is_none")]
    pub user: Option<Box<crate::models::AddressableEntityRef>>,
}

impl RecordingJob {
    pub fn new(state: State) -> RecordingJob {
        RecordingJob {
            id: None,
            state,
            recording_jobs_query: None,
            date_created: None,
            total_conversations: None,
            total_recordings: None,
            total_skipped_recordings: None,
            total_failed_recordings: None,
            total_processed_recordings: None,
            percent_progress: None,
            error_message: None,
            failed_recordings: None,
            self_uri: None,
            user: None,
        }
    }
}

/// The current state of the job.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "FULFILLED")]
    FULFILLED,
    #[serde(rename = "PENDING")]
    PENDING,
    #[serde(rename = "READY")]
    READY,
    #[serde(rename = "PROCESSING")]
    PROCESSING,
    #[serde(rename = "CANCELLED")]
    CANCELLED,
    #[serde(rename = "FAILED")]
    FAILED,
}

impl Default for State {
    fn default() -> State {
        Self::FULFILLED
    }
}

