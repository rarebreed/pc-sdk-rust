/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Greeting {
    /// The globally unique identifier for the object.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Greeting type
    #[serde(rename = "type")]
    pub _type: Type,
    /// Greeting owner type
    #[serde(rename = "ownerType")]
    pub owner_type: OwnerType,
    #[serde(rename = "owner")]
    pub owner: Box<crate::models::DomainEntity>,
    #[serde(rename = "audioFile", skip_serializing_if = "Option::is_none")]
    pub audio_file: Option<Box<crate::models::GreetingAudioFile>>,
    #[serde(rename = "audioTTS", skip_serializing_if = "Option::is_none")]
    pub audio_tts: Option<String>,
    /// Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "createdDate", skip_serializing_if = "Option::is_none")]
    pub created_date: Option<String>,
    #[serde(rename = "createdBy", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<String>,
    /// Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "modifiedDate", skip_serializing_if = "Option::is_none")]
    pub modified_date: Option<String>,
    #[serde(rename = "modifiedBy", skip_serializing_if = "Option::is_none")]
    pub modified_by: Option<String>,
    /// The URI for this object
    #[serde(rename = "selfUri", skip_serializing_if = "Option::is_none")]
    pub self_uri: Option<String>,
}

impl Greeting {
    pub fn new(_type: Type, owner_type: OwnerType, owner: crate::models::DomainEntity) -> Greeting {
        Greeting {
            id: None,
            name: None,
            _type,
            owner_type,
            owner: Box::new(owner),
            audio_file: None,
            audio_tts: None,
            created_date: None,
            created_by: None,
            modified_date: None,
            modified_by: None,
            self_uri: None,
        }
    }
}

/// Greeting type
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "STATION")]
    STATION,
    #[serde(rename = "VOICEMAIL")]
    VOICEMAIL,
    #[serde(rename = "NAME")]
    NAME,
}

impl Default for Type {
    fn default() -> Type {
        Self::STATION
    }
}
/// Greeting owner type
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OwnerType {
    #[serde(rename = "USER")]
    USER,
    #[serde(rename = "ORGANIZATION")]
    ORGANIZATION,
    #[serde(rename = "GROUP")]
    GROUP,
}

impl Default for OwnerType {
    fn default() -> OwnerType {
        Self::USER
    }
}

