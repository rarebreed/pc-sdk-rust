/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Miner {
    /// The globally unique identifier for the object.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Chat Corpus Name.
    #[serde(rename = "name")]
    pub name: String,
    /// Language Localization code.
    #[serde(rename = "language", skip_serializing_if = "Option::is_none")]
    pub language: Option<Language>,
    /// Date when the miner was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "dateCreated", skip_serializing_if = "Option::is_none")]
    pub date_created: Option<String>,
    /// Status of the miner.
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    /// Date from which the conversations need to be taken for mining. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
    #[serde(rename = "conversationsDateRangeStart", skip_serializing_if = "Option::is_none")]
    pub conversations_date_range_start: Option<String>,
    /// Date till which the conversations need to be taken for mining. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
    #[serde(rename = "conversationsDateRangeEnd", skip_serializing_if = "Option::is_none")]
    pub conversations_date_range_end: Option<String>,
    /// Date when the mining process was completed. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "dateCompleted", skip_serializing_if = "Option::is_none")]
    pub date_completed: Option<String>,
    /// Mining message if present.
    #[serde(rename = "message", skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// Flag to indicate whether data file to be mined was uploaded.
    #[serde(rename = "conversationDataUploaded", skip_serializing_if = "Option::is_none")]
    pub conversation_data_uploaded: Option<bool>,
    /// Media type for filtering conversations.
    #[serde(rename = "mediaType", skip_serializing_if = "Option::is_none")]
    pub media_type: Option<MediaType>,
    /// List of queue IDs for filtering conversations.
    #[serde(rename = "queueIds", skip_serializing_if = "Option::is_none")]
    pub queue_ids: Option<Vec<String>>,
    /// Date when the miner started execution. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "dateTriggered", skip_serializing_if = "Option::is_none")]
    pub date_triggered: Option<String>,
    /// Date when the miner was last modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "dateModified", skip_serializing_if = "Option::is_none")]
    pub date_modified: Option<String>,
    #[serde(rename = "latestDraftVersion", skip_serializing_if = "Option::is_none")]
    pub latest_draft_version: Option<Box<crate::models::Draft>>,
    /// The URI for this object
    #[serde(rename = "selfUri", skip_serializing_if = "Option::is_none")]
    pub self_uri: Option<String>,
}

impl Miner {
    pub fn new(name: String) -> Miner {
        Miner {
            id: None,
            name,
            language: None,
            date_created: None,
            status: None,
            conversations_date_range_start: None,
            conversations_date_range_end: None,
            date_completed: None,
            message: None,
            conversation_data_uploaded: None,
            media_type: None,
            queue_ids: None,
            date_triggered: None,
            date_modified: None,
            latest_draft_version: None,
            self_uri: None,
        }
    }
}

/// Language Localization code.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Language {
    #[serde(rename = "en-us")]
    EnUs,
    #[serde(rename = "en-gb")]
    EnGb,
    #[serde(rename = "en-au")]
    EnAu,
    #[serde(rename = "en-in")]
    EnIn,
    #[serde(rename = "en-za")]
    EnZa,
    #[serde(rename = "es-us")]
    EsUs,
    #[serde(rename = "es-es")]
    EsEs,
}

impl Default for Language {
    fn default() -> Language {
        Self::EnUs
    }
}
/// Status of the miner.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "NotStarted")]
    NotStarted,
    #[serde(rename = "FetchingConversationIds")]
    FetchingConversationIds,
    #[serde(rename = "ConversationIdsFetched")]
    ConversationIdsFetched,
    #[serde(rename = "ConversationIdsFetchError")]
    ConversationIdsFetchError,
    #[serde(rename = "FetchingConversations")]
    FetchingConversations,
    #[serde(rename = "ConversationsFetched")]
    ConversationsFetched,
    #[serde(rename = "ConversationsFetchError")]
    ConversationsFetchError,
    #[serde(rename = "Queued")]
    Queued,
    #[serde(rename = "QueuingError")]
    QueuingError,
    #[serde(rename = "MiningStarted")]
    MiningStarted,
    #[serde(rename = "MaskingUtterances")]
    MaskingUtterances,
    #[serde(rename = "MaskingError")]
    MaskingError,
    #[serde(rename = "ComputingAnalytics")]
    ComputingAnalytics,
    #[serde(rename = "ComputingAnalyticsError")]
    ComputingAnalyticsError,
    #[serde(rename = "MiningCompleted")]
    MiningCompleted,
    #[serde(rename = "MiningError")]
    MiningError,
    #[serde(rename = "ModelValidationError")]
    ModelValidationError,
    #[serde(rename = "Deleted")]
    Deleted,
}

impl Default for Status {
    fn default() -> Status {
        Self::NotStarted
    }
}
/// Media type for filtering conversations.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MediaType {
    #[serde(rename = "Chat")]
    Chat,
    #[serde(rename = "Call")]
    Call,
    #[serde(rename = "Message")]
    Message,
}

impl Default for MediaType {
    fn default() -> MediaType {
        Self::Chat
    }
}

