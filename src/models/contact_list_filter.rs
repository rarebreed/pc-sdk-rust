/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ContactListFilter {
    /// The globally unique identifier for the object.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The name of the list.
    #[serde(rename = "name")]
    pub name: String,
    /// Creation time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "dateCreated", skip_serializing_if = "Option::is_none")]
    pub date_created: Option<String>,
    /// Last modified time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "dateModified", skip_serializing_if = "Option::is_none")]
    pub date_modified: Option<String>,
    /// Required for updates, must match the version number of the most recent update
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<i32>,
    #[serde(rename = "contactList")]
    pub contact_list: Box<crate::models::DomainEntityRef>,
    /// Groups of conditions to filter the contacts by.
    #[serde(rename = "clauses", skip_serializing_if = "Option::is_none")]
    pub clauses: Option<Vec<crate::models::ContactListFilterClause>>,
    /// How to join clauses together.
    #[serde(rename = "filterType", skip_serializing_if = "Option::is_none")]
    pub filter_type: Option<FilterType>,
    /// The URI for this object
    #[serde(rename = "selfUri", skip_serializing_if = "Option::is_none")]
    pub self_uri: Option<String>,
}

impl ContactListFilter {
    pub fn new(name: String, contact_list: crate::models::DomainEntityRef) -> ContactListFilter {
        ContactListFilter {
            id: None,
            name,
            date_created: None,
            date_modified: None,
            version: None,
            contact_list: Box::new(contact_list),
            clauses: None,
            filter_type: None,
            self_uri: None,
        }
    }
}

/// How to join clauses together.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FilterType {
    #[serde(rename = "AND")]
    AND,
    #[serde(rename = "OR")]
    OR,
}

impl Default for FilterType {
    fn default() -> FilterType {
        Self::AND
    }
}

