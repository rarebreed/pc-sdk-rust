/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct AddShiftTradeRequest {
    /// The ID of the schedule to which the initiating and receiving shifts belong
    #[serde(rename = "scheduleId")]
    pub schedule_id: String,
    /// The ID of the shift that the initiating user wants to give up
    #[serde(rename = "initiatingShiftId")]
    pub initiating_shift_id: String,
    /// The ID of the user to whom to send the request (for use in direct trade requests)
    #[serde(rename = "receivingUserId", skip_serializing_if = "Option::is_none")]
    pub receiving_user_id: Option<String>,
    /// When this shift trade request should expire. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "expiration", skip_serializing_if = "Option::is_none")]
    pub expiration: Option<String>,
    #[serde(rename = "acceptableIntervals", skip_serializing_if = "Option::is_none")]
    pub acceptable_intervals: Option<Vec<String>>,
}

impl AddShiftTradeRequest {
    pub fn new(schedule_id: String, initiating_shift_id: String) -> AddShiftTradeRequest {
        AddShiftTradeRequest {
            schedule_id,
            initiating_shift_id,
            receiving_user_id: None,
            expiration: None,
            acceptable_intervals: None,
        }
    }
}


