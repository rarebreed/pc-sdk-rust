/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct WfmUserNotification {
    /// The immutable globally unique identifier for the object.
    #[serde(rename = "id")]
    pub id: String,
    /// The group ID of the notification (mutable, may change  on update)
    #[serde(rename = "mutableGroupId")]
    pub mutable_group_id: String,
    /// The timestamp for this notification. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "timestamp", skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<String>,
    /// The type of this notification
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<Type>,
    #[serde(rename = "shiftTrade", skip_serializing_if = "Option::is_none")]
    pub shift_trade: Option<Box<crate::models::ShiftTradeNotification>>,
    #[serde(rename = "timeOffRequest", skip_serializing_if = "Option::is_none")]
    pub time_off_request: Option<Box<crate::models::TimeOffRequestNotification>>,
    /// Whether this notification has been marked \"read\"
    #[serde(rename = "markedAsRead")]
    pub marked_as_read: bool,
    /// Whether this notification is for an agent
    #[serde(rename = "agentNotification", skip_serializing_if = "Option::is_none")]
    pub agent_notification: Option<bool>,
    /// Other notification IDs in group.  This field is only populated in real-time notifications
    #[serde(rename = "otherNotificationIdsInGroup", skip_serializing_if = "Option::is_none")]
    pub other_notification_ids_in_group: Option<Vec<String>>,
}

impl WfmUserNotification {
    pub fn new(id: String, mutable_group_id: String, marked_as_read: bool) -> WfmUserNotification {
        WfmUserNotification {
            id,
            mutable_group_id,
            timestamp: None,
            _type: None,
            shift_trade: None,
            time_off_request: None,
            marked_as_read,
            agent_notification: None,
            other_notification_ids_in_group: None,
        }
    }
}

/// The type of this notification
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "ShiftTrade")]
    ShiftTrade,
    #[serde(rename = "TimeOffRequest")]
    TimeOffRequest,
}

impl Default for Type {
    fn default() -> Type {
        Self::ShiftTrade
    }
}

