/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */

/// ScheduleGenerationWarning : Schedule generation warning



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ScheduleGenerationWarning {
    /// ID of the user in the warning
    #[serde(rename = "userId", skip_serializing_if = "Option::is_none")]
    pub user_id: Option<String>,
    /// Whether the user does not have the appropriate license to be scheduled
    #[serde(rename = "userNotLicensed", skip_serializing_if = "Option::is_none")]
    pub user_not_licensed: Option<bool>,
    /// Whether the number of scheduled days exceeded the maximum days to schedule defined in the agent work plan
    #[serde(rename = "unableToMeetMaxDays", skip_serializing_if = "Option::is_none")]
    pub unable_to_meet_max_days: Option<bool>,
    /// Days indicated as required to work in agent work plan where no viable shift was found to schedule
    #[serde(rename = "unableToScheduleRequiredDays", skip_serializing_if = "Option::is_none")]
    pub unable_to_schedule_required_days: Option<std::collections::HashSet<UnableToScheduleRequiredDays>>,
    /// Whether the schedule did not meet the minimum paid time for the week defined in the agent work plan
    #[serde(rename = "unableToMeetMinPaidForTheWeek", skip_serializing_if = "Option::is_none")]
    pub unable_to_meet_min_paid_for_the_week: Option<bool>,
    /// Whether the schedule exceeded the maximum paid time for the week defined in the agent work plan
    #[serde(rename = "unableToMeetMaxPaidForTheWeek", skip_serializing_if = "Option::is_none")]
    pub unable_to_meet_max_paid_for_the_week: Option<bool>,
    /// Days agent was scheduled but there was no need to meet. The scheduled days have no effect on service levels
    #[serde(rename = "noNeedDays", skip_serializing_if = "Option::is_none")]
    pub no_need_days: Option<std::collections::HashSet<NoNeedDays>>,
    /// Whether the schedule did not meet the minimum time between shifts defined in the agent work plan
    #[serde(rename = "shiftsTooCloseTogether", skip_serializing_if = "Option::is_none")]
    pub shifts_too_close_together: Option<bool>,
}

impl ScheduleGenerationWarning {
    /// Schedule generation warning
    pub fn new() -> ScheduleGenerationWarning {
        ScheduleGenerationWarning {
            user_id: None,
            user_not_licensed: None,
            unable_to_meet_max_days: None,
            unable_to_schedule_required_days: None,
            unable_to_meet_min_paid_for_the_week: None,
            unable_to_meet_max_paid_for_the_week: None,
            no_need_days: None,
            shifts_too_close_together: None,
        }
    }
}

/// Days indicated as required to work in agent work plan where no viable shift was found to schedule
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum UnableToScheduleRequiredDays {
    #[serde(rename = "Sunday")]
    Sunday,
    #[serde(rename = "Monday")]
    Monday,
    #[serde(rename = "Tuesday")]
    Tuesday,
    #[serde(rename = "Wednesday")]
    Wednesday,
    #[serde(rename = "Thursday")]
    Thursday,
    #[serde(rename = "Friday")]
    Friday,
    #[serde(rename = "Saturday")]
    Saturday,
}

impl Default for UnableToScheduleRequiredDays {
    fn default() -> UnableToScheduleRequiredDays {
        Self::Sunday
    }
}
/// Days agent was scheduled but there was no need to meet. The scheduled days have no effect on service levels
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum NoNeedDays {
    #[serde(rename = "Sunday")]
    Sunday,
    #[serde(rename = "Monday")]
    Monday,
    #[serde(rename = "Tuesday")]
    Tuesday,
    #[serde(rename = "Wednesday")]
    Wednesday,
    #[serde(rename = "Thursday")]
    Thursday,
    #[serde(rename = "Friday")]
    Friday,
    #[serde(rename = "Saturday")]
    Saturday,
}

impl Default for NoNeedDays {
    fn default() -> NoNeedDays {
        Self::Sunday
    }
}

