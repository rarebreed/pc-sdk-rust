/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct CreateShareRequest {
    /// The share entity type
    #[serde(rename = "sharedEntityType")]
    pub shared_entity_type: SharedEntityType,
    #[serde(rename = "sharedEntity")]
    pub shared_entity: Box<crate::models::SharedEntity>,
    #[serde(rename = "memberType", skip_serializing_if = "Option::is_none")]
    pub member_type: Option<MemberType>,
    #[serde(rename = "member", skip_serializing_if = "Option::is_none")]
    pub member: Option<Box<crate::models::SharedEntity>>,
    #[serde(rename = "members", skip_serializing_if = "Option::is_none")]
    pub members: Option<Vec<crate::models::CreateShareRequestMember>>,
}

impl CreateShareRequest {
    pub fn new(shared_entity_type: SharedEntityType, shared_entity: crate::models::SharedEntity) -> CreateShareRequest {
        CreateShareRequest {
            shared_entity_type,
            shared_entity: Box::new(shared_entity),
            member_type: None,
            member: None,
            members: None,
        }
    }
}

/// The share entity type
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SharedEntityType {
    #[serde(rename = "DOCUMENT")]
    DOCUMENT,
}

impl Default for SharedEntityType {
    fn default() -> SharedEntityType {
        Self::DOCUMENT
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MemberType {
    #[serde(rename = "USER")]
    USER,
    #[serde(rename = "GROUP")]
    GROUP,
    #[serde(rename = "PUBLIC")]
    PUBLIC,
}

impl Default for MemberType {
    fn default() -> MemberType {
        Self::USER
    }
}

