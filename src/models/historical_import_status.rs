/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct HistoricalImportStatus {
    /// Request id of the historical import in the organization
    #[serde(rename = "requestId", skip_serializing_if = "Option::is_none")]
    pub request_id: Option<String>,
    /// The last day of the data you are importing. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "dateImportEnded", skip_serializing_if = "Option::is_none")]
    pub date_import_ended: Option<String>,
    /// The first day of the data you are importing. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "dateImportStarted", skip_serializing_if = "Option::is_none")]
    pub date_import_started: Option<String>,
    /// Status of the historical import in the organization.
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    /// Error occured if the status of the import is failed
    #[serde(rename = "error", skip_serializing_if = "Option::is_none")]
    pub error: Option<String>,
    /// Date in which the historical import is initiated. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "dateCreated", skip_serializing_if = "Option::is_none")]
    pub date_created: Option<String>,
    /// Date in which the historical import is modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "dateModified", skip_serializing_if = "Option::is_none")]
    pub date_modified: Option<String>,
    /// Whether this historical import is active or not
    #[serde(rename = "active", skip_serializing_if = "Option::is_none")]
    pub active: Option<bool>,
    /// Whether this historical import is of type csv or json
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<Type>,
}

impl HistoricalImportStatus {
    pub fn new() -> HistoricalImportStatus {
        HistoricalImportStatus {
            request_id: None,
            date_import_ended: None,
            date_import_started: None,
            status: None,
            error: None,
            date_created: None,
            date_modified: None,
            active: None,
            _type: None,
        }
    }
}

/// Status of the historical import in the organization.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "Initiated")]
    Initiated,
    #[serde(rename = "InProgress")]
    InProgress,
    #[serde(rename = "Pending")]
    Pending,
    #[serde(rename = "Success")]
    Success,
    #[serde(rename = "Failed")]
    Failed,
    #[serde(rename = "Cancelled")]
    Cancelled,
    #[serde(rename = "Purged")]
    Purged,
    #[serde(rename = "PurgePending")]
    PurgePending,
}

impl Default for Status {
    fn default() -> Status {
        Self::Initiated
    }
}
/// Whether this historical import is of type csv or json
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "Csv")]
    Csv,
    #[serde(rename = "Json")]
    Json,
}

impl Default for Type {
    fn default() -> Type {
        Self::Csv
    }
}

