/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */

/// WebChatGuestMediaRequest : Object representing the guest model of a media request of a chat conversation.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct WebChatGuestMediaRequest {
    /// The globally unique identifier for the object.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The types of media being requested.
    #[serde(rename = "types")]
    pub types: Vec<Types>,
    /// The state of the media request, one of PENDING|ACCEPTED|DECLINED|TIMEDOUT|CANCELLED|ERRORED.
    #[serde(rename = "state")]
    pub state: State,
    /// The ID of the new media communication, if applicable.
    #[serde(rename = "communicationId", skip_serializing_if = "Option::is_none")]
    pub communication_id: Option<String>,
    /// The security information related to a media request.
    #[serde(rename = "securityKey", skip_serializing_if = "Option::is_none")]
    pub security_key: Option<String>,
    /// The URI for this object
    #[serde(rename = "selfUri", skip_serializing_if = "Option::is_none")]
    pub self_uri: Option<String>,
}

impl WebChatGuestMediaRequest {
    /// Object representing the guest model of a media request of a chat conversation.
    pub fn new(types: Vec<Types>, state: State) -> WebChatGuestMediaRequest {
        WebChatGuestMediaRequest {
            id: None,
            name: None,
            types,
            state,
            communication_id: None,
            security_key: None,
            self_uri: None,
        }
    }
}

/// The types of media being requested.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Types {
    #[serde(rename = "COBROWSE")]
    COBROWSE,
    #[serde(rename = "SCREENSHARE")]
    SCREENSHARE,
}

impl Default for Types {
    fn default() -> Types {
        Self::COBROWSE
    }
}
/// The state of the media request, one of PENDING|ACCEPTED|DECLINED|TIMEDOUT|CANCELLED|ERRORED.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "PENDING")]
    PENDING,
    #[serde(rename = "ACCEPTED")]
    ACCEPTED,
    #[serde(rename = "DECLINED")]
    DECLINED,
    #[serde(rename = "TIMEDOUT")]
    TIMEDOUT,
    #[serde(rename = "CANCELLED")]
    CANCELLED,
    #[serde(rename = "ERRORED")]
    ERRORED,
}

impl Default for State {
    fn default() -> State {
        Self::PENDING
    }
}

