/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct TrustUser {
    /// The globally unique identifier for the object.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "division", skip_serializing_if = "Option::is_none")]
    pub division: Option<Box<crate::models::Division>>,
    #[serde(rename = "chat", skip_serializing_if = "Option::is_none")]
    pub chat: Option<Box<crate::models::Chat>>,
    #[serde(rename = "department", skip_serializing_if = "Option::is_none")]
    pub department: Option<String>,
    #[serde(rename = "email", skip_serializing_if = "Option::is_none")]
    pub email: Option<String>,
    /// Auto populated from addresses.
    #[serde(rename = "primaryContactInfo", skip_serializing_if = "Option::is_none")]
    pub primary_contact_info: Option<Vec<crate::models::Contact>>,
    /// Email addresses and phone numbers for this user
    #[serde(rename = "addresses", skip_serializing_if = "Option::is_none")]
    pub addresses: Option<Vec<crate::models::Contact>>,
    /// The current state for this user.
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<State>,
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(rename = "username", skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
    #[serde(rename = "manager", skip_serializing_if = "Option::is_none")]
    pub manager: Option<Box<crate::models::User>>,
    #[serde(rename = "images", skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<crate::models::UserImage>>,
    /// Required when updating a user, this value should be the current version of the user.  The current version can be obtained with a GET on the user before doing a PATCH.
    #[serde(rename = "version")]
    pub version: i32,
    #[serde(rename = "certifications", skip_serializing_if = "Option::is_none")]
    pub certifications: Option<Vec<String>>,
    #[serde(rename = "biography", skip_serializing_if = "Option::is_none")]
    pub biography: Option<Box<crate::models::Biography>>,
    #[serde(rename = "employerInfo", skip_serializing_if = "Option::is_none")]
    pub employer_info: Option<Box<crate::models::EmployerInfo>>,
    #[serde(rename = "routingStatus", skip_serializing_if = "Option::is_none")]
    pub routing_status: Option<Box<crate::models::RoutingStatus>>,
    #[serde(rename = "presence", skip_serializing_if = "Option::is_none")]
    pub presence: Option<Box<crate::models::UserPresence>>,
    #[serde(rename = "integrationPresence", skip_serializing_if = "Option::is_none")]
    pub integration_presence: Option<Box<crate::models::UserPresence>>,
    #[serde(rename = "conversationSummary", skip_serializing_if = "Option::is_none")]
    pub conversation_summary: Option<Box<crate::models::UserConversationSummary>>,
    #[serde(rename = "outOfOffice", skip_serializing_if = "Option::is_none")]
    pub out_of_office: Option<Box<crate::models::OutOfOffice>>,
    #[serde(rename = "geolocation", skip_serializing_if = "Option::is_none")]
    pub geolocation: Option<Box<crate::models::Geolocation>>,
    #[serde(rename = "station", skip_serializing_if = "Option::is_none")]
    pub station: Option<Box<crate::models::UserStations>>,
    #[serde(rename = "authorization", skip_serializing_if = "Option::is_none")]
    pub authorization: Option<Box<crate::models::UserAuthorization>>,
    /// Profile skills possessed by the user
    #[serde(rename = "profileSkills", skip_serializing_if = "Option::is_none")]
    pub profile_skills: Option<Vec<String>>,
    /// The user placement at each site location.
    #[serde(rename = "locations", skip_serializing_if = "Option::is_none")]
    pub locations: Option<Vec<crate::models::Location>>,
    /// The groups the user is a member of
    #[serde(rename = "groups", skip_serializing_if = "Option::is_none")]
    pub groups: Option<Vec<crate::models::Group>>,
    #[serde(rename = "team", skip_serializing_if = "Option::is_none")]
    pub team: Option<Box<crate::models::Team>>,
    /// Routing (ACD) skills possessed by the user
    #[serde(rename = "skills", skip_serializing_if = "Option::is_none")]
    pub skills: Option<Vec<crate::models::UserRoutingSkill>>,
    /// Routing (ACD) languages possessed by the user
    #[serde(rename = "languages", skip_serializing_if = "Option::is_none")]
    pub languages: Option<Vec<crate::models::UserRoutingLanguage>>,
    /// acd auto answer
    #[serde(rename = "acdAutoAnswer", skip_serializing_if = "Option::is_none")]
    pub acd_auto_answer: Option<bool>,
    /// preferred language by the user
    #[serde(rename = "languagePreference", skip_serializing_if = "Option::is_none")]
    pub language_preference: Option<String>,
    #[serde(rename = "lastTokenIssued", skip_serializing_if = "Option::is_none")]
    pub last_token_issued: Option<Box<crate::models::OAuthLastTokenIssued>>,
    /// The last time the user logged in using username and password. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "dateLastLogin", skip_serializing_if = "Option::is_none")]
    pub date_last_login: Option<String>,
    #[serde(rename = "trustUserDetails", skip_serializing_if = "Option::is_none")]
    pub trust_user_details: Option<Box<crate::models::TrustUserDetails>>,
}

impl TrustUser {
    pub fn new(version: i32) -> TrustUser {
        TrustUser {
            id: None,
            name: None,
            division: None,
            chat: None,
            department: None,
            email: None,
            primary_contact_info: None,
            addresses: None,
            state: None,
            title: None,
            username: None,
            manager: None,
            images: None,
            version,
            certifications: None,
            biography: None,
            employer_info: None,
            routing_status: None,
            presence: None,
            integration_presence: None,
            conversation_summary: None,
            out_of_office: None,
            geolocation: None,
            station: None,
            authorization: None,
            profile_skills: None,
            locations: None,
            groups: None,
            team: None,
            skills: None,
            languages: None,
            acd_auto_answer: None,
            language_preference: None,
            last_token_issued: None,
            date_last_login: None,
            trust_user_details: None,
        }
    }
}

/// The current state for this user.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "active")]
    Active,
    #[serde(rename = "inactive")]
    Inactive,
    #[serde(rename = "deleted")]
    Deleted,
}

impl Default for State {
    fn default() -> State {
        Self::Active
    }
}

