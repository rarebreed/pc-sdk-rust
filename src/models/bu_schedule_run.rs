/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct BuScheduleRun {
    /// The globally unique identifier for the object.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The scheduler run ID.  Reference this value for support
    #[serde(rename = "schedulerRunId", skip_serializing_if = "Option::is_none")]
    pub scheduler_run_id: Option<String>,
    /// Whether this is an intraday rescheduling run
    #[serde(rename = "intradayRescheduling", skip_serializing_if = "Option::is_none")]
    pub intraday_rescheduling: Option<bool>,
    /// The state of the generation run
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<State>,
    /// The number of weeks spanned by the schedule
    #[serde(rename = "weekCount", skip_serializing_if = "Option::is_none")]
    pub week_count: Option<i32>,
    /// Percent completion of the schedule run
    #[serde(rename = "percentComplete", skip_serializing_if = "Option::is_none")]
    pub percent_complete: Option<f64>,
    /// The start date of the target week. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
    #[serde(rename = "targetWeek", skip_serializing_if = "Option::is_none")]
    pub target_week: Option<String>,
    #[serde(rename = "schedule", skip_serializing_if = "Option::is_none")]
    pub schedule: Option<Box<crate::models::BuScheduleReference>>,
    /// The description of the generated schedule
    #[serde(rename = "scheduleDescription", skip_serializing_if = "Option::is_none")]
    pub schedule_description: Option<String>,
    /// When the schedule generation run started. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "schedulingStartTime", skip_serializing_if = "Option::is_none")]
    pub scheduling_start_time: Option<String>,
    #[serde(rename = "schedulingStartedBy", skip_serializing_if = "Option::is_none")]
    pub scheduling_started_by: Option<Box<crate::models::UserReference>>,
    #[serde(rename = "schedulingCanceledBy", skip_serializing_if = "Option::is_none")]
    pub scheduling_canceled_by: Option<Box<crate::models::UserReference>>,
    /// When the scheduling run was completed, if applicable. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "schedulingCompletedTime", skip_serializing_if = "Option::is_none")]
    pub scheduling_completed_time: Option<String>,
    /// The number of schedule generation messages for this schedule generation run
    #[serde(rename = "messageCount", skip_serializing_if = "Option::is_none")]
    pub message_count: Option<i32>,
    /// The list of schedule generation message counts by severity for this schedule generation run
    #[serde(rename = "messageSeverityCounts", skip_serializing_if = "Option::is_none")]
    pub message_severity_counts: Option<Vec<crate::models::SchedulerMessageSeverityCount>>,
    #[serde(rename = "reschedulingOptions", skip_serializing_if = "Option::is_none")]
    pub rescheduling_options: Option<Box<crate::models::ReschedulingOptionsRunResponse>>,
    /// When the reschedule result will expire.  Null unless intradayRescheduling is true. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "reschedulingResultExpiration", skip_serializing_if = "Option::is_none")]
    pub rescheduling_result_expiration: Option<String>,
    /// The URI for this object
    #[serde(rename = "selfUri", skip_serializing_if = "Option::is_none")]
    pub self_uri: Option<String>,
}

impl BuScheduleRun {
    pub fn new() -> BuScheduleRun {
        BuScheduleRun {
            id: None,
            scheduler_run_id: None,
            intraday_rescheduling: None,
            state: None,
            week_count: None,
            percent_complete: None,
            target_week: None,
            schedule: None,
            schedule_description: None,
            scheduling_start_time: None,
            scheduling_started_by: None,
            scheduling_canceled_by: None,
            scheduling_completed_time: None,
            message_count: None,
            message_severity_counts: None,
            rescheduling_options: None,
            rescheduling_result_expiration: None,
            self_uri: None,
        }
    }
}

/// The state of the generation run
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "None")]
    None,
    #[serde(rename = "Queued")]
    Queued,
    #[serde(rename = "Scheduling")]
    Scheduling,
    #[serde(rename = "Canceled")]
    Canceled,
    #[serde(rename = "Failed")]
    Failed,
    #[serde(rename = "Complete")]
    Complete,
}

impl Default for State {
    fn default() -> State {
        Self::None
    }
}

