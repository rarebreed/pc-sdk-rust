/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct SendAgentlessOutboundMessageRequest {
    /// The messaging address of the sender of the message. For an SMS messenger type, this must be a currently provisioned SMS phone number. For a WhatsApp messenger type use the provisioned WhatsApp integrationâ€™s ID
    #[serde(rename = "fromAddress")]
    pub from_address: String,
    /// The messaging address of the recipient of the message. For an SMS messenger type, the phone number address must be in E.164 format. E.g. +13175555555 or +34234234234.
    #[serde(rename = "toAddress")]
    pub to_address: String,
    /// The recipient messaging address messenger type. Currently SMS and Open are the only supported types. WhatsApp will be supported in a future release
    #[serde(rename = "toAddressMessengerType")]
    pub to_address_messenger_type: ToAddressMessengerType,
    /// The text of the message to send. This field is required in the case of SMS messenger type. Maximum character counts are: SMS - 765 characters, other channels - 2000 characters.
    #[serde(rename = "textBody", skip_serializing_if = "Option::is_none")]
    pub text_body: Option<String>,
    #[serde(rename = "messagingTemplate", skip_serializing_if = "Option::is_none")]
    pub messaging_template: Option<Box<crate::models::MessagingTemplateRequest>>,
    /// Use an existing active conversation to send the agentless outbound message. Set this parameter to 'true' to use active conversation. Default value: false
    #[serde(rename = "useExistingActiveConversation", skip_serializing_if = "Option::is_none")]
    pub use_existing_active_conversation: Option<bool>,
}

impl SendAgentlessOutboundMessageRequest {
    pub fn new(from_address: String, to_address: String, to_address_messenger_type: ToAddressMessengerType) -> SendAgentlessOutboundMessageRequest {
        SendAgentlessOutboundMessageRequest {
            from_address,
            to_address,
            to_address_messenger_type,
            text_body: None,
            messaging_template: None,
            use_existing_active_conversation: None,
        }
    }
}

/// The recipient messaging address messenger type. Currently SMS and Open are the only supported types. WhatsApp will be supported in a future release
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ToAddressMessengerType {
    #[serde(rename = "sms")]
    Sms,
    #[serde(rename = "facebook")]
    Facebook,
    #[serde(rename = "twitter")]
    Twitter,
    #[serde(rename = "line")]
    Line,
    #[serde(rename = "whatsapp")]
    Whatsapp,
    #[serde(rename = "webmessaging")]
    Webmessaging,
    #[serde(rename = "instagram")]
    Instagram,
    #[serde(rename = "open")]
    Open,
}

impl Default for ToAddressMessengerType {
    fn default() -> ToAddressMessengerType {
        Self::Sms
    }
}

