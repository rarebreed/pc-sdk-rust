/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ObservationValue {
    /// The time at which the observation occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "observationDate")]
    pub observation_date: String,
    /// Unique identifier for the conversation
    #[serde(rename = "conversationId", skip_serializing_if = "Option::is_none")]
    pub conversation_id: Option<String>,
    /// The unique identifier of this session
    #[serde(rename = "sessionId", skip_serializing_if = "Option::is_none")]
    pub session_id: Option<String>,
    /// Unique identifier for a skill requested for an interaction
    #[serde(rename = "requestedRoutingSkillIds", skip_serializing_if = "Option::is_none")]
    pub requested_routing_skill_ids: Option<Vec<String>>,
    /// Unique identifier for the language requested for an interaction
    #[serde(rename = "requestedLanguageId", skip_serializing_if = "Option::is_none")]
    pub requested_language_id: Option<String>,
    /// Routing priority for the current interaction
    #[serde(rename = "routingPriority", skip_serializing_if = "Option::is_none")]
    pub routing_priority: Option<i64>,
    /// A human readable name identifying the participant
    #[serde(rename = "participantName", skip_serializing_if = "Option::is_none")]
    pub participant_name: Option<String>,
    /// Unique identifier for the user
    #[serde(rename = "userId", skip_serializing_if = "Option::is_none")]
    pub user_id: Option<String>,
    /// The direction of the communication
    #[serde(rename = "direction", skip_serializing_if = "Option::is_none")]
    pub direction: Option<Direction>,
    /// Session media type that was converted from in case of a media type conversion
    #[serde(rename = "convertedFrom", skip_serializing_if = "Option::is_none")]
    pub converted_from: Option<String>,
    /// Session media type that was converted to in case of a media type conversion
    #[serde(rename = "convertedTo", skip_serializing_if = "Option::is_none")]
    pub converted_to: Option<String>,
    /// The address that initiated an action
    #[serde(rename = "addressFrom", skip_serializing_if = "Option::is_none")]
    pub address_from: Option<String>,
    /// The address receiving an action
    #[serde(rename = "addressTo", skip_serializing_if = "Option::is_none")]
    pub address_to: Option<String>,
    /// Automatic Number Identification (caller's number)
    #[serde(rename = "ani", skip_serializing_if = "Option::is_none")]
    pub ani: Option<String>,
    /// Dialed number identification service (number dialed by the calling party)
    #[serde(rename = "dnis", skip_serializing_if = "Option::is_none")]
    pub dnis: Option<String>,
    /// The team id the user is a member of
    #[serde(rename = "teamId", skip_serializing_if = "Option::is_none")]
    pub team_id: Option<String>,
    /// All routing types for requested/attempted routing methods
    #[serde(rename = "requestedRoutings", skip_serializing_if = "Option::is_none")]
    pub requested_routings: Option<std::collections::HashSet<RequestedRoutings>>,
    /// Complete routing method
    #[serde(rename = "usedRouting", skip_serializing_if = "Option::is_none")]
    pub used_routing: Option<UsedRouting>,
    #[serde(rename = "scoredAgents", skip_serializing_if = "Option::is_none")]
    pub scored_agents: Option<Vec<crate::models::AnalyticsScoredAgent>>,
}

impl ObservationValue {
    pub fn new(observation_date: String) -> ObservationValue {
        ObservationValue {
            observation_date,
            conversation_id: None,
            session_id: None,
            requested_routing_skill_ids: None,
            requested_language_id: None,
            routing_priority: None,
            participant_name: None,
            user_id: None,
            direction: None,
            converted_from: None,
            converted_to: None,
            address_from: None,
            address_to: None,
            ani: None,
            dnis: None,
            team_id: None,
            requested_routings: None,
            used_routing: None,
            scored_agents: None,
        }
    }
}

/// The direction of the communication
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Direction {
    #[serde(rename = "inbound")]
    Inbound,
    #[serde(rename = "outbound")]
    Outbound,
}

impl Default for Direction {
    fn default() -> Direction {
        Self::Inbound
    }
}
/// All routing types for requested/attempted routing methods
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RequestedRoutings {
    #[serde(rename = "Bullseye")]
    Bullseye,
    #[serde(rename = "Last")]
    Last,
    #[serde(rename = "Manual")]
    Manual,
    #[serde(rename = "Predictive")]
    Predictive,
    #[serde(rename = "Preferred")]
    Preferred,
    #[serde(rename = "Standard")]
    Standard,
}

impl Default for RequestedRoutings {
    fn default() -> RequestedRoutings {
        Self::Bullseye
    }
}
/// Complete routing method
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum UsedRouting {
    #[serde(rename = "Bullseye")]
    Bullseye,
    #[serde(rename = "Last")]
    Last,
    #[serde(rename = "Manual")]
    Manual,
    #[serde(rename = "Predictive")]
    Predictive,
    #[serde(rename = "Preferred")]
    Preferred,
    #[serde(rename = "Standard")]
    Standard,
}

impl Default for UsedRouting {
    fn default() -> UsedRouting {
        Self::Bullseye
    }
}

