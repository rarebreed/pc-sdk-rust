/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct QuickReply {
    /// Text to show inside the quick reply. This is also used as the response text after clicking on the quick reply.
    #[serde(rename = "text", skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
    /// Content of the textback payload after clicking a quick reply
    #[serde(rename = "payload", skip_serializing_if = "Option::is_none")]
    pub payload: Option<String>,
    /// The location of the image file associated with quick reply
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    /// Specifies the type of action that is triggered upon clicking the quick reply. Currently, the only supported action is \"Message\" which sends a message using the quick reply text.
    #[serde(rename = "action", skip_serializing_if = "Option::is_none")]
    pub action: Option<Action>,
    /// Indicates if the quick reply option is selected by end customer
    #[serde(rename = "isSelected", skip_serializing_if = "Option::is_none")]
    pub is_selected: Option<bool>,
}

impl QuickReply {
    pub fn new() -> QuickReply {
        QuickReply {
            text: None,
            payload: None,
            url: None,
            action: None,
            is_selected: None,
        }
    }
}

/// Specifies the type of action that is triggered upon clicking the quick reply. Currently, the only supported action is \"Message\" which sends a message using the quick reply text.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Action {
    #[serde(rename = "Message")]
    Message,
}

impl Default for Action {
    fn default() -> Action {
        Self::Message
    }
}

