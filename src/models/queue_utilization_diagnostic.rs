/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct QueueUtilizationDiagnostic {
    #[serde(rename = "queue", skip_serializing_if = "Option::is_none")]
    pub queue: Option<Box<crate::models::DomainEntityRef>>,
    /// The number of users joined to the queue
    #[serde(rename = "usersInQueue", skip_serializing_if = "Option::is_none")]
    pub users_in_queue: Option<i32>,
    /// The number of users active on the queue
    #[serde(rename = "activeUsersInQueue", skip_serializing_if = "Option::is_none")]
    pub active_users_in_queue: Option<i32>,
    /// The number of users with a status of on-queue
    #[serde(rename = "usersOnQueue", skip_serializing_if = "Option::is_none")]
    pub users_on_queue: Option<i32>,
    /// The number of users in the queue currently not engaged
    #[serde(rename = "usersNotUtilized", skip_serializing_if = "Option::is_none")]
    pub users_not_utilized: Option<i32>,
    /// The number of users in the queue with a station
    #[serde(rename = "usersOnQueueWithStation", skip_serializing_if = "Option::is_none")]
    pub users_on_queue_with_station: Option<i32>,
    /// The number of users currently engaged in a campaign call
    #[serde(rename = "usersOnACampaignCall", skip_serializing_if = "Option::is_none")]
    pub users_on_a_campaign_call: Option<i32>,
    /// The number of users whose station is homed to an edge different from the campaign
    #[serde(rename = "usersOnDifferentEdgeGroup", skip_serializing_if = "Option::is_none")]
    pub users_on_different_edge_group: Option<i32>,
    /// The number of users currently engaged in a communication that is not part of the campaign
    #[serde(rename = "usersOnANonCampaignCall", skip_serializing_if = "Option::is_none")]
    pub users_on_a_non_campaign_call: Option<i32>,
}

impl QueueUtilizationDiagnostic {
    pub fn new() -> QueueUtilizationDiagnostic {
        QueueUtilizationDiagnostic {
            queue: None,
            users_in_queue: None,
            active_users_in_queue: None,
            users_on_queue: None,
            users_not_utilized: None,
            users_on_queue_with_station: None,
            users_on_a_campaign_call: None,
            users_on_different_edge_group: None,
            users_on_a_non_campaign_call: None,
        }
    }
}


