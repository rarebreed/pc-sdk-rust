/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct RecordingMessagingMessage {
    /// The message sender session id.
    #[serde(rename = "from", skip_serializing_if = "Option::is_none")]
    pub from: Option<String>,
    #[serde(rename = "fromUser", skip_serializing_if = "Option::is_none")]
    pub from_user: Option<Box<crate::models::User>>,
    #[serde(rename = "fromExternalContact", skip_serializing_if = "Option::is_none")]
    pub from_external_contact: Option<Box<crate::models::ExternalContact>>,
    /// The message recipient.
    #[serde(rename = "to", skip_serializing_if = "Option::is_none")]
    pub to: Option<String>,
    /// The time when the message was sent. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "timestamp", skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<String>,
    /// A globally unique identifier for this communication.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The content of this message.
    #[serde(rename = "messageText", skip_serializing_if = "Option::is_none")]
    pub message_text: Option<String>,
    /// List of media objects attached  with this message.
    #[serde(rename = "messageMediaAttachments", skip_serializing_if = "Option::is_none")]
    pub message_media_attachments: Option<Vec<crate::models::MessageMediaAttachment>>,
    /// List of message stickers attached with this message.
    #[serde(rename = "messageStickerAttachments", skip_serializing_if = "Option::is_none")]
    pub message_sticker_attachments: Option<Vec<crate::models::MessageStickerAttachment>>,
    /// List of quick reply options offered with this message.
    #[serde(rename = "quickReplies", skip_serializing_if = "Option::is_none")]
    pub quick_replies: Option<Vec<crate::models::QuickReply>>,
    #[serde(rename = "buttonResponse", skip_serializing_if = "Option::is_none")]
    pub button_response: Option<Box<crate::models::ButtonResponse>>,
    #[serde(rename = "story", skip_serializing_if = "Option::is_none")]
    pub story: Option<Box<crate::models::RecordingContentStory>>,
}

impl RecordingMessagingMessage {
    pub fn new() -> RecordingMessagingMessage {
        RecordingMessagingMessage {
            from: None,
            from_user: None,
            from_external_contact: None,
            to: None,
            timestamp: None,
            id: None,
            message_text: None,
            message_media_attachments: None,
            message_sticker_attachments: None,
            quick_replies: None,
            button_response: None,
            story: None,
        }
    }
}


