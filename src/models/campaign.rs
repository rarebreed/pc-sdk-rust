/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Campaign {
    /// The globally unique identifier for the object.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The name of the Campaign.
    #[serde(rename = "name")]
    pub name: String,
    /// Creation time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "dateCreated", skip_serializing_if = "Option::is_none")]
    pub date_created: Option<String>,
    /// Last modified time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "dateModified", skip_serializing_if = "Option::is_none")]
    pub date_modified: Option<String>,
    /// Required for updates, must match the version number of the most recent update
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<i32>,
    #[serde(rename = "contactList")]
    pub contact_list: Box<crate::models::DomainEntityRef>,
    #[serde(rename = "queue", skip_serializing_if = "Option::is_none")]
    pub queue: Option<Box<crate::models::DomainEntityRef>>,
    /// The strategy this Campaign will use for dialing.
    #[serde(rename = "dialingMode")]
    pub dialing_mode: DialingMode,
    #[serde(rename = "script", skip_serializing_if = "Option::is_none")]
    pub script: Option<Box<crate::models::DomainEntityRef>>,
    #[serde(rename = "edgeGroup", skip_serializing_if = "Option::is_none")]
    pub edge_group: Option<Box<crate::models::DomainEntityRef>>,
    #[serde(rename = "site", skip_serializing_if = "Option::is_none")]
    pub site: Option<Box<crate::models::DomainEntityRef>>,
    /// The current status of the Campaign. A Campaign may be turned 'on' or 'off'. Required for updates.
    #[serde(rename = "campaignStatus", skip_serializing_if = "Option::is_none")]
    pub campaign_status: Option<CampaignStatus>,
    /// The ContactPhoneNumberColumns on the ContactList that this Campaign should dial.
    #[serde(rename = "phoneColumns")]
    pub phone_columns: Vec<crate::models::PhoneColumn>,
    /// The targeted abandon rate percentage. Required for progressive, power, and predictive campaigns.
    #[serde(rename = "abandonRate", skip_serializing_if = "Option::is_none")]
    pub abandon_rate: Option<f64>,
    /// DncLists for this Campaign to check before placing a call.
    #[serde(rename = "dncLists", skip_serializing_if = "Option::is_none")]
    pub dnc_lists: Option<Vec<crate::models::DomainEntityRef>>,
    #[serde(rename = "callableTimeSet", skip_serializing_if = "Option::is_none")]
    pub callable_time_set: Option<Box<crate::models::DomainEntityRef>>,
    #[serde(rename = "callAnalysisResponseSet", skip_serializing_if = "Option::is_none")]
    pub call_analysis_response_set: Option<Box<crate::models::DomainEntityRef>>,
    /// A list of current error conditions associated with the campaign.
    #[serde(rename = "errors", skip_serializing_if = "Option::is_none")]
    pub errors: Option<Vec<crate::models::RestErrorDetail>>,
    /// The caller id name to be displayed on the outbound call.
    #[serde(rename = "callerName")]
    pub caller_name: String,
    /// The caller id phone number to be displayed on the outbound call.
    #[serde(rename = "callerAddress")]
    pub caller_address: String,
    /// The number of outbound lines to be concurrently dialed. Only applicable to non-preview campaigns; only required for agentless.
    #[serde(rename = "outboundLineCount", skip_serializing_if = "Option::is_none")]
    pub outbound_line_count: Option<i32>,
    /// Rule sets to be applied while this campaign is dialing.
    #[serde(rename = "ruleSets", skip_serializing_if = "Option::is_none")]
    pub rule_sets: Option<Vec<crate::models::DomainEntityRef>>,
    /// Whether or not agents can skip previews without placing a call. Only applicable for preview campaigns.
    #[serde(rename = "skipPreviewDisabled", skip_serializing_if = "Option::is_none")]
    pub skip_preview_disabled: Option<bool>,
    /// The number of seconds before a call will be automatically placed on a preview. A value of 0 indicates no automatic placement of calls. Only applicable to preview campaigns.
    #[serde(rename = "previewTimeOutSeconds", skip_serializing_if = "Option::is_none")]
    pub preview_time_out_seconds: Option<i64>,
    /// Indicates (when true) that the campaign will remain on after contacts are depleted, allowing additional contacts to be appended/added to the contact list and processed by the still-running campaign. The campaign can still be turned off manually.
    #[serde(rename = "alwaysRunning", skip_serializing_if = "Option::is_none")]
    pub always_running: Option<bool>,
    #[serde(rename = "contactSort", skip_serializing_if = "Option::is_none")]
    pub contact_sort: Option<Box<crate::models::ContactSort>>,
    /// The order in which to sort contacts for dialing, based on up to four columns.
    #[serde(rename = "contactSorts", skip_serializing_if = "Option::is_none")]
    pub contact_sorts: Option<Vec<crate::models::ContactSort>>,
    /// How long to wait before dispositioning a call as 'no-answer'. Default 30 seconds. Only applicable to non-preview campaigns.
    #[serde(rename = "noAnswerTimeout", skip_serializing_if = "Option::is_none")]
    pub no_answer_timeout: Option<i32>,
    /// The language the edge will use to analyze the call.
    #[serde(rename = "callAnalysisLanguage", skip_serializing_if = "Option::is_none")]
    pub call_analysis_language: Option<String>,
    /// The priority of this campaign relative to other campaigns that are running on the same queue. 5 is the highest priority, 1 the lowest.
    #[serde(rename = "priority", skip_serializing_if = "Option::is_none")]
    pub priority: Option<i32>,
    /// Filter to apply to the contact list before dialing. Currently a campaign can only have one filter applied.
    #[serde(rename = "contactListFilters", skip_serializing_if = "Option::is_none")]
    pub contact_list_filters: Option<Vec<crate::models::DomainEntityRef>>,
    #[serde(rename = "division", skip_serializing_if = "Option::is_none")]
    pub division: Option<Box<crate::models::DomainEntityRef>>,
    /// The URI for this object
    #[serde(rename = "selfUri", skip_serializing_if = "Option::is_none")]
    pub self_uri: Option<String>,
}

impl Campaign {
    pub fn new(name: String, contact_list: crate::models::DomainEntityRef, dialing_mode: DialingMode, phone_columns: Vec<crate::models::PhoneColumn>, caller_name: String, caller_address: String) -> Campaign {
        Campaign {
            id: None,
            name,
            date_created: None,
            date_modified: None,
            version: None,
            contact_list: Box::new(contact_list),
            queue: None,
            dialing_mode,
            script: None,
            edge_group: None,
            site: None,
            campaign_status: None,
            phone_columns,
            abandon_rate: None,
            dnc_lists: None,
            callable_time_set: None,
            call_analysis_response_set: None,
            errors: None,
            caller_name,
            caller_address,
            outbound_line_count: None,
            rule_sets: None,
            skip_preview_disabled: None,
            preview_time_out_seconds: None,
            always_running: None,
            contact_sort: None,
            contact_sorts: None,
            no_answer_timeout: None,
            call_analysis_language: None,
            priority: None,
            contact_list_filters: None,
            division: None,
            self_uri: None,
        }
    }
}

/// The strategy this Campaign will use for dialing.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DialingMode {
    #[serde(rename = "agentless")]
    Agentless,
    #[serde(rename = "preview")]
    Preview,
    #[serde(rename = "power")]
    Power,
    #[serde(rename = "predictive")]
    Predictive,
    #[serde(rename = "progressive")]
    Progressive,
    #[serde(rename = "external")]
    External,
}

impl Default for DialingMode {
    fn default() -> DialingMode {
        Self::Agentless
    }
}
/// The current status of the Campaign. A Campaign may be turned 'on' or 'off'. Required for updates.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CampaignStatus {
    #[serde(rename = "on")]
    On,
    #[serde(rename = "stopping")]
    Stopping,
    #[serde(rename = "off")]
    Off,
    #[serde(rename = "complete")]
    Complete,
    #[serde(rename = "invalid")]
    Invalid,
    #[serde(rename = "forced_off")]
    ForcedOff,
    #[serde(rename = "forced_stopping")]
    ForcedStopping,
}

impl Default for CampaignStatus {
    fn default() -> CampaignStatus {
        Self::On
    }
}

