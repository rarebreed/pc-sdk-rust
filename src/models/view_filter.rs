/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ViewFilter {
    /// The media types are used to filter the view
    #[serde(rename = "mediaTypes", skip_serializing_if = "Option::is_none")]
    pub media_types: Option<Vec<MediaTypes>>,
    /// The queue ids are used to filter the view
    #[serde(rename = "queueIds", skip_serializing_if = "Option::is_none")]
    pub queue_ids: Option<Vec<String>>,
    /// The skill ids are used to filter the view
    #[serde(rename = "skillIds", skip_serializing_if = "Option::is_none")]
    pub skill_ids: Option<Vec<String>>,
    /// The skill groups used to filter the view
    #[serde(rename = "skillGroups", skip_serializing_if = "Option::is_none")]
    pub skill_groups: Option<Vec<String>>,
    /// The language ids are used to filter the view
    #[serde(rename = "languageIds", skip_serializing_if = "Option::is_none")]
    pub language_ids: Option<Vec<String>>,
    /// The language groups used to filter the view
    #[serde(rename = "languageGroups", skip_serializing_if = "Option::is_none")]
    pub language_groups: Option<Vec<String>>,
    /// The directions are used to filter the view
    #[serde(rename = "directions", skip_serializing_if = "Option::is_none")]
    pub directions: Option<Vec<Directions>>,
    /// The list of orginating directions used to filter the view
    #[serde(rename = "originatingDirections", skip_serializing_if = "Option::is_none")]
    pub originating_directions: Option<Vec<OriginatingDirections>>,
    /// The wrap up codes are used to filter the view
    #[serde(rename = "wrapUpCodes", skip_serializing_if = "Option::is_none")]
    pub wrap_up_codes: Option<Vec<String>>,
    /// The dnis list is used to filter the view
    #[serde(rename = "dnisList", skip_serializing_if = "Option::is_none")]
    pub dnis_list: Option<Vec<String>>,
    /// The list of session dnis used to filter the view
    #[serde(rename = "sessionDnisList", skip_serializing_if = "Option::is_none")]
    pub session_dnis_list: Option<Vec<String>>,
    /// The user ids are used to fetch associated queues for the view
    #[serde(rename = "filterQueuesByUserIds", skip_serializing_if = "Option::is_none")]
    pub filter_queues_by_user_ids: Option<Vec<String>>,
    /// The queue ids are used to fetch associated users for the view
    #[serde(rename = "filterUsersByQueueIds", skip_serializing_if = "Option::is_none")]
    pub filter_users_by_queue_ids: Option<Vec<String>>,
    /// The user ids are used to filter the view
    #[serde(rename = "userIds", skip_serializing_if = "Option::is_none")]
    pub user_ids: Option<Vec<String>>,
    /// The management unit ids are used to filter the view
    #[serde(rename = "managementUnitIds", skip_serializing_if = "Option::is_none")]
    pub management_unit_ids: Option<Vec<String>>,
    /// The address To values are used to filter the view
    #[serde(rename = "addressTos", skip_serializing_if = "Option::is_none")]
    pub address_tos: Option<Vec<String>>,
    /// The address from values are used to filter the view
    #[serde(rename = "addressFroms", skip_serializing_if = "Option::is_none")]
    pub address_froms: Option<Vec<String>>,
    /// The outbound campaign ids are used to filter the view
    #[serde(rename = "outboundCampaignIds", skip_serializing_if = "Option::is_none")]
    pub outbound_campaign_ids: Option<Vec<String>>,
    /// The outbound contact list ids are used to filter the view
    #[serde(rename = "outboundContactListIds", skip_serializing_if = "Option::is_none")]
    pub outbound_contact_list_ids: Option<Vec<String>>,
    /// The contact ids are used to filter the view
    #[serde(rename = "contactIds", skip_serializing_if = "Option::is_none")]
    pub contact_ids: Option<Vec<String>>,
    /// The external contact ids are used to filter the view
    #[serde(rename = "externalContactIds", skip_serializing_if = "Option::is_none")]
    pub external_contact_ids: Option<Vec<String>>,
    /// The external org ids are used to filter the view
    #[serde(rename = "externalOrgIds", skip_serializing_if = "Option::is_none")]
    pub external_org_ids: Option<Vec<String>>,
    /// The ani list ids are used to filter the view
    #[serde(rename = "aniList", skip_serializing_if = "Option::is_none")]
    pub ani_list: Option<Vec<String>>,
    /// The durations in milliseconds used to filter the view
    #[serde(rename = "durationsMilliseconds", skip_serializing_if = "Option::is_none")]
    pub durations_milliseconds: Option<Vec<crate::models::NumericRange>>,
    /// The acd durations in milliseconds used to filter the view
    #[serde(rename = "acdDurationsMilliseconds", skip_serializing_if = "Option::is_none")]
    pub acd_durations_milliseconds: Option<Vec<crate::models::NumericRange>>,
    /// The talk durations in milliseconds used to filter the view
    #[serde(rename = "talkDurationsMilliseconds", skip_serializing_if = "Option::is_none")]
    pub talk_durations_milliseconds: Option<Vec<crate::models::NumericRange>>,
    /// The acw durations in milliseconds used to filter the view
    #[serde(rename = "acwDurationsMilliseconds", skip_serializing_if = "Option::is_none")]
    pub acw_durations_milliseconds: Option<Vec<crate::models::NumericRange>>,
    /// The handle durations in milliseconds used to filter the view
    #[serde(rename = "handleDurationsMilliseconds", skip_serializing_if = "Option::is_none")]
    pub handle_durations_milliseconds: Option<Vec<crate::models::NumericRange>>,
    /// The hold durations in milliseconds used to filter the view
    #[serde(rename = "holdDurationsMilliseconds", skip_serializing_if = "Option::is_none")]
    pub hold_durations_milliseconds: Option<Vec<crate::models::NumericRange>>,
    /// The abandon durations in milliseconds used to filter the view
    #[serde(rename = "abandonDurationsMilliseconds", skip_serializing_if = "Option::is_none")]
    pub abandon_durations_milliseconds: Option<Vec<crate::models::NumericRange>>,
    #[serde(rename = "evaluationScore", skip_serializing_if = "Option::is_none")]
    pub evaluation_score: Option<Box<crate::models::NumericRange>>,
    #[serde(rename = "evaluationCriticalScore", skip_serializing_if = "Option::is_none")]
    pub evaluation_critical_score: Option<Box<crate::models::NumericRange>>,
    /// The evaluation form ids are used to filter the view
    #[serde(rename = "evaluationFormIds", skip_serializing_if = "Option::is_none")]
    pub evaluation_form_ids: Option<Vec<String>>,
    /// The evaluated agent ids are used to filter the view
    #[serde(rename = "evaluatedAgentIds", skip_serializing_if = "Option::is_none")]
    pub evaluated_agent_ids: Option<Vec<String>>,
    /// The evaluator ids are used to filter the view
    #[serde(rename = "evaluatorIds", skip_serializing_if = "Option::is_none")]
    pub evaluator_ids: Option<Vec<String>>,
    /// Indicates filtering for transfers
    #[serde(rename = "transferred", skip_serializing_if = "Option::is_none")]
    pub transferred: Option<bool>,
    /// Indicates filtering for abandons
    #[serde(rename = "abandoned", skip_serializing_if = "Option::is_none")]
    pub abandoned: Option<bool>,
    /// Indicates filtering for answered interactions
    #[serde(rename = "answered", skip_serializing_if = "Option::is_none")]
    pub answered: Option<bool>,
    /// The message media types used to filter the view
    #[serde(rename = "messageTypes", skip_serializing_if = "Option::is_none")]
    pub message_types: Option<Vec<MessageTypes>>,
    /// The divison Ids used to filter the view
    #[serde(rename = "divisionIds", skip_serializing_if = "Option::is_none")]
    pub division_ids: Option<Vec<String>>,
    /// The survey form ids used to filter the view
    #[serde(rename = "surveyFormIds", skip_serializing_if = "Option::is_none")]
    pub survey_form_ids: Option<Vec<String>>,
    #[serde(rename = "surveyTotalScore", skip_serializing_if = "Option::is_none")]
    pub survey_total_score: Option<Box<crate::models::NumericRange>>,
    #[serde(rename = "surveyNpsScore", skip_serializing_if = "Option::is_none")]
    pub survey_nps_score: Option<Box<crate::models::NumericRange>>,
    #[serde(rename = "mos", skip_serializing_if = "Option::is_none")]
    pub mos: Option<Box<crate::models::NumericRange>>,
    #[serde(rename = "surveyQuestionGroupScore", skip_serializing_if = "Option::is_none")]
    pub survey_question_group_score: Option<Box<crate::models::NumericRange>>,
    #[serde(rename = "surveyPromoterScore", skip_serializing_if = "Option::is_none")]
    pub survey_promoter_score: Option<Box<crate::models::NumericRange>>,
    /// The list of survey form context ids used to filter the view
    #[serde(rename = "surveyFormContextIds", skip_serializing_if = "Option::is_none")]
    pub survey_form_context_ids: Option<Vec<String>>,
    /// The list of conversation ids used to filter the view
    #[serde(rename = "conversationIds", skip_serializing_if = "Option::is_none")]
    pub conversation_ids: Option<Vec<String>>,
    /// The list of SIP call ids used to filter the view
    #[serde(rename = "sipCallIds", skip_serializing_if = "Option::is_none")]
    pub sip_call_ids: Option<Vec<String>>,
    /// Indicates filtering for ended
    #[serde(rename = "isEnded", skip_serializing_if = "Option::is_none")]
    pub is_ended: Option<bool>,
    /// Indicates filtering for survey
    #[serde(rename = "isSurveyed", skip_serializing_if = "Option::is_none")]
    pub is_surveyed: Option<bool>,
    /// The list of survey score ranges used to filter the view
    #[serde(rename = "surveyScores", skip_serializing_if = "Option::is_none")]
    pub survey_scores: Option<Vec<crate::models::NumericRange>>,
    /// The list of promoter score ranges used to filter the view
    #[serde(rename = "promoterScores", skip_serializing_if = "Option::is_none")]
    pub promoter_scores: Option<Vec<crate::models::NumericRange>>,
    /// Indicates filtering for campaign
    #[serde(rename = "isCampaign", skip_serializing_if = "Option::is_none")]
    pub is_campaign: Option<bool>,
    /// The list of survey statuses used to filter the view
    #[serde(rename = "surveyStatuses", skip_serializing_if = "Option::is_none")]
    pub survey_statuses: Option<Vec<String>>,
    #[serde(rename = "conversationProperties", skip_serializing_if = "Option::is_none")]
    pub conversation_properties: Option<Box<crate::models::ConversationProperties>>,
    /// Indicates filtering for blind transferred
    #[serde(rename = "isBlindTransferred", skip_serializing_if = "Option::is_none")]
    pub is_blind_transferred: Option<bool>,
    /// Indicates filtering for consulted
    #[serde(rename = "isConsulted", skip_serializing_if = "Option::is_none")]
    pub is_consulted: Option<bool>,
    /// Indicates filtering for consult transferred
    #[serde(rename = "isConsultTransferred", skip_serializing_if = "Option::is_none")]
    pub is_consult_transferred: Option<bool>,
    /// The list of remote participants used to filter the view
    #[serde(rename = "remoteParticipants", skip_serializing_if = "Option::is_none")]
    pub remote_participants: Option<Vec<String>>,
    /// The list of flow Ids
    #[serde(rename = "flowIds", skip_serializing_if = "Option::is_none")]
    pub flow_ids: Option<Vec<String>>,
    /// A list of outcome ids of the flow
    #[serde(rename = "flowOutcomeIds", skip_serializing_if = "Option::is_none")]
    pub flow_outcome_ids: Option<Vec<String>>,
    /// A list of outcome values of the flow
    #[serde(rename = "flowOutcomeValues", skip_serializing_if = "Option::is_none")]
    pub flow_outcome_values: Option<Vec<FlowOutcomeValues>>,
    /// The list of destination types of the flow
    #[serde(rename = "flowDestinationTypes", skip_serializing_if = "Option::is_none")]
    pub flow_destination_types: Option<Vec<FlowDestinationTypes>>,
    /// The list of reasons for the flow to disconnect
    #[serde(rename = "flowDisconnectReasons", skip_serializing_if = "Option::is_none")]
    pub flow_disconnect_reasons: Option<Vec<FlowDisconnectReasons>>,
    /// A list of types of the flow
    #[serde(rename = "flowTypes", skip_serializing_if = "Option::is_none")]
    pub flow_types: Option<Vec<FlowTypes>>,
    /// A list of types of the flow entry
    #[serde(rename = "flowEntryTypes", skip_serializing_if = "Option::is_none")]
    pub flow_entry_types: Option<Vec<FlowEntryTypes>>,
    /// A list of reasons of flow entry
    #[serde(rename = "flowEntryReasons", skip_serializing_if = "Option::is_none")]
    pub flow_entry_reasons: Option<Vec<String>>,
    /// A list of versions of a flow
    #[serde(rename = "flowVersions", skip_serializing_if = "Option::is_none")]
    pub flow_versions: Option<Vec<String>>,
    /// A list of directory group ids
    #[serde(rename = "groupIds", skip_serializing_if = "Option::is_none")]
    pub group_ids: Option<Vec<String>>,
    /// Indicates filtering for journey customer id
    #[serde(rename = "hasJourneyCustomerId", skip_serializing_if = "Option::is_none")]
    pub has_journey_customer_id: Option<bool>,
    /// Indicates filtering for Journey action map id
    #[serde(rename = "hasJourneyActionMapId", skip_serializing_if = "Option::is_none")]
    pub has_journey_action_map_id: Option<bool>,
    /// Indicates filtering for Journey visit id
    #[serde(rename = "hasJourneyVisitId", skip_serializing_if = "Option::is_none")]
    pub has_journey_visit_id: Option<bool>,
    /// Indicates filtering for presence of MMS media
    #[serde(rename = "hasMedia", skip_serializing_if = "Option::is_none")]
    pub has_media: Option<bool>,
    /// The role Ids used to filter the view
    #[serde(rename = "roleIds", skip_serializing_if = "Option::is_none")]
    pub role_ids: Option<Vec<String>>,
    /// The report to user IDs used to filter the view
    #[serde(rename = "reportsTos", skip_serializing_if = "Option::is_none")]
    pub reports_tos: Option<Vec<String>>,
    /// The location Ids used to filter the view
    #[serde(rename = "locationIds", skip_serializing_if = "Option::is_none")]
    pub location_ids: Option<Vec<String>>,
    /// A list of flow out types
    #[serde(rename = "flowOutTypes", skip_serializing_if = "Option::is_none")]
    pub flow_out_types: Option<Vec<String>>,
    /// A list of providers
    #[serde(rename = "providerList", skip_serializing_if = "Option::is_none")]
    pub provider_list: Option<Vec<String>>,
    /// A list of callback numbers or substrings of numbers (ex: [\"317\", \"13172222222\"])
    #[serde(rename = "callbackNumberList", skip_serializing_if = "Option::is_none")]
    pub callback_number_list: Option<Vec<String>>,
    /// An interval of time to filter for scheduled callbacks. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss
    #[serde(rename = "callbackInterval", skip_serializing_if = "Option::is_none")]
    pub callback_interval: Option<String>,
    /// A list of routing types used
    #[serde(rename = "usedRoutingTypes", skip_serializing_if = "Option::is_none")]
    pub used_routing_types: Option<Vec<UsedRoutingTypes>>,
    /// A list of routing types requested
    #[serde(rename = "requestedRoutingTypes", skip_serializing_if = "Option::is_none")]
    pub requested_routing_types: Option<Vec<RequestedRoutingTypes>>,
    /// Indicates filtering for agent assist id
    #[serde(rename = "hasAgentAssistId", skip_serializing_if = "Option::is_none")]
    pub has_agent_assist_id: Option<bool>,
    /// A list of transcript contents requested
    #[serde(rename = "transcripts", skip_serializing_if = "Option::is_none")]
    pub transcripts: Option<Vec<crate::models::Transcripts>>,
    /// A list of transcript languages requested
    #[serde(rename = "transcriptLanguages", skip_serializing_if = "Option::is_none")]
    pub transcript_languages: Option<Vec<String>>,
    /// A list of participant purpose requested
    #[serde(rename = "participantPurposes", skip_serializing_if = "Option::is_none")]
    pub participant_purposes: Option<Vec<ParticipantPurposes>>,
    /// Indicates filtering for first queue data
    #[serde(rename = "showFirstQueue", skip_serializing_if = "Option::is_none")]
    pub show_first_queue: Option<bool>,
    /// The team ids used to filter the view data
    #[serde(rename = "teamIds", skip_serializing_if = "Option::is_none")]
    pub team_ids: Option<Vec<String>>,
    /// The team ids are used to fetch associated users for the view
    #[serde(rename = "filterUsersByTeamIds", skip_serializing_if = "Option::is_none")]
    pub filter_users_by_team_ids: Option<Vec<String>>,
    /// The journey action map ids are used to fetch action maps for the associated view
    #[serde(rename = "journeyActionMapIds", skip_serializing_if = "Option::is_none")]
    pub journey_action_map_ids: Option<Vec<String>>,
    /// The journey outcome ids are used to fetch outcomes for the associated view
    #[serde(rename = "journeyOutcomeIds", skip_serializing_if = "Option::is_none")]
    pub journey_outcome_ids: Option<Vec<String>>,
    /// The journey segment ids are used to fetch segments for the associated view
    #[serde(rename = "journeySegmentIds", skip_serializing_if = "Option::is_none")]
    pub journey_segment_ids: Option<Vec<String>>,
    /// The journey action map types are used to filter action map data for the associated view
    #[serde(rename = "journeyActionMapTypes", skip_serializing_if = "Option::is_none")]
    pub journey_action_map_types: Option<Vec<JourneyActionMapTypes>>,
    /// The list of development roles used to filter agent development view
    #[serde(rename = "developmentRoleList", skip_serializing_if = "Option::is_none")]
    pub development_role_list: Option<Vec<DevelopmentRoleList>>,
    /// The list of development types used to filter agent development view
    #[serde(rename = "developmentTypeList", skip_serializing_if = "Option::is_none")]
    pub development_type_list: Option<Vec<DevelopmentTypeList>>,
    /// The list of development status used to filter agent development view
    #[serde(rename = "developmentStatusList", skip_serializing_if = "Option::is_none")]
    pub development_status_list: Option<Vec<DevelopmentStatusList>>,
    /// The list of development moduleIds used to filter agent development view
    #[serde(rename = "developmentModuleIds", skip_serializing_if = "Option::is_none")]
    pub development_module_ids: Option<Vec<String>>,
    /// Indicates filtering for development activities
    #[serde(rename = "developmentActivityOverdue", skip_serializing_if = "Option::is_none")]
    pub development_activity_overdue: Option<bool>,
    #[serde(rename = "customerSentimentScore", skip_serializing_if = "Option::is_none")]
    pub customer_sentiment_score: Option<Box<crate::models::NumericRange>>,
    #[serde(rename = "customerSentimentTrend", skip_serializing_if = "Option::is_none")]
    pub customer_sentiment_trend: Option<Box<crate::models::NumericRange>>,
    /// The list of transfer targets used to filter flow data
    #[serde(rename = "flowTransferTargets", skip_serializing_if = "Option::is_none")]
    pub flow_transfer_targets: Option<Vec<String>>,
    /// Filter for development name
    #[serde(rename = "developmentName", skip_serializing_if = "Option::is_none")]
    pub development_name: Option<String>,
    /// Represents the topics detected in the transcript
    #[serde(rename = "topicIds", skip_serializing_if = "Option::is_none")]
    pub topic_ids: Option<Vec<String>>,
    /// The list of external Tags used to filter conversation data
    #[serde(rename = "externalTags", skip_serializing_if = "Option::is_none")]
    pub external_tags: Option<Vec<String>>,
    /// Indicates filtering for not responding users
    #[serde(rename = "isNotResponding", skip_serializing_if = "Option::is_none")]
    pub is_not_responding: Option<bool>,
    /// Indicates filtering for the authenticated chat
    #[serde(rename = "isAuthenticated", skip_serializing_if = "Option::is_none")]
    pub is_authenticated: Option<bool>,
    /// The list of bot IDs used to filter bot views
    #[serde(rename = "botIds", skip_serializing_if = "Option::is_none")]
    pub bot_ids: Option<Vec<String>>,
    /// The list of bot versions used to filter bot views
    #[serde(rename = "botVersions", skip_serializing_if = "Option::is_none")]
    pub bot_versions: Option<Vec<String>>,
    /// The list of bot message types used to filter bot views
    #[serde(rename = "botMessageTypes", skip_serializing_if = "Option::is_none")]
    pub bot_message_types: Option<Vec<BotMessageTypes>>,
    /// The list of bot providers used to filter bot views
    #[serde(rename = "botProviderList", skip_serializing_if = "Option::is_none")]
    pub bot_provider_list: Option<Vec<BotProviderList>>,
    /// The list of bot products used to filter bot views
    #[serde(rename = "botProductList", skip_serializing_if = "Option::is_none")]
    pub bot_product_list: Option<Vec<BotProductList>>,
    /// The list of bot recognition failure reasons used to filter bot views
    #[serde(rename = "botRecognitionFailureReasonList", skip_serializing_if = "Option::is_none")]
    pub bot_recognition_failure_reason_list: Option<Vec<BotRecognitionFailureReasonList>>,
    /// The list of bot intents used to filter bot views
    #[serde(rename = "botIntentList", skip_serializing_if = "Option::is_none")]
    pub bot_intent_list: Option<Vec<String>>,
    /// The list of bot final intents used to filter bot views
    #[serde(rename = "botFinalIntentList", skip_serializing_if = "Option::is_none")]
    pub bot_final_intent_list: Option<Vec<String>>,
    /// The list of bot slots used to filter bot views
    #[serde(rename = "botSlotList", skip_serializing_if = "Option::is_none")]
    pub bot_slot_list: Option<Vec<String>>,
    /// The list of bot results used to filter bot views
    #[serde(rename = "botResultList", skip_serializing_if = "Option::is_none")]
    pub bot_result_list: Option<Vec<BotResultList>>,
    /// The list of blocked reason used to filter action map constraints views
    #[serde(rename = "blockedReasons", skip_serializing_if = "Option::is_none")]
    pub blocked_reasons: Option<Vec<BlockedReasons>>,
    /// Indicates filtering for recorded
    #[serde(rename = "isRecorded", skip_serializing_if = "Option::is_none")]
    pub is_recorded: Option<bool>,
    /// Indicates filtering for evaluation
    #[serde(rename = "hasEvaluation", skip_serializing_if = "Option::is_none")]
    pub has_evaluation: Option<bool>,
    /// Indicates filtering for scored evaluation
    #[serde(rename = "hasScoredEvaluation", skip_serializing_if = "Option::is_none")]
    pub has_scored_evaluation: Option<bool>,
    /// The list of email delivery statuses used to filter views
    #[serde(rename = "emailDeliveryStatusList", skip_serializing_if = "Option::is_none")]
    pub email_delivery_status_list: Option<Vec<EmailDeliveryStatusList>>,
    /// Indicates filtering for agent owned callback interactions
    #[serde(rename = "isAgentOwnedCallback", skip_serializing_if = "Option::is_none")]
    pub is_agent_owned_callback: Option<bool>,
    /// The list of callback owners used to filter interactions
    #[serde(rename = "agentCallbackOwnerIds", skip_serializing_if = "Option::is_none")]
    pub agent_callback_owner_ids: Option<Vec<String>>,
    /// The list of transcript topics requested in filter
    #[serde(rename = "transcriptTopics", skip_serializing_if = "Option::is_none")]
    pub transcript_topics: Option<Vec<crate::models::TranscriptTopics>>,
    /// The list of frequency cap reasons to filter offer constraints
    #[serde(rename = "journeyFrequencyCapReasons", skip_serializing_if = "Option::is_none")]
    pub journey_frequency_cap_reasons: Option<Vec<String>>,
    /// The list of blocking action maps to filter offer constraints
    #[serde(rename = "journeyBlockingActionMapIds", skip_serializing_if = "Option::is_none")]
    pub journey_blocking_action_map_ids: Option<Vec<String>>,
    /// The list of action targets to filter offer constraints
    #[serde(rename = "journeyActionTargetIds", skip_serializing_if = "Option::is_none")]
    pub journey_action_target_ids: Option<Vec<String>>,
    /// The list of blocking schedule groups to filter offer constraints
    #[serde(rename = "journeyBlockingScheduleGroupIds", skip_serializing_if = "Option::is_none")]
    pub journey_blocking_schedule_group_ids: Option<Vec<String>>,
    /// The list of emergency schedule groups to filter offer constraints
    #[serde(rename = "journeyBlockingEmergencyScheduleGroupIds", skip_serializing_if = "Option::is_none")]
    pub journey_blocking_emergency_schedule_group_ids: Option<Vec<String>>,
    /// The list of url equal conditions to filter offer constraints
    #[serde(rename = "journeyUrlEqualConditions", skip_serializing_if = "Option::is_none")]
    pub journey_url_equal_conditions: Option<Vec<String>>,
    /// The list of url not equal conditions to filter offer constraints
    #[serde(rename = "journeyUrlNotEqualConditions", skip_serializing_if = "Option::is_none")]
    pub journey_url_not_equal_conditions: Option<Vec<String>>,
    /// The list of url starts with conditions to filter offer constraints
    #[serde(rename = "journeyUrlStartsWithConditions", skip_serializing_if = "Option::is_none")]
    pub journey_url_starts_with_conditions: Option<Vec<String>>,
    /// The list of url ends with conditions to filter offer constraints
    #[serde(rename = "journeyUrlEndsWithConditions", skip_serializing_if = "Option::is_none")]
    pub journey_url_ends_with_conditions: Option<Vec<String>>,
    /// The list of url contains any conditions to filter offer constraints
    #[serde(rename = "journeyUrlContainsAnyConditions", skip_serializing_if = "Option::is_none")]
    pub journey_url_contains_any_conditions: Option<Vec<String>>,
    /// The list of url not contains any conditions to filter offer constraints
    #[serde(rename = "journeyUrlNotContainsAnyConditions", skip_serializing_if = "Option::is_none")]
    pub journey_url_not_contains_any_conditions: Option<Vec<String>>,
    /// The list of url contains all conditions to filter offer constraints
    #[serde(rename = "journeyUrlContainsAllConditions", skip_serializing_if = "Option::is_none")]
    pub journey_url_contains_all_conditions: Option<Vec<String>>,
    /// The list of url not contains all conditions to filter offer constraints
    #[serde(rename = "journeyUrlNotContainsAllConditions", skip_serializing_if = "Option::is_none")]
    pub journey_url_not_contains_all_conditions: Option<Vec<String>>,
    /// The list of flow milestones to filter exports
    #[serde(rename = "flowMilestoneIds", skip_serializing_if = "Option::is_none")]
    pub flow_milestone_ids: Option<Vec<String>>,
    /// Filter to indicate if Agent passed assessment or not
    #[serde(rename = "isAssessmentPassed", skip_serializing_if = "Option::is_none")]
    pub is_assessment_passed: Option<bool>,
}

impl ViewFilter {
    pub fn new() -> ViewFilter {
        ViewFilter {
            media_types: None,
            queue_ids: None,
            skill_ids: None,
            skill_groups: None,
            language_ids: None,
            language_groups: None,
            directions: None,
            originating_directions: None,
            wrap_up_codes: None,
            dnis_list: None,
            session_dnis_list: None,
            filter_queues_by_user_ids: None,
            filter_users_by_queue_ids: None,
            user_ids: None,
            management_unit_ids: None,
            address_tos: None,
            address_froms: None,
            outbound_campaign_ids: None,
            outbound_contact_list_ids: None,
            contact_ids: None,
            external_contact_ids: None,
            external_org_ids: None,
            ani_list: None,
            durations_milliseconds: None,
            acd_durations_milliseconds: None,
            talk_durations_milliseconds: None,
            acw_durations_milliseconds: None,
            handle_durations_milliseconds: None,
            hold_durations_milliseconds: None,
            abandon_durations_milliseconds: None,
            evaluation_score: None,
            evaluation_critical_score: None,
            evaluation_form_ids: None,
            evaluated_agent_ids: None,
            evaluator_ids: None,
            transferred: None,
            abandoned: None,
            answered: None,
            message_types: None,
            division_ids: None,
            survey_form_ids: None,
            survey_total_score: None,
            survey_nps_score: None,
            mos: None,
            survey_question_group_score: None,
            survey_promoter_score: None,
            survey_form_context_ids: None,
            conversation_ids: None,
            sip_call_ids: None,
            is_ended: None,
            is_surveyed: None,
            survey_scores: None,
            promoter_scores: None,
            is_campaign: None,
            survey_statuses: None,
            conversation_properties: None,
            is_blind_transferred: None,
            is_consulted: None,
            is_consult_transferred: None,
            remote_participants: None,
            flow_ids: None,
            flow_outcome_ids: None,
            flow_outcome_values: None,
            flow_destination_types: None,
            flow_disconnect_reasons: None,
            flow_types: None,
            flow_entry_types: None,
            flow_entry_reasons: None,
            flow_versions: None,
            group_ids: None,
            has_journey_customer_id: None,
            has_journey_action_map_id: None,
            has_journey_visit_id: None,
            has_media: None,
            role_ids: None,
            reports_tos: None,
            location_ids: None,
            flow_out_types: None,
            provider_list: None,
            callback_number_list: None,
            callback_interval: None,
            used_routing_types: None,
            requested_routing_types: None,
            has_agent_assist_id: None,
            transcripts: None,
            transcript_languages: None,
            participant_purposes: None,
            show_first_queue: None,
            team_ids: None,
            filter_users_by_team_ids: None,
            journey_action_map_ids: None,
            journey_outcome_ids: None,
            journey_segment_ids: None,
            journey_action_map_types: None,
            development_role_list: None,
            development_type_list: None,
            development_status_list: None,
            development_module_ids: None,
            development_activity_overdue: None,
            customer_sentiment_score: None,
            customer_sentiment_trend: None,
            flow_transfer_targets: None,
            development_name: None,
            topic_ids: None,
            external_tags: None,
            is_not_responding: None,
            is_authenticated: None,
            bot_ids: None,
            bot_versions: None,
            bot_message_types: None,
            bot_provider_list: None,
            bot_product_list: None,
            bot_recognition_failure_reason_list: None,
            bot_intent_list: None,
            bot_final_intent_list: None,
            bot_slot_list: None,
            bot_result_list: None,
            blocked_reasons: None,
            is_recorded: None,
            has_evaluation: None,
            has_scored_evaluation: None,
            email_delivery_status_list: None,
            is_agent_owned_callback: None,
            agent_callback_owner_ids: None,
            transcript_topics: None,
            journey_frequency_cap_reasons: None,
            journey_blocking_action_map_ids: None,
            journey_action_target_ids: None,
            journey_blocking_schedule_group_ids: None,
            journey_blocking_emergency_schedule_group_ids: None,
            journey_url_equal_conditions: None,
            journey_url_not_equal_conditions: None,
            journey_url_starts_with_conditions: None,
            journey_url_ends_with_conditions: None,
            journey_url_contains_any_conditions: None,
            journey_url_not_contains_any_conditions: None,
            journey_url_contains_all_conditions: None,
            journey_url_not_contains_all_conditions: None,
            flow_milestone_ids: None,
            is_assessment_passed: None,
        }
    }
}

/// The media types are used to filter the view
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MediaTypes {
    #[serde(rename = "callback")]
    Callback,
    #[serde(rename = "chat")]
    Chat,
    #[serde(rename = "cobrowse")]
    Cobrowse,
    #[serde(rename = "email")]
    Email,
    #[serde(rename = "message")]
    Message,
    #[serde(rename = "screenshare")]
    Screenshare,
    #[serde(rename = "unknown")]
    Unknown,
    #[serde(rename = "video")]
    Video,
    #[serde(rename = "voice")]
    Voice,
}

impl Default for MediaTypes {
    fn default() -> MediaTypes {
        Self::Callback
    }
}
/// The directions are used to filter the view
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Directions {
    #[serde(rename = "inbound")]
    Inbound,
    #[serde(rename = "outbound")]
    Outbound,
}

impl Default for Directions {
    fn default() -> Directions {
        Self::Inbound
    }
}
/// The list of orginating directions used to filter the view
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OriginatingDirections {
    #[serde(rename = "inbound")]
    Inbound,
    #[serde(rename = "outbound")]
    Outbound,
}

impl Default for OriginatingDirections {
    fn default() -> OriginatingDirections {
        Self::Inbound
    }
}
/// The message media types used to filter the view
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MessageTypes {
    #[serde(rename = "sms")]
    Sms,
    #[serde(rename = "twitter")]
    Twitter,
    #[serde(rename = "line")]
    Line,
    #[serde(rename = "facebook")]
    Facebook,
    #[serde(rename = "whatsapp")]
    Whatsapp,
    #[serde(rename = "webmessaging")]
    Webmessaging,
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "instagram")]
    Instagram,
}

impl Default for MessageTypes {
    fn default() -> MessageTypes {
        Self::Sms
    }
}
/// A list of outcome values of the flow
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FlowOutcomeValues {
    #[serde(rename = "SUCCESS")]
    SUCCESS,
    #[serde(rename = "FAILURE")]
    FAILURE,
}

impl Default for FlowOutcomeValues {
    fn default() -> FlowOutcomeValues {
        Self::SUCCESS
    }
}
/// The list of destination types of the flow
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FlowDestinationTypes {
    #[serde(rename = "ACD")]
    ACD,
    #[serde(rename = "USER")]
    USER,
    #[serde(rename = "GROUP")]
    GROUP,
    #[serde(rename = "NUMBER")]
    NUMBER,
    #[serde(rename = "FLOW")]
    FLOW,
    #[serde(rename = "SECURE_FLOW")]
    SECUREFLOW,
    #[serde(rename = "ACD_VOICEMAIL")]
    ACDVOICEMAIL,
    #[serde(rename = "USER_VOICEMAIL")]
    USERVOICEMAIL,
    #[serde(rename = "GROUP_VOICEMAIL")]
    GROUPVOICEMAIL,
    #[serde(rename = "RETURN_TO_AGENT")]
    RETURNTOAGENT,
}

impl Default for FlowDestinationTypes {
    fn default() -> FlowDestinationTypes {
        Self::ACD
    }
}
/// The list of reasons for the flow to disconnect
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FlowDisconnectReasons {
    #[serde(rename = "FLOW_DISCONNECT")]
    FLOWDISCONNECT,
    #[serde(rename = "FLOW_ERROR_DISCONNECT")]
    FLOWERRORDISCONNECT,
    #[serde(rename = "DISCONNECT")]
    DISCONNECT,
}

impl Default for FlowDisconnectReasons {
    fn default() -> FlowDisconnectReasons {
        Self::FLOWDISCONNECT
    }
}
/// A list of types of the flow
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FlowTypes {
    #[serde(rename = "bot")]
    Bot,
    #[serde(rename = "commonmodule")]
    Commonmodule,
    #[serde(rename = "inboundcall")]
    Inboundcall,
    #[serde(rename = "inboundchat")]
    Inboundchat,
    #[serde(rename = "inboundemail")]
    Inboundemail,
    #[serde(rename = "inboundshortmessage")]
    Inboundshortmessage,
    #[serde(rename = "inqueuecall")]
    Inqueuecall,
    #[serde(rename = "inqueueshortmessage")]
    Inqueueshortmessage,
    #[serde(rename = "inqueueemail")]
    Inqueueemail,
    #[serde(rename = "outboundcall")]
    Outboundcall,
    #[serde(rename = "securecall")]
    Securecall,
    #[serde(rename = "surveyinvite")]
    Surveyinvite,
    #[serde(rename = "voicemail")]
    Voicemail,
    #[serde(rename = "workflow")]
    Workflow,
    #[serde(rename = "workitem")]
    Workitem,
}

impl Default for FlowTypes {
    fn default() -> FlowTypes {
        Self::Bot
    }
}
/// A list of types of the flow entry
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FlowEntryTypes {
    #[serde(rename = "agent")]
    Agent,
    #[serde(rename = "direct")]
    Direct,
    #[serde(rename = "dnis")]
    Dnis,
    #[serde(rename = "flow")]
    Flow,
    #[serde(rename = "outbound")]
    Outbound,
}

impl Default for FlowEntryTypes {
    fn default() -> FlowEntryTypes {
        Self::Agent
    }
}
/// A list of routing types used
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum UsedRoutingTypes {
    #[serde(rename = "Bullseye")]
    Bullseye,
    #[serde(rename = "Last")]
    Last,
    #[serde(rename = "Manual")]
    Manual,
    #[serde(rename = "Predictive")]
    Predictive,
    #[serde(rename = "Preferred")]
    Preferred,
    #[serde(rename = "Standard")]
    Standard,
}

impl Default for UsedRoutingTypes {
    fn default() -> UsedRoutingTypes {
        Self::Bullseye
    }
}
/// A list of routing types requested
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RequestedRoutingTypes {
    #[serde(rename = "Bullseye")]
    Bullseye,
    #[serde(rename = "Last")]
    Last,
    #[serde(rename = "Manual")]
    Manual,
    #[serde(rename = "Predictive")]
    Predictive,
    #[serde(rename = "Preferred")]
    Preferred,
    #[serde(rename = "Standard")]
    Standard,
}

impl Default for RequestedRoutingTypes {
    fn default() -> RequestedRoutingTypes {
        Self::Bullseye
    }
}
/// A list of participant purpose requested
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ParticipantPurposes {
    #[serde(rename = "internal")]
    Internal,
    #[serde(rename = "external")]
    External,
}

impl Default for ParticipantPurposes {
    fn default() -> ParticipantPurposes {
        Self::Internal
    }
}
/// The journey action map types are used to filter action map data for the associated view
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum JourneyActionMapTypes {
    #[serde(rename = "webchat")]
    Webchat,
    #[serde(rename = "webMessagingOffer")]
    WebMessagingOffer,
    #[serde(rename = "contentOffer")]
    ContentOffer,
    #[serde(rename = "integrationAction")]
    IntegrationAction,
    #[serde(rename = "architectFlow")]
    ArchitectFlow,
    #[serde(rename = "openAction")]
    OpenAction,
}

impl Default for JourneyActionMapTypes {
    fn default() -> JourneyActionMapTypes {
        Self::Webchat
    }
}
/// The list of development roles used to filter agent development view
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DevelopmentRoleList {
    #[serde(rename = "Creator")]
    Creator,
    #[serde(rename = "Facilitator")]
    Facilitator,
    #[serde(rename = "Attendee")]
    Attendee,
}

impl Default for DevelopmentRoleList {
    fn default() -> DevelopmentRoleList {
        Self::Creator
    }
}
/// The list of development types used to filter agent development view
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DevelopmentTypeList {
    #[serde(rename = "Informational")]
    Informational,
    #[serde(rename = "Coaching")]
    Coaching,
    #[serde(rename = "Assessment")]
    Assessment,
    #[serde(rename = "AssessedContent")]
    AssessedContent,
}

impl Default for DevelopmentTypeList {
    fn default() -> DevelopmentTypeList {
        Self::Informational
    }
}
/// The list of development status used to filter agent development view
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DevelopmentStatusList {
    #[serde(rename = "Planned")]
    Planned,
    #[serde(rename = "Scheduled")]
    Scheduled,
    #[serde(rename = "InvalidSchedule")]
    InvalidSchedule,
    #[serde(rename = "InProgress")]
    InProgress,
    #[serde(rename = "Completed")]
    Completed,
}

impl Default for DevelopmentStatusList {
    fn default() -> DevelopmentStatusList {
        Self::Planned
    }
}
/// The list of bot message types used to filter bot views
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum BotMessageTypes {
    #[serde(rename = "Unknown")]
    Unknown,
    #[serde(rename = "Phone")]
    Phone,
    #[serde(rename = "SMS")]
    SMS,
    #[serde(rename = "GenesysChatWidget")]
    GenesysChatWidget,
    #[serde(rename = "FacebookMessenger")]
    FacebookMessenger,
    #[serde(rename = "WeChat")]
    WeChat,
    #[serde(rename = "Whatsapp")]
    Whatsapp,
    #[serde(rename = "AppleBusinessChat")]
    AppleBusinessChat,
    #[serde(rename = "Telegram")]
    Telegram,
    #[serde(rename = "Slack")]
    Slack,
    #[serde(rename = "Signal")]
    Signal,
    #[serde(rename = "Line")]
    Line,
    #[serde(rename = "Discord")]
    Discord,
    #[serde(rename = "TwitterDirectMessage")]
    TwitterDirectMessage,
    #[serde(rename = "Other")]
    Other,
}

impl Default for BotMessageTypes {
    fn default() -> BotMessageTypes {
        Self::Unknown
    }
}
/// The list of bot providers used to filter bot views
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum BotProviderList {
    #[serde(rename = "Unknown")]
    Unknown,
    #[serde(rename = "Genesys")]
    Genesys,
    #[serde(rename = "Amazon")]
    Amazon,
    #[serde(rename = "Google")]
    Google,
    #[serde(rename = "Nuance")]
    Nuance,
}

impl Default for BotProviderList {
    fn default() -> BotProviderList {
        Self::Unknown
    }
}
/// The list of bot products used to filter bot views
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum BotProductList {
    #[serde(rename = "Unknown")]
    Unknown,
    #[serde(rename = "GenesysDialogEngine")]
    GenesysDialogEngine,
    #[serde(rename = "AmazonLex")]
    AmazonLex,
    #[serde(rename = "GoogleDialogFlow")]
    GoogleDialogFlow,
    #[serde(rename = "GoogleDialogFlowResell")]
    GoogleDialogFlowResell,
    #[serde(rename = "GenesysBotFlow")]
    GenesysBotFlow,
    #[serde(rename = "NuanceDlg")]
    NuanceDlg,
    #[serde(rename = "GoogleDialogFlowCx")]
    GoogleDialogFlowCx,
    #[serde(rename = "GenesysByob")]
    GenesysByob,
}

impl Default for BotProductList {
    fn default() -> BotProductList {
        Self::Unknown
    }
}
/// The list of bot recognition failure reasons used to filter bot views
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum BotRecognitionFailureReasonList {
    #[serde(rename = "Unknown")]
    Unknown,
    #[serde(rename = "NoInputCollection")]
    NoInputCollection,
    #[serde(rename = "NoInputConfirmation")]
    NoInputConfirmation,
    #[serde(rename = "NoMatchCollection")]
    NoMatchCollection,
    #[serde(rename = "NoMatchConfirmation")]
    NoMatchConfirmation,
    #[serde(rename = "MaxWrongMatch")]
    MaxWrongMatch,
}

impl Default for BotRecognitionFailureReasonList {
    fn default() -> BotRecognitionFailureReasonList {
        Self::Unknown
    }
}
/// The list of bot results used to filter bot views
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum BotResultList {
    #[serde(rename = "Unknown")]
    Unknown,
    #[serde(rename = "ExitRequestedByUser")]
    ExitRequestedByUser,
    #[serde(rename = "ExitRequestedByBot")]
    ExitRequestedByBot,
    #[serde(rename = "ExitError")]
    ExitError,
    #[serde(rename = "ExitRecognitionFailure")]
    ExitRecognitionFailure,
    #[serde(rename = "DisconnectRequestedByUser")]
    DisconnectRequestedByUser,
    #[serde(rename = "DisconnectRequestedByBot")]
    DisconnectRequestedByBot,
    #[serde(rename = "DisconnectSessionExpired")]
    DisconnectSessionExpired,
    #[serde(rename = "DisconnectError")]
    DisconnectError,
    #[serde(rename = "DisconnectRecognitionFailure")]
    DisconnectRecognitionFailure,
}

impl Default for BotResultList {
    fn default() -> BotResultList {
        Self::Unknown
    }
}
/// The list of blocked reason used to filter action map constraints views
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum BlockedReasons {
    #[serde(rename = "PageUrlConditionsNotMatching")]
    PageUrlConditionsNotMatching,
    #[serde(rename = "AlreadyExistingOffer")]
    AlreadyExistingOffer,
    #[serde(rename = "TriggerDateInFuture")]
    TriggerDateInFuture,
    #[serde(rename = "MultipleSimultaneousOffers")]
    MultipleSimultaneousOffers,
    #[serde(rename = "FrequencyCapping")]
    FrequencyCapping,
    #[serde(rename = "OfferedOutsideSchedule")]
    OfferedOutsideSchedule,
    #[serde(rename = "ServiceLevelThrottling")]
    ServiceLevelThrottling,
    #[serde(rename = "NoAvailableAgents")]
    NoAvailableAgents,
}

impl Default for BlockedReasons {
    fn default() -> BlockedReasons {
        Self::PageUrlConditionsNotMatching
    }
}
/// The list of email delivery statuses used to filter views
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EmailDeliveryStatusList {
    #[serde(rename = "DeliveryFailed")]
    DeliveryFailed,
    #[serde(rename = "DeliverySuccess")]
    DeliverySuccess,
    #[serde(rename = "Failed")]
    Failed,
    #[serde(rename = "Queued")]
    Queued,
    #[serde(rename = "Read")]
    Read,
    #[serde(rename = "Received")]
    Received,
    #[serde(rename = "Sent")]
    Sent,
}

impl Default for EmailDeliveryStatusList {
    fn default() -> EmailDeliveryStatusList {
        Self::DeliveryFailed
    }
}

