/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */

/// CoachingAppointmentResponse : Coaching appointment response



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct CoachingAppointmentResponse {
    /// The globally unique identifier for the object.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The name of coaching appointment
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The description of coaching appointment
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The date/time the coaching appointment starts. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "dateStart", skip_serializing_if = "Option::is_none")]
    pub date_start: Option<String>,
    /// The duration of coaching appointment in minutes
    #[serde(rename = "lengthInMinutes", skip_serializing_if = "Option::is_none")]
    pub length_in_minutes: Option<i32>,
    /// The status of coaching appointment
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    #[serde(rename = "facilitator", skip_serializing_if = "Option::is_none")]
    pub facilitator: Option<Box<crate::models::UserReference>>,
    /// The list of attendees attending the coaching
    #[serde(rename = "attendees", skip_serializing_if = "Option::is_none")]
    pub attendees: Option<Vec<crate::models::UserReference>>,
    #[serde(rename = "createdBy", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<Box<crate::models::UserReference>>,
    /// The date/time the coaching appointment was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "dateCreated", skip_serializing_if = "Option::is_none")]
    pub date_created: Option<String>,
    #[serde(rename = "modifiedBy", skip_serializing_if = "Option::is_none")]
    pub modified_by: Option<Box<crate::models::UserReference>>,
    /// The date/time the coaching appointment was last modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "dateModified", skip_serializing_if = "Option::is_none")]
    pub date_modified: Option<String>,
    /// The list of conversations associated with coaching appointment.
    #[serde(rename = "conversations", skip_serializing_if = "Option::is_none")]
    pub conversations: Option<Vec<crate::models::ConversationReference>>,
    /// The list of documents associated with coaching appointment.
    #[serde(rename = "documents", skip_serializing_if = "Option::is_none")]
    pub documents: Option<Vec<crate::models::DocumentReference>>,
    /// Whether the appointment is overdue.
    #[serde(rename = "isOverdue", skip_serializing_if = "Option::is_none")]
    pub is_overdue: Option<bool>,
    #[serde(rename = "wfmSchedule", skip_serializing_if = "Option::is_none")]
    pub wfm_schedule: Option<Box<crate::models::WfmScheduleReference>>,
    /// The date/time the coaching appointment was set to completed status. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "dateCompleted", skip_serializing_if = "Option::is_none")]
    pub date_completed: Option<String>,
    /// The list of external links related to the appointment
    #[serde(rename = "externalLinks", skip_serializing_if = "Option::is_none")]
    pub external_links: Option<Vec<String>>,
    /// The URI for this object
    #[serde(rename = "selfUri", skip_serializing_if = "Option::is_none")]
    pub self_uri: Option<String>,
}

impl CoachingAppointmentResponse {
    /// Coaching appointment response
    pub fn new() -> CoachingAppointmentResponse {
        CoachingAppointmentResponse {
            id: None,
            name: None,
            description: None,
            date_start: None,
            length_in_minutes: None,
            status: None,
            facilitator: None,
            attendees: None,
            created_by: None,
            date_created: None,
            modified_by: None,
            date_modified: None,
            conversations: None,
            documents: None,
            is_overdue: None,
            wfm_schedule: None,
            date_completed: None,
            external_links: None,
            self_uri: None,
        }
    }
}

/// The status of coaching appointment
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "Scheduled")]
    Scheduled,
    #[serde(rename = "InProgress")]
    InProgress,
    #[serde(rename = "Completed")]
    Completed,
    #[serde(rename = "InvalidSchedule")]
    InvalidSchedule,
}

impl Default for Status {
    fn default() -> Status {
        Self::Scheduled
    }
}

