/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Contact {
    /// Email address or phone number for this contact type
    #[serde(rename = "address", skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    /// Formatted version of the address property
    #[serde(rename = "display", skip_serializing_if = "Option::is_none")]
    pub display: Option<String>,
    #[serde(rename = "mediaType", skip_serializing_if = "Option::is_none")]
    pub media_type: Option<MediaType>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<Type>,
    /// Use internal extension instead of address. Mutually exclusive with the address field.
    #[serde(rename = "extension", skip_serializing_if = "Option::is_none")]
    pub extension: Option<String>,
    #[serde(rename = "countryCode", skip_serializing_if = "Option::is_none")]
    pub country_code: Option<String>,
    /// Integration tag value if this number is associated with an external integration.
    #[serde(rename = "integration", skip_serializing_if = "Option::is_none")]
    pub integration: Option<String>,
}

impl Contact {
    pub fn new() -> Contact {
        Contact {
            address: None,
            display: None,
            media_type: None,
            _type: None,
            extension: None,
            country_code: None,
            integration: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MediaType {
    #[serde(rename = "PHONE")]
    PHONE,
    #[serde(rename = "EMAIL")]
    EMAIL,
    #[serde(rename = "SMS")]
    SMS,
}

impl Default for MediaType {
    fn default() -> MediaType {
        Self::PHONE
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "PRIMARY")]
    PRIMARY,
    #[serde(rename = "WORK")]
    WORK,
    #[serde(rename = "WORK2")]
    WORK2,
    #[serde(rename = "WORK3")]
    WORK3,
    #[serde(rename = "WORK4")]
    WORK4,
    #[serde(rename = "HOME")]
    HOME,
    #[serde(rename = "MOBILE")]
    MOBILE,
    #[serde(rename = "MAIN")]
    MAIN,
    #[serde(rename = "OTHER")]
    OTHER,
}

impl Default for Type {
    fn default() -> Type {
        Self::PRIMARY
    }
}

