/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */

/// WebMessagingMessage : A web messaging message



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct WebMessagingMessage {
    /// Unique ID of the message. This ID is generated by Messaging Platform. Message receipts will have the same ID as the message they reference.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "channel", skip_serializing_if = "Option::is_none")]
    pub channel: Option<Box<crate::models::WebMessagingChannel>>,
    /// Message type.
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<Type>,
    /// Message text.
    #[serde(rename = "text", skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
    /// List of content elements.
    #[serde(rename = "content", skip_serializing_if = "Option::is_none")]
    pub content: Option<Vec<crate::models::WebMessagingContent>>,
    /// List of event elements.
    #[serde(rename = "events", skip_serializing_if = "Option::is_none")]
    pub events: Option<Vec<crate::models::WebMessagingEvent>>,
    /// The direction of the message.  Direction is always from the perspective of the Genesys Cloud platform.  An Inbound message is one sent from a guest to the Genesys Cloud Platform.  An Outbound message is one sent from the Genesys Cloud Platform to a guest.
    #[serde(rename = "direction", skip_serializing_if = "Option::is_none")]
    pub direction: Option<Direction>,
    /// Specifies if this message was sent by a human agent or bot. The platform may use this to apply appropriate provider policies.
    #[serde(rename = "originatingEntity", skip_serializing_if = "Option::is_none")]
    pub originating_entity: Option<OriginatingEntity>,
}

impl WebMessagingMessage {
    /// A web messaging message
    pub fn new() -> WebMessagingMessage {
        WebMessagingMessage {
            id: None,
            channel: None,
            _type: None,
            text: None,
            content: None,
            events: None,
            direction: None,
            originating_entity: None,
        }
    }
}

/// Message type.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "Text")]
    Text,
    #[serde(rename = "Structured")]
    Structured,
    #[serde(rename = "Receipt")]
    Receipt,
    #[serde(rename = "Event")]
    Event,
}

impl Default for Type {
    fn default() -> Type {
        Self::Text
    }
}
/// The direction of the message.  Direction is always from the perspective of the Genesys Cloud platform.  An Inbound message is one sent from a guest to the Genesys Cloud Platform.  An Outbound message is one sent from the Genesys Cloud Platform to a guest.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Direction {
    #[serde(rename = "Inbound")]
    Inbound,
    #[serde(rename = "Outbound")]
    Outbound,
}

impl Default for Direction {
    fn default() -> Direction {
        Self::Inbound
    }
}
/// Specifies if this message was sent by a human agent or bot. The platform may use this to apply appropriate provider policies.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OriginatingEntity {
    #[serde(rename = "Human")]
    Human,
    #[serde(rename = "Bot")]
    Bot,
}

impl Default for OriginatingEntity {
    fn default() -> OriginatingEntity {
        Self::Human
    }
}

