/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct KpiResult {
    /// Absolute metric (in which the KPI is based) total for the interactions handled by predictive routing (GPR was on)
    #[serde(rename = "kpiTotalOn", skip_serializing_if = "Option::is_none")]
    pub kpi_total_on: Option<i64>,
    /// Absolute metric (in which the KPI is based) total for the interactions not routed by predictive routing (GPR was off)
    #[serde(rename = "kpiTotalOff", skip_serializing_if = "Option::is_none")]
    pub kpi_total_off: Option<i64>,
    /// Total interactions handled by predictive routing (GPR was on)
    #[serde(rename = "interactionCountOn", skip_serializing_if = "Option::is_none")]
    pub interaction_count_on: Option<i64>,
    /// Total interactions not routed by predictive routing (GPR was off)
    #[serde(rename = "interactionCountOff", skip_serializing_if = "Option::is_none")]
    pub interaction_count_off: Option<i64>,
    /// Media type used for the KPI
    #[serde(rename = "mediaType", skip_serializing_if = "Option::is_none")]
    pub media_type: Option<MediaType>,
}

impl KpiResult {
    pub fn new() -> KpiResult {
        KpiResult {
            kpi_total_on: None,
            kpi_total_off: None,
            interaction_count_on: None,
            interaction_count_off: None,
            media_type: None,
        }
    }
}

/// Media type used for the KPI
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MediaType {
    #[serde(rename = "voice")]
    Voice,
    #[serde(rename = "email")]
    Email,
    #[serde(rename = "message")]
    Message,
}

impl Default for MediaType {
    fn default() -> MediaType {
        Self::Voice
    }
}

