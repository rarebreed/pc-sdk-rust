/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct MessagingCampaign {
    /// The globally unique identifier for the object.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Creation time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "dateCreated", skip_serializing_if = "Option::is_none")]
    pub date_created: Option<String>,
    /// Last modified time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "dateModified", skip_serializing_if = "Option::is_none")]
    pub date_modified: Option<String>,
    /// Required for updates, must match the version number of the most recent update
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<i32>,
    #[serde(rename = "division", skip_serializing_if = "Option::is_none")]
    pub division: Option<Box<crate::models::DomainEntityRef>>,
    /// The current status of the messaging campaign. A messaging campaign may be turned 'on' or 'off'.
    #[serde(rename = "campaignStatus", skip_serializing_if = "Option::is_none")]
    pub campaign_status: Option<CampaignStatus>,
    #[serde(rename = "callableTimeSet", skip_serializing_if = "Option::is_none")]
    pub callable_time_set: Option<Box<crate::models::DomainEntityRef>>,
    #[serde(rename = "contactList")]
    pub contact_list: Box<crate::models::DomainEntityRef>,
    /// The dnc lists to check before sending a message for this messaging campaign.
    #[serde(rename = "dncLists", skip_serializing_if = "Option::is_none")]
    pub dnc_lists: Option<Vec<crate::models::DomainEntityRef>>,
    /// Whether this messaging campaign is always running
    #[serde(rename = "alwaysRunning", skip_serializing_if = "Option::is_none")]
    pub always_running: Option<bool>,
    /// The order in which to sort contacts for dialing, based on up to four columns.
    #[serde(rename = "contactSorts", skip_serializing_if = "Option::is_none")]
    pub contact_sorts: Option<Vec<crate::models::ContactSort>>,
    /// How many messages this messaging campaign will send per minute.
    #[serde(rename = "messagesPerMinute")]
    pub messages_per_minute: i32,
    /// The contact list filter to check before sending a message for this messaging campaign.
    #[serde(rename = "contactListFilters", skip_serializing_if = "Option::is_none")]
    pub contact_list_filters: Option<Vec<crate::models::DomainEntityRef>>,
    /// A list of current error conditions associated with this messaging campaign.
    #[serde(rename = "errors", skip_serializing_if = "Option::is_none")]
    pub errors: Option<Vec<crate::models::RestErrorDetail>>,
    #[serde(rename = "smsConfig", skip_serializing_if = "Option::is_none")]
    pub sms_config: Option<Box<crate::models::SmsConfig>>,
    /// The URI for this object
    #[serde(rename = "selfUri", skip_serializing_if = "Option::is_none")]
    pub self_uri: Option<String>,
}

impl MessagingCampaign {
    pub fn new(contact_list: crate::models::DomainEntityRef, messages_per_minute: i32) -> MessagingCampaign {
        MessagingCampaign {
            id: None,
            name: None,
            date_created: None,
            date_modified: None,
            version: None,
            division: None,
            campaign_status: None,
            callable_time_set: None,
            contact_list: Box::new(contact_list),
            dnc_lists: None,
            always_running: None,
            contact_sorts: None,
            messages_per_minute,
            contact_list_filters: None,
            errors: None,
            sms_config: None,
            self_uri: None,
        }
    }
}

/// The current status of the messaging campaign. A messaging campaign may be turned 'on' or 'off'.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CampaignStatus {
    #[serde(rename = "on")]
    On,
    #[serde(rename = "stopping")]
    Stopping,
    #[serde(rename = "off")]
    Off,
    #[serde(rename = "complete")]
    Complete,
    #[serde(rename = "invalid")]
    Invalid,
}

impl Default for CampaignStatus {
    fn default() -> CampaignStatus {
        Self::On
    }
}

