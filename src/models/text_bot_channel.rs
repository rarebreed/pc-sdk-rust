/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */

/// TextBotChannel : Channel information relevant to a bot flow.


use std::collections::HashSet;

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct TextBotChannel {
    /// The name of the channel.
    #[serde(rename = "name")]
    pub name: Name,
    /// The input modes for the channel.
    #[serde(rename = "inputModes")]
    pub input_modes: std::collections::HashSet<InputModes>,
    /// The output modes for the channel.
    #[serde(rename = "outputModes")]
    pub output_modes: std::collections::HashSet<OutputModes>,
    #[serde(rename = "userAgent")]
    pub user_agent: Box<crate::models::TextBotUserAgent>,
}

impl TextBotChannel {
    /// Channel information relevant to a bot flow.
    pub fn new(name: Name, input_modes: HashSet<InputModes>, output_modes: HashSet<OutputModes>, user_agent: crate::models::TextBotUserAgent) -> TextBotChannel {
        TextBotChannel {
            name,
            input_modes,
            output_modes,
            user_agent: Box::new(user_agent),
        }
    }
}

/// The name of the channel.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Name {
    #[serde(rename = "Chat")]
    Chat,
    #[serde(rename = "Call")]
    Call,
    #[serde(rename = "Messaging")]
    Messaging,
}

impl Default for Name {
    fn default() -> Name {
        Self::Chat
    }
}
/// The input modes for the channel.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum InputModes {
    #[serde(rename = "Text")]
    Text,
}

impl Default for InputModes {
    fn default() -> InputModes {
        Self::Text
    }
}
/// The output modes for the channel.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OutputModes {
    #[serde(rename = "Text")]
    Text,
}

impl Default for OutputModes {
    fn default() -> OutputModes {
        Self::Text
    }
}

