/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Condition {
    /// The type of the condition.
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<Type>,
    /// If true, inverts the result of evaluating this Condition. Default is false.
    #[serde(rename = "inverted", skip_serializing_if = "Option::is_none")]
    pub inverted: Option<bool>,
    /// An attribute name associated with this Condition. Required for a contactAttributeCondition.
    #[serde(rename = "attributeName", skip_serializing_if = "Option::is_none")]
    pub attribute_name: Option<String>,
    /// A value associated with this Condition. This could be text, a number, or a relative time. Not used for a DataActionCondition.
    #[serde(rename = "value", skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    /// The type of the value associated with this Condition. Not used for a DataActionCondition.
    #[serde(rename = "valueType", skip_serializing_if = "Option::is_none")]
    pub value_type: Option<ValueType>,
    /// An operation with which to evaluate the Condition. Not used for a DataActionCondition.
    #[serde(rename = "operator", skip_serializing_if = "Option::is_none")]
    pub operator: Option<Operator>,
    /// List of wrap-up code identifiers. Required for a wrapupCondition.
    #[serde(rename = "codes", skip_serializing_if = "Option::is_none")]
    pub codes: Option<Vec<String>>,
    /// A value associated with the property type of this Condition. Required for a contactPropertyCondition.
    #[serde(rename = "property", skip_serializing_if = "Option::is_none")]
    pub property: Option<String>,
    /// The type of the property associated with this Condition. Required for a contactPropertyCondition.
    #[serde(rename = "propertyType", skip_serializing_if = "Option::is_none")]
    pub property_type: Option<PropertyType>,
}

impl Condition {
    pub fn new() -> Condition {
        Condition {
            _type: None,
            inverted: None,
            attribute_name: None,
            value: None,
            value_type: None,
            operator: None,
            codes: None,
            property: None,
            property_type: None,
        }
    }
}

/// The type of the condition.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "wrapupCondition")]
    WrapupCondition,
    #[serde(rename = "contactAttributeCondition")]
    ContactAttributeCondition,
    #[serde(rename = "phoneNumberCondition")]
    PhoneNumberCondition,
    #[serde(rename = "phoneNumberTypeCondition")]
    PhoneNumberTypeCondition,
    #[serde(rename = "callAnalysisCondition")]
    CallAnalysisCondition,
    #[serde(rename = "contactPropertyCondition")]
    ContactPropertyCondition,
    #[serde(rename = "dataActionCondition")]
    DataActionCondition,
}

impl Default for Type {
    fn default() -> Type {
        Self::WrapupCondition
    }
}
/// The type of the value associated with this Condition. Not used for a DataActionCondition.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ValueType {
    #[serde(rename = "STRING")]
    STRING,
    #[serde(rename = "NUMERIC")]
    NUMERIC,
    #[serde(rename = "DATETIME")]
    DATETIME,
    #[serde(rename = "PERIOD")]
    PERIOD,
}

impl Default for ValueType {
    fn default() -> ValueType {
        Self::STRING
    }
}
/// An operation with which to evaluate the Condition. Not used for a DataActionCondition.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Operator {
    #[serde(rename = "EQUALS")]
    EQUALS,
    #[serde(rename = "LESS_THAN")]
    LESSTHAN,
    #[serde(rename = "LESS_THAN_EQUALS")]
    LESSTHANEQUALS,
    #[serde(rename = "GREATER_THAN")]
    GREATERTHAN,
    #[serde(rename = "GREATER_THAN_EQUALS")]
    GREATERTHANEQUALS,
    #[serde(rename = "CONTAINS")]
    CONTAINS,
    #[serde(rename = "BEGINS_WITH")]
    BEGINSWITH,
    #[serde(rename = "ENDS_WITH")]
    ENDSWITH,
    #[serde(rename = "BEFORE")]
    BEFORE,
    #[serde(rename = "AFTER")]
    AFTER,
    #[serde(rename = "IN")]
    _IN,
}

impl Default for Operator {
    fn default() -> Operator {
        Self::EQUALS
    }
}
/// The type of the property associated with this Condition. Required for a contactPropertyCondition.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PropertyType {
    #[serde(rename = "LAST_ATTEMPT_BY_COLUMN")]
    ATTEMPTBYCOLUMN,
    #[serde(rename = "LAST_ATTEMPT_OVERALL")]
    ATTEMPTOVERALL,
    #[serde(rename = "LAST_WRAPUP_BY_COLUMN")]
    WRAPUPBYCOLUMN,
    #[serde(rename = "LAST_WRAPUP_OVERALL")]
    WRAPUPOVERALL,
}

impl Default for PropertyType {
    fn default() -> PropertyType {
        Self::ATTEMPTBYCOLUMN
    }
}

