/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct FreeSeatingConfiguration {
    /// The FreeSeatingState for FreeSeatingConfiguration. Can be ON, OFF, or PARTIAL. ON meaning disassociate the user after the ttl expires, OFF meaning never disassociate the user, and PARTIAL meaning only disassociate when a user explicitly clicks log out.
    #[serde(rename = "freeSeatingState", skip_serializing_if = "Option::is_none")]
    pub free_seating_state: Option<FreeSeatingState>,
    /// The amount of time in minutes until an offline user is disassociated from their station
    #[serde(rename = "ttlMinutes", skip_serializing_if = "Option::is_none")]
    pub ttl_minutes: Option<i32>,
}

impl FreeSeatingConfiguration {
    pub fn new() -> FreeSeatingConfiguration {
        FreeSeatingConfiguration {
            free_seating_state: None,
            ttl_minutes: None,
        }
    }
}

/// The FreeSeatingState for FreeSeatingConfiguration. Can be ON, OFF, or PARTIAL. ON meaning disassociate the user after the ttl expires, OFF meaning never disassociate the user, and PARTIAL meaning only disassociate when a user explicitly clicks log out.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FreeSeatingState {
    #[serde(rename = "ON")]
    ON,
    #[serde(rename = "OFF")]
    OFF,
    #[serde(rename = "PARTIAL")]
    PARTIAL,
}

impl Default for FreeSeatingState {
    fn default() -> FreeSeatingState {
        Self::ON
    }
}

