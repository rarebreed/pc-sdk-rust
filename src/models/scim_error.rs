/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */

/// ScimError : Defines a SCIM error.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ScimError {
    /// The list of schemas for the SCIM error.
    #[serde(rename = "schemas", skip_serializing_if = "Option::is_none")]
    pub schemas: Option<Vec<String>>,
    /// The HTTP status code returned for the SCIM error.
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    /// The type of SCIM error when httpStatus is a \"400\" error.
    #[serde(rename = "scimType", skip_serializing_if = "Option::is_none")]
    pub scim_type: Option<ScimType>,
    /// The detailed description of the SCIM error.
    #[serde(rename = "detail", skip_serializing_if = "Option::is_none")]
    pub detail: Option<String>,
}

impl ScimError {
    /// Defines a SCIM error.
    pub fn new() -> ScimError {
        ScimError {
            schemas: None,
            status: None,
            scim_type: None,
            detail: None,
        }
    }
}

/// The type of SCIM error when httpStatus is a \"400\" error.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ScimType {
    #[serde(rename = "invalidFilter")]
    InvalidFilter,
    #[serde(rename = "tooMany")]
    TooMany,
    #[serde(rename = "uniqueness")]
    Uniqueness,
    #[serde(rename = "mutability")]
    Mutability,
    #[serde(rename = "invalidSyntax")]
    InvalidSyntax,
    #[serde(rename = "invalidPath")]
    InvalidPath,
    #[serde(rename = "noTarget")]
    NoTarget,
    #[serde(rename = "invalidValue")]
    InvalidValue,
    #[serde(rename = "invalidVers")]
    InvalidVers,
    #[serde(rename = "sensitive")]
    Sensitive,
}

impl Default for ScimType {
    fn default() -> ScimType {
        Self::InvalidFilter
    }
}

