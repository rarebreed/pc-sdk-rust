/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct JourneySegment {
    /// The globally unique identifier for the object.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Whether or not the segment is active.
    #[serde(rename = "isActive", skip_serializing_if = "Option::is_none")]
    pub is_active: Option<bool>,
    /// The display name of the segment.
    #[serde(rename = "displayName")]
    pub display_name: String,
    /// The version of the segment.
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<i32>,
    /// A description of the segment.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The hexadecimal color value of the segment.
    #[serde(rename = "color", skip_serializing_if = "Option::is_none")]
    pub color: Option<String>,
    /// The target entity that a segment applies to.
    #[serde(rename = "scope", skip_serializing_if = "Option::is_none")]
    pub scope: Option<Scope>,
    /// Whether or not the segment should be displayed to agent/supervisor users.
    #[serde(rename = "shouldDisplayToAgent", skip_serializing_if = "Option::is_none")]
    pub should_display_to_agent: Option<bool>,
    #[serde(rename = "context", skip_serializing_if = "Option::is_none")]
    pub context: Option<Box<crate::models::Context>>,
    #[serde(rename = "journey", skip_serializing_if = "Option::is_none")]
    pub journey: Option<Box<crate::models::Journey>>,
    #[serde(rename = "externalSegment", skip_serializing_if = "Option::is_none")]
    pub external_segment: Option<Box<crate::models::ExternalSegment>>,
    /// Time, in days, from when the segment is assigned until it is automatically unassigned.
    #[serde(rename = "assignmentExpirationDays", skip_serializing_if = "Option::is_none")]
    pub assignment_expiration_days: Option<i32>,
    /// The URI for this object
    #[serde(rename = "selfUri", skip_serializing_if = "Option::is_none")]
    pub self_uri: Option<String>,
    /// Timestamp indicating when the segment was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "createdDate", skip_serializing_if = "Option::is_none")]
    pub created_date: Option<String>,
    /// Timestamp indicating when the the segment was last updated. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "modifiedDate", skip_serializing_if = "Option::is_none")]
    pub modified_date: Option<String>,
}

impl JourneySegment {
    pub fn new(display_name: String) -> JourneySegment {
        JourneySegment {
            id: None,
            is_active: None,
            display_name,
            version: None,
            description: None,
            color: None,
            scope: None,
            should_display_to_agent: None,
            context: None,
            journey: None,
            external_segment: None,
            assignment_expiration_days: None,
            self_uri: None,
            created_date: None,
            modified_date: None,
        }
    }
}

/// The target entity that a segment applies to.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Scope {
    #[serde(rename = "Session")]
    Session,
    #[serde(rename = "Customer")]
    Customer,
}

impl Default for Scope {
    fn default() -> Scope {
        Self::Session
    }
}

