/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct AnalyticsQueryAggregation {
    /// Optional type, can usually be inferred
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<Type>,
    /// For use with termFrequency aggregations
    #[serde(rename = "dimension", skip_serializing_if = "Option::is_none")]
    pub dimension: Option<String>,
    /// For use with numericRange aggregations
    #[serde(rename = "metric", skip_serializing_if = "Option::is_none")]
    pub metric: Option<String>,
    /// For use with termFrequency aggregations
    #[serde(rename = "size", skip_serializing_if = "Option::is_none")]
    pub size: Option<i32>,
    /// For use with numericRange aggregations
    #[serde(rename = "ranges", skip_serializing_if = "Option::is_none")]
    pub ranges: Option<Vec<crate::models::AggregationRange>>,
}

impl AnalyticsQueryAggregation {
    pub fn new() -> AnalyticsQueryAggregation {
        AnalyticsQueryAggregation {
            _type: None,
            dimension: None,
            metric: None,
            size: None,
            ranges: None,
        }
    }
}

/// Optional type, can usually be inferred
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "termFrequency")]
    TermFrequency,
    #[serde(rename = "numericRange")]
    NumericRange,
}

impl Default for Type {
    fn default() -> Type {
        Self::TermFrequency
    }
}

