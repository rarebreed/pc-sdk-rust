/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct HistoricalAdherenceQueryResult {
    /// The ID of the user for whom the adherence is queried
    #[serde(rename = "userId", skip_serializing_if = "Option::is_none")]
    pub user_id: Option<String>,
    /// Beginning of the date range that was queried, in ISO-8601 format
    #[serde(rename = "startDate", skip_serializing_if = "Option::is_none")]
    pub start_date: Option<String>,
    /// End of the date range that was queried, in ISO-8601 format. If it was not set, end date will be set to the queried time
    #[serde(rename = "endDate", skip_serializing_if = "Option::is_none")]
    pub end_date: Option<String>,
    /// Adherence percentage for this user, in the scale of 0 - 100
    #[serde(rename = "adherencePercentage", skip_serializing_if = "Option::is_none")]
    pub adherence_percentage: Option<f64>,
    /// Conformance percentage for this user, in the scale of 0 - 100. Conformance percentage can be greater than 100 when the actual on queue time is greater than the scheduled on queue time for the same period.
    #[serde(rename = "conformancePercentage", skip_serializing_if = "Option::is_none")]
    pub conformance_percentage: Option<f64>,
    /// The impact of the current adherence state for this user
    #[serde(rename = "impact", skip_serializing_if = "Option::is_none")]
    pub impact: Option<Impact>,
    /// List of adherence exceptions for this user
    #[serde(rename = "exceptionInfo", skip_serializing_if = "Option::is_none")]
    pub exception_info: Option<Vec<crate::models::HistoricalAdherenceExceptionInfo>>,
    /// Adherence and conformance metrics for days in query range
    #[serde(rename = "dayMetrics", skip_serializing_if = "Option::is_none")]
    pub day_metrics: Option<Vec<crate::models::HistoricalAdherenceDayMetrics>>,
    /// List of actual activity with offset for this user
    #[serde(rename = "actuals", skip_serializing_if = "Option::is_none")]
    pub actuals: Option<Vec<crate::models::HistoricalAdherenceActuals>>,
}

impl HistoricalAdherenceQueryResult {
    pub fn new() -> HistoricalAdherenceQueryResult {
        HistoricalAdherenceQueryResult {
            user_id: None,
            start_date: None,
            end_date: None,
            adherence_percentage: None,
            conformance_percentage: None,
            impact: None,
            exception_info: None,
            day_metrics: None,
            actuals: None,
        }
    }
}

/// The impact of the current adherence state for this user
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Impact {
    #[serde(rename = "Positive")]
    Positive,
    #[serde(rename = "Negative")]
    Negative,
    #[serde(rename = "Neutral")]
    Neutral,
    #[serde(rename = "Unknown")]
    Unknown,
}

impl Default for Impact {
    fn default() -> Impact {
        Self::Positive
    }
}

