/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct CreateUser {
    /// User's full name
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "department", skip_serializing_if = "Option::is_none")]
    pub department: Option<String>,
    /// User's email and username
    #[serde(rename = "email")]
    pub email: String,
    /// Email addresses and phone numbers for this user
    #[serde(rename = "addresses", skip_serializing_if = "Option::is_none")]
    pub addresses: Option<Vec<crate::models::Contact>>,
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    /// User's password
    #[serde(rename = "password")]
    pub password: String,
    /// The division to which this user will belong
    #[serde(rename = "divisionId")]
    pub division_id: String,
    /// Optional initialized state of the user. If not specified, state will be Active if invites are sent, otherwise Inactive.
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<State>,
}

impl CreateUser {
    pub fn new(name: String, email: String, password: String, division_id: String) -> CreateUser {
        CreateUser {
            name,
            department: None,
            email,
            addresses: None,
            title: None,
            password,
            division_id,
            state: None,
        }
    }
}

/// Optional initialized state of the user. If not specified, state will be Active if invites are sent, otherwise Inactive.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "active")]
    Active,
    #[serde(rename = "inactive")]
    Inactive,
    #[serde(rename = "deleted")]
    Deleted,
}

impl Default for State {
    fn default() -> State {
        Self::Active
    }
}

