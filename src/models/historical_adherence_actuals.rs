/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct HistoricalAdherenceActuals {
    /// Activity in which the user is actually engaged
    #[serde(rename = "actualActivityCategory", skip_serializing_if = "Option::is_none")]
    pub actual_activity_category: Option<ActualActivityCategory>,
    /// Actual start offset in seconds relative to query start time
    #[serde(rename = "startOffsetSeconds", skip_serializing_if = "Option::is_none")]
    pub start_offset_seconds: Option<i32>,
    /// Actual end offset in seconds relative to query start time
    #[serde(rename = "endOffsetSeconds", skip_serializing_if = "Option::is_none")]
    pub end_offset_seconds: Option<i32>,
}

impl HistoricalAdherenceActuals {
    pub fn new() -> HistoricalAdherenceActuals {
        HistoricalAdherenceActuals {
            actual_activity_category: None,
            start_offset_seconds: None,
            end_offset_seconds: None,
        }
    }
}

/// Activity in which the user is actually engaged
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ActualActivityCategory {
    #[serde(rename = "OnQueueWork")]
    OnQueueWork,
    #[serde(rename = "Break")]
    _Break,
    #[serde(rename = "Meal")]
    Meal,
    #[serde(rename = "Meeting")]
    Meeting,
    #[serde(rename = "OffQueueWork")]
    OffQueueWork,
    #[serde(rename = "TimeOff")]
    TimeOff,
    #[serde(rename = "Training")]
    Training,
    #[serde(rename = "Unavailable")]
    Unavailable,
    #[serde(rename = "Unscheduled")]
    Unscheduled,
}

impl Default for ActualActivityCategory {
    fn default() -> ActualActivityCategory {
        Self::OnQueueWork
    }
}

