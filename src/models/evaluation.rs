/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Evaluation {
    /// The globally unique identifier for the object.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "conversation", skip_serializing_if = "Option::is_none")]
    pub conversation: Option<Box<crate::models::Conversation>>,
    #[serde(rename = "evaluationForm", skip_serializing_if = "Option::is_none")]
    pub evaluation_form: Option<Box<crate::models::EvaluationForm>>,
    #[serde(rename = "evaluator", skip_serializing_if = "Option::is_none")]
    pub evaluator: Option<Box<crate::models::User>>,
    #[serde(rename = "agent", skip_serializing_if = "Option::is_none")]
    pub agent: Option<Box<crate::models::User>>,
    #[serde(rename = "calibration", skip_serializing_if = "Option::is_none")]
    pub calibration: Option<Box<crate::models::Calibration>>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    #[serde(rename = "answers", skip_serializing_if = "Option::is_none")]
    pub answers: Option<Box<crate::models::EvaluationScoringSet>>,
    #[serde(rename = "agentHasRead", skip_serializing_if = "Option::is_none")]
    pub agent_has_read: Option<bool>,
    /// Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "releaseDate", skip_serializing_if = "Option::is_none")]
    pub release_date: Option<String>,
    /// Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "assignedDate", skip_serializing_if = "Option::is_none")]
    pub assigned_date: Option<String>,
    /// Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "changedDate", skip_serializing_if = "Option::is_none")]
    pub changed_date: Option<String>,
    #[serde(rename = "queue", skip_serializing_if = "Option::is_none")]
    pub queue: Option<Box<crate::models::Queue>>,
    /// List of different communication types used in conversation.
    #[serde(rename = "mediaType", skip_serializing_if = "Option::is_none")]
    pub media_type: Option<Vec<MediaType>>,
    /// Is only true when evaluation is re-scored.
    #[serde(rename = "rescore", skip_serializing_if = "Option::is_none")]
    pub rescore: Option<bool>,
    /// Date of conversation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "conversationDate", skip_serializing_if = "Option::is_none")]
    pub conversation_date: Option<String>,
    /// End date of conversation if it had completed before evaluation creation. Null if created before the conversation ended. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "conversationEndDate", skip_serializing_if = "Option::is_none")]
    pub conversation_end_date: Option<String>,
    /// Signifies if the evaluation is never to be released. This cannot be set true if release date is also set.
    #[serde(rename = "neverRelease", skip_serializing_if = "Option::is_none")]
    pub never_release: Option<bool>,
    /// Only used for email evaluations. Will be null for all other evaluations.
    #[serde(rename = "resourceId", skip_serializing_if = "Option::is_none")]
    pub resource_id: Option<String>,
    /// The type of resource. Only used for email evaluations. Will be null for evaluations on all other resources.
    #[serde(rename = "resourceType", skip_serializing_if = "Option::is_none")]
    pub resource_type: Option<ResourceType>,
    /// Is only true when the user making the request does not have sufficient permissions to see evaluation
    #[serde(rename = "redacted", skip_serializing_if = "Option::is_none")]
    pub redacted: Option<bool>,
    #[serde(rename = "isScoringIndex", skip_serializing_if = "Option::is_none")]
    pub is_scoring_index: Option<bool>,
    /// List of user authorized actions on evaluation. Possible values: edit, editScore, editAgentSignoff, delete, viewAudit
    #[serde(rename = "authorizedActions", skip_serializing_if = "Option::is_none")]
    pub authorized_actions: Option<Vec<String>>,
    /// The URI for this object
    #[serde(rename = "selfUri", skip_serializing_if = "Option::is_none")]
    pub self_uri: Option<String>,
}

impl Evaluation {
    pub fn new() -> Evaluation {
        Evaluation {
            id: None,
            name: None,
            conversation: None,
            evaluation_form: None,
            evaluator: None,
            agent: None,
            calibration: None,
            status: None,
            answers: None,
            agent_has_read: None,
            release_date: None,
            assigned_date: None,
            changed_date: None,
            queue: None,
            media_type: None,
            rescore: None,
            conversation_date: None,
            conversation_end_date: None,
            never_release: None,
            resource_id: None,
            resource_type: None,
            redacted: None,
            is_scoring_index: None,
            authorized_actions: None,
            self_uri: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "PENDING")]
    PENDING,
    #[serde(rename = "INPROGRESS")]
    INPROGRESS,
    #[serde(rename = "FINISHED")]
    FINISHED,
}

impl Default for Status {
    fn default() -> Status {
        Self::PENDING
    }
}
/// List of different communication types used in conversation.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MediaType {
    #[serde(rename = "CALL")]
    CALL,
    #[serde(rename = "CALLBACK")]
    CALLBACK,
    #[serde(rename = "CHAT")]
    CHAT,
    #[serde(rename = "COBROWSE")]
    COBROWSE,
    #[serde(rename = "EMAIL")]
    EMAIL,
    #[serde(rename = "MESSAGE")]
    MESSAGE,
    #[serde(rename = "SOCIAL_EXPRESSION")]
    SOCIALEXPRESSION,
    #[serde(rename = "VIDEO")]
    VIDEO,
    #[serde(rename = "SCREENSHARE")]
    SCREENSHARE,
}

impl Default for MediaType {
    fn default() -> MediaType {
        Self::CALL
    }
}
/// The type of resource. Only used for email evaluations. Will be null for evaluations on all other resources.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ResourceType {
    #[serde(rename = "EMAIL")]
    EMAIL,
}

impl Default for ResourceType {
    fn default() -> ResourceType {
        Self::EMAIL
    }
}

