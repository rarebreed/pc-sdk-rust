/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct BuForecastModification {
    /// The type of the modification
    #[serde(rename = "type")]
    pub _type: Type,
    /// The number of 15 minute intervals past referenceStartDate representing the first interval to which to apply this modification. Must be null if values is populated
    #[serde(rename = "startIntervalIndex", skip_serializing_if = "Option::is_none")]
    pub start_interval_index: Option<i32>,
    /// The number of 15 minute intervals past referenceStartDate representing the last interval to which to apply this modification.  Must be null if values is populated
    #[serde(rename = "endIntervalIndex", skip_serializing_if = "Option::is_none")]
    pub end_interval_index: Option<i32>,
    /// The metric to which this modification applies
    #[serde(rename = "metric")]
    pub metric: Metric,
    /// The legacy metric to which this modification applies if applicable
    #[serde(rename = "legacyMetric", skip_serializing_if = "Option::is_none")]
    pub legacy_metric: Option<LegacyMetric>,
    /// The value of the modification.  Must be null if \"values\" is populated
    #[serde(rename = "value", skip_serializing_if = "Option::is_none")]
    pub value: Option<f64>,
    /// The list of values to update.  Only applicable for grid-type modifications. Must be null if \"value\" is populated
    #[serde(rename = "values", skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<crate::models::WfmForecastModificationIntervalOffsetValue>>,
    /// The client side display granularity of the modification, expressed in the ISO-8601 duration format. Periods are represented as an ISO-8601 string. For example: P1D or P1DT12H
    #[serde(rename = "displayGranularity")]
    pub display_granularity: String,
    /// The actual granularity of the modification as stored behind the scenes, expressed in the ISO-8601 duration format. Periods are represented as an ISO-8601 string. For example: P1D or P1DT12H
    #[serde(rename = "granularity", skip_serializing_if = "Option::is_none")]
    pub granularity: Option<String>,
    /// Whether the modification is enabled for the forecast
    #[serde(rename = "enabled")]
    pub enabled: bool,
    /// The IDs of the planning groups to which this forecast modification applies.  Leave empty to apply to all
    #[serde(rename = "planningGroupIds", skip_serializing_if = "Option::is_none")]
    pub planning_group_ids: Option<Vec<String>>,
}

impl BuForecastModification {
    pub fn new(_type: Type, metric: Metric, display_granularity: String, enabled: bool) -> BuForecastModification {
        BuForecastModification {
            _type,
            start_interval_index: None,
            end_interval_index: None,
            metric,
            legacy_metric: None,
            value: None,
            values: None,
            display_granularity,
            granularity: None,
            enabled,
            planning_group_ids: None,
        }
    }
}

/// The type of the modification
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "MinimumPerInterval")]
    MinimumPerInterval,
    #[serde(rename = "MaximumPerInterval")]
    MaximumPerInterval,
    #[serde(rename = "SetValuePerInterval")]
    SetValuePerInterval,
    #[serde(rename = "ChangeValuePerInterval")]
    ChangeValuePerInterval,
    #[serde(rename = "ChangePercentPerInterval")]
    ChangePercentPerInterval,
    #[serde(rename = "SetValueOverRange")]
    SetValueOverRange,
    #[serde(rename = "ChangeValueOverRange")]
    ChangeValueOverRange,
    #[serde(rename = "SetValuesForIntervalSet")]
    SetValuesForIntervalSet,
}

impl Default for Type {
    fn default() -> Type {
        Self::MinimumPerInterval
    }
}
/// The metric to which this modification applies
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Metric {
    #[serde(rename = "Offered")]
    Offered,
    #[serde(rename = "AverageHandleTimeSeconds")]
    AverageHandleTimeSeconds,
}

impl Default for Metric {
    fn default() -> Metric {
        Self::Offered
    }
}
/// The legacy metric to which this modification applies if applicable
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum LegacyMetric {
    #[serde(rename = "AverageAfterCallWorkTimeSeconds")]
    AverageAfterCallWorkTimeSeconds,
    #[serde(rename = "AverageHandleTimeSeconds")]
    AverageHandleTimeSeconds,
    #[serde(rename = "AverageTalkTimeSeconds")]
    AverageTalkTimeSeconds,
    #[serde(rename = "Offered")]
    Offered,
}

impl Default for LegacyMetric {
    fn default() -> LegacyMetric {
        Self::AverageAfterCallWorkTimeSeconds
    }
}

