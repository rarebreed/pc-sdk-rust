/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct CreateWebChatRequest {
    /// The ID of the queue to use for routing the chat conversation.
    #[serde(rename = "queueId")]
    pub queue_id: String,
    /// The name of the provider that is sourcing the web chat.
    #[serde(rename = "provider")]
    pub provider: String,
    /// The list of skill ID's to use for routing.
    #[serde(rename = "skillIds", skip_serializing_if = "Option::is_none")]
    pub skill_ids: Option<Vec<String>>,
    /// The ID of the langauge to use for routing.
    #[serde(rename = "languageId", skip_serializing_if = "Option::is_none")]
    pub language_id: Option<String>,
    /// The priority to assign to the conversation for routing.
    #[serde(rename = "priority", skip_serializing_if = "Option::is_none")]
    pub priority: Option<i64>,
    /// The list of attributes to associate with the customer participant.
    #[serde(rename = "attributes", skip_serializing_if = "Option::is_none")]
    pub attributes: Option<::std::collections::HashMap<String, String>>,
    /// The name of the customer participating in the web chat.
    #[serde(rename = "customerName", skip_serializing_if = "Option::is_none")]
    pub customer_name: Option<String>,
}

impl CreateWebChatRequest {
    pub fn new(queue_id: String, provider: String) -> CreateWebChatRequest {
        CreateWebChatRequest {
            queue_id,
            provider,
            skill_ids: None,
            language_id: None,
            priority: None,
            attributes: None,
            customer_name: None,
        }
    }
}


