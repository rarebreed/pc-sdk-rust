/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct UserScheduleAdherence {
    /// The globally unique identifier for the object.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "user", skip_serializing_if = "Option::is_none")]
    pub user: Option<Box<crate::models::UserReference>>,
    #[serde(rename = "businessUnit", skip_serializing_if = "Option::is_none")]
    pub business_unit: Option<Box<crate::models::BusinessUnit>>,
    #[serde(rename = "managementUnit", skip_serializing_if = "Option::is_none")]
    pub management_unit: Option<Box<crate::models::ManagementUnit>>,
    #[serde(rename = "team", skip_serializing_if = "Option::is_none")]
    pub team: Option<Box<crate::models::Team>>,
    /// Activity for which the user is scheduled
    #[serde(rename = "scheduledActivityCategory", skip_serializing_if = "Option::is_none")]
    pub scheduled_activity_category: Option<ScheduledActivityCategory>,
    /// Actual underlying system presence value
    #[serde(rename = "systemPresence", skip_serializing_if = "Option::is_none")]
    pub system_presence: Option<SystemPresence>,
    /// Organization Secondary Presence Id.
    #[serde(rename = "organizationSecondaryPresenceId", skip_serializing_if = "Option::is_none")]
    pub organization_secondary_presence_id: Option<String>,
    /// Actual underlying routing status, used to determine whether a user is actually in adherence when OnQueue
    #[serde(rename = "routingStatus", skip_serializing_if = "Option::is_none")]
    pub routing_status: Option<RoutingStatus>,
    /// Activity in which the user is actually engaged
    #[serde(rename = "actualActivityCategory", skip_serializing_if = "Option::is_none")]
    pub actual_activity_category: Option<ActualActivityCategory>,
    /// Whether the user is marked OutOfOffice
    #[serde(rename = "isOutOfOffice", skip_serializing_if = "Option::is_none")]
    pub is_out_of_office: Option<bool>,
    /// The user's current adherence state
    #[serde(rename = "adherenceState", skip_serializing_if = "Option::is_none")]
    pub adherence_state: Option<AdherenceState>,
    /// The impact of the user's current adherenceState
    #[serde(rename = "impact", skip_serializing_if = "Option::is_none")]
    pub impact: Option<Impact>,
    /// Time when the user entered the current adherenceState in ISO-8601 format
    #[serde(rename = "timeOfAdherenceChange", skip_serializing_if = "Option::is_none")]
    pub time_of_adherence_change: Option<String>,
    /// Time when presence was last updated.  Used to calculate time in current status. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "presenceUpdateTime", skip_serializing_if = "Option::is_none")]
    pub presence_update_time: Option<String>,
    /// The list of queues to which this user is joined
    #[serde(rename = "activeQueues", skip_serializing_if = "Option::is_none")]
    pub active_queues: Option<Vec<crate::models::QueueReference>>,
    /// Time when the list of active queues for this user was last updated. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "activeQueuesModifiedTime", skip_serializing_if = "Option::is_none")]
    pub active_queues_modified_time: Option<String>,
    /// For notification purposes. Used to indicate that a user was removed from the management unit
    #[serde(rename = "removedFromManagementUnit", skip_serializing_if = "Option::is_none")]
    pub removed_from_management_unit: Option<bool>,
    /// The URI for this object
    #[serde(rename = "selfUri", skip_serializing_if = "Option::is_none")]
    pub self_uri: Option<String>,
}

impl UserScheduleAdherence {
    pub fn new() -> UserScheduleAdherence {
        UserScheduleAdherence {
            id: None,
            name: None,
            user: None,
            business_unit: None,
            management_unit: None,
            team: None,
            scheduled_activity_category: None,
            system_presence: None,
            organization_secondary_presence_id: None,
            routing_status: None,
            actual_activity_category: None,
            is_out_of_office: None,
            adherence_state: None,
            impact: None,
            time_of_adherence_change: None,
            presence_update_time: None,
            active_queues: None,
            active_queues_modified_time: None,
            removed_from_management_unit: None,
            self_uri: None,
        }
    }
}

/// Activity for which the user is scheduled
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ScheduledActivityCategory {
    #[serde(rename = "OnQueueWork")]
    OnQueueWork,
    #[serde(rename = "Break")]
    _Break,
    #[serde(rename = "Meal")]
    Meal,
    #[serde(rename = "Meeting")]
    Meeting,
    #[serde(rename = "OffQueueWork")]
    OffQueueWork,
    #[serde(rename = "TimeOff")]
    TimeOff,
    #[serde(rename = "Training")]
    Training,
    #[serde(rename = "Unavailable")]
    Unavailable,
    #[serde(rename = "Unscheduled")]
    Unscheduled,
}

impl Default for ScheduledActivityCategory {
    fn default() -> ScheduledActivityCategory {
        Self::OnQueueWork
    }
}
/// Actual underlying system presence value
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SystemPresence {
    #[serde(rename = "Available")]
    Available,
    #[serde(rename = "Away")]
    Away,
    #[serde(rename = "Busy")]
    Busy,
    #[serde(rename = "Offline")]
    Offline,
    #[serde(rename = "Idle")]
    Idle,
    #[serde(rename = "OnQueue")]
    OnQueue,
    #[serde(rename = "Meal")]
    Meal,
    #[serde(rename = "Training")]
    Training,
    #[serde(rename = "Meeting")]
    Meeting,
    #[serde(rename = "Break")]
    _Break,
}

impl Default for SystemPresence {
    fn default() -> SystemPresence {
        Self::Available
    }
}
/// Actual underlying routing status, used to determine whether a user is actually in adherence when OnQueue
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RoutingStatus {
    #[serde(rename = "OFF_QUEUE")]
    OFFQUEUE,
    #[serde(rename = "IDLE")]
    IDLE,
    #[serde(rename = "INTERACTING")]
    INTERACTING,
    #[serde(rename = "NOT_RESPONDING")]
    NOTRESPONDING,
    #[serde(rename = "COMMUNICATING")]
    COMMUNICATING,
}

impl Default for RoutingStatus {
    fn default() -> RoutingStatus {
        Self::OFFQUEUE
    }
}
/// Activity in which the user is actually engaged
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ActualActivityCategory {
    #[serde(rename = "OnQueueWork")]
    OnQueueWork,
    #[serde(rename = "Break")]
    _Break,
    #[serde(rename = "Meal")]
    Meal,
    #[serde(rename = "Meeting")]
    Meeting,
    #[serde(rename = "OffQueueWork")]
    OffQueueWork,
    #[serde(rename = "TimeOff")]
    TimeOff,
    #[serde(rename = "Training")]
    Training,
    #[serde(rename = "Unavailable")]
    Unavailable,
    #[serde(rename = "Unscheduled")]
    Unscheduled,
}

impl Default for ActualActivityCategory {
    fn default() -> ActualActivityCategory {
        Self::OnQueueWork
    }
}
/// The user's current adherence state
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AdherenceState {
    #[serde(rename = "InAdherence")]
    InAdherence,
    #[serde(rename = "OutOfAdherence")]
    OutOfAdherence,
    #[serde(rename = "Unscheduled")]
    Unscheduled,
    #[serde(rename = "Unknown")]
    Unknown,
    #[serde(rename = "Ignored")]
    Ignored,
}

impl Default for AdherenceState {
    fn default() -> AdherenceState {
        Self::InAdherence
    }
}
/// The impact of the user's current adherenceState
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Impact {
    #[serde(rename = "Positive")]
    Positive,
    #[serde(rename = "Negative")]
    Negative,
    #[serde(rename = "Neutral")]
    Neutral,
    #[serde(rename = "Unknown")]
    Unknown,
}

impl Default for Impact {
    fn default() -> Impact {
        Self::Positive
    }
}

