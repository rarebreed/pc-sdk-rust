/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct CampaignInteraction {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "campaign", skip_serializing_if = "Option::is_none")]
    pub campaign: Option<Box<crate::models::DomainEntityRef>>,
    #[serde(rename = "agent", skip_serializing_if = "Option::is_none")]
    pub agent: Option<Box<crate::models::DomainEntityRef>>,
    #[serde(rename = "contact", skip_serializing_if = "Option::is_none")]
    pub contact: Option<Box<crate::models::DomainEntityRef>>,
    #[serde(rename = "destinationAddress", skip_serializing_if = "Option::is_none")]
    pub destination_address: Option<String>,
    /// Boolean value if there is an active preview call on the interaction
    #[serde(rename = "activePreviewCall", skip_serializing_if = "Option::is_none")]
    pub active_preview_call: Option<bool>,
    /// The time when the last preview of the interaction was wrapped up. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "lastActivePreviewWrapupTime", skip_serializing_if = "Option::is_none")]
    pub last_active_preview_wrapup_time: Option<String>,
    /// The time when dialer created the interaction. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "creationTime", skip_serializing_if = "Option::is_none")]
    pub creation_time: Option<String>,
    /// The time when the agent or system places the call. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "callPlacedTime", skip_serializing_if = "Option::is_none")]
    pub call_placed_time: Option<String>,
    /// The time when the agent was connected to the call. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "callRoutedTime", skip_serializing_if = "Option::is_none")]
    pub call_routed_time: Option<String>,
    /// The time when the customer and routing participant are connected. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "previewConnectedTime", skip_serializing_if = "Option::is_none")]
    pub preview_connected_time: Option<String>,
    #[serde(rename = "queue", skip_serializing_if = "Option::is_none")]
    pub queue: Option<Box<crate::models::DomainEntityRef>>,
    #[serde(rename = "script", skip_serializing_if = "Option::is_none")]
    pub script: Option<Box<crate::models::DomainEntityRef>>,
    /// Describes what happened with call analysis for instance: disposition.classification.callable.person, disposition.classification.callable.noanswer
    #[serde(rename = "disposition", skip_serializing_if = "Option::is_none")]
    pub disposition: Option<Disposition>,
    #[serde(rename = "callerName", skip_serializing_if = "Option::is_none")]
    pub caller_name: Option<String>,
    #[serde(rename = "callerAddress", skip_serializing_if = "Option::is_none")]
    pub caller_address: Option<String>,
    /// Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "previewPopDeliveredTime", skip_serializing_if = "Option::is_none")]
    pub preview_pop_delivered_time: Option<String>,
    #[serde(rename = "conversation", skip_serializing_if = "Option::is_none")]
    pub conversation: Option<Box<crate::models::ConversationBasic>>,
    /// conversation participant id that is the dialer system participant to monitor the call from dialer perspective
    #[serde(rename = "dialerSystemParticipantId", skip_serializing_if = "Option::is_none")]
    pub dialer_system_participant_id: Option<String>,
    #[serde(rename = "dialingMode", skip_serializing_if = "Option::is_none")]
    pub dialing_mode: Option<String>,
    /// Any skills that are attached to the call for routing
    #[serde(rename = "skills", skip_serializing_if = "Option::is_none")]
    pub skills: Option<Vec<crate::models::DomainEntityRef>>,
}

impl CampaignInteraction {
    pub fn new() -> CampaignInteraction {
        CampaignInteraction {
            id: None,
            campaign: None,
            agent: None,
            contact: None,
            destination_address: None,
            active_preview_call: None,
            last_active_preview_wrapup_time: None,
            creation_time: None,
            call_placed_time: None,
            call_routed_time: None,
            preview_connected_time: None,
            queue: None,
            script: None,
            disposition: None,
            caller_name: None,
            caller_address: None,
            preview_pop_delivered_time: None,
            conversation: None,
            dialer_system_participant_id: None,
            dialing_mode: None,
            skills: None,
        }
    }
}

/// Describes what happened with call analysis for instance: disposition.classification.callable.person, disposition.classification.callable.noanswer
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Disposition {
    #[serde(rename = "DISCONNECT")]
    DISCONNECT,
    #[serde(rename = "LIVE_VOICE")]
    LIVEVOICE,
    #[serde(rename = "BUSY")]
    BUSY,
    #[serde(rename = "MACHINE")]
    MACHINE,
    #[serde(rename = "NO_ANSWER")]
    NOANSWER,
    #[serde(rename = "SIT_CALLABLE")]
    SITCALLABLE,
    #[serde(rename = "SIT_UNCALLABLE")]
    SITUNCALLABLE,
    #[serde(rename = "FAX")]
    FAX,
}

impl Default for Disposition {
    fn default() -> Disposition {
        Self::DISCONNECT
    }
}

