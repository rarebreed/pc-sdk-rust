/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct MessageMediaData {
    /// The globally unique identifier for the object.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The location of the media, useful for retrieving it
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    /// The detected internet media type of the the media object.  If null then the media type should be dictated by the url.
    #[serde(rename = "mediaType", skip_serializing_if = "Option::is_none")]
    pub media_type: Option<String>,
    /// The optional content length of the the media object, in bytes.
    #[serde(rename = "contentLengthBytes", skip_serializing_if = "Option::is_none")]
    pub content_length_bytes: Option<i32>,
    /// The URL returned to upload an attachment
    #[serde(rename = "uploadUrl", skip_serializing_if = "Option::is_none")]
    pub upload_url: Option<String>,
    /// The status of the media, indicates if the media is in the process of uploading. If the upload fails, the media becomes invalid
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    /// The URI for this object
    #[serde(rename = "selfUri", skip_serializing_if = "Option::is_none")]
    pub self_uri: Option<String>,
}

impl MessageMediaData {
    pub fn new() -> MessageMediaData {
        MessageMediaData {
            id: None,
            name: None,
            url: None,
            media_type: None,
            content_length_bytes: None,
            upload_url: None,
            status: None,
            self_uri: None,
        }
    }
}

/// The status of the media, indicates if the media is in the process of uploading. If the upload fails, the media becomes invalid
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "uploading")]
    Uploading,
    #[serde(rename = "valid")]
    Valid,
    #[serde(rename = "invalid")]
    Invalid,
}

impl Default for Status {
    fn default() -> Status {
        Self::Uploading
    }
}

