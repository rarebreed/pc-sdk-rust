/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct SentimentFeedback {
    /// The globally unique identifier for the object.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The phrase for which sentiment feedback is provided
    #[serde(rename = "phrase")]
    pub phrase: String,
    /// The dialect for the given phrase, dialect format is {language}-{country} where language follows ISO 639-1 standard and country follows ISO 3166-1 alpha 2 standard
    #[serde(rename = "dialect")]
    pub dialect: String,
    /// The sentiment feedback value for the given phrase
    #[serde(rename = "feedbackValue")]
    pub feedback_value: FeedbackValue,
    /// The Timestamp when sentiment feedback created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "dateCreated", skip_serializing_if = "Option::is_none")]
    pub date_created: Option<String>,
    #[serde(rename = "createdBy", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<Box<crate::models::AddressableEntityRef>>,
}

impl SentimentFeedback {
    pub fn new(phrase: String, dialect: String, feedback_value: FeedbackValue) -> SentimentFeedback {
        SentimentFeedback {
            id: None,
            phrase,
            dialect,
            feedback_value,
            date_created: None,
            created_by: None,
        }
    }
}

/// The sentiment feedback value for the given phrase
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FeedbackValue {
    #[serde(rename = "Neutral")]
    Neutral,
    #[serde(rename = "Positive")]
    Positive,
    #[serde(rename = "Negative")]
    Negative,
}

impl Default for FeedbackValue {
    fn default() -> FeedbackValue {
        Self::Neutral
    }
}

