/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct WrapUpCodeMapping {
    /// The globally unique identifier for the object.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Creation time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "dateCreated", skip_serializing_if = "Option::is_none")]
    pub date_created: Option<String>,
    /// Last modified time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "dateModified", skip_serializing_if = "Option::is_none")]
    pub date_modified: Option<String>,
    /// Required for updates, must match the version number of the most recent update
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<i32>,
    /// The default set of wrap-up flags. These will be used if there is no entry for a given wrap-up code in the mapping.
    #[serde(rename = "defaultSet", skip_serializing_if = "Option::is_none")]
    pub default_set: Option<std::collections::HashSet<DefaultSet>>,
    /// A map from wrap-up code identifiers to a set of wrap-up flags.
    #[serde(rename = "mapping", skip_serializing_if = "Option::is_none")]
    pub mapping: Option<Mapping>,
    /// The URI for this object
    #[serde(rename = "selfUri", skip_serializing_if = "Option::is_none")]
    pub self_uri: Option<String>,
}

impl WrapUpCodeMapping {
    pub fn new() -> WrapUpCodeMapping {
        WrapUpCodeMapping {
            id: None,
            name: None,
            date_created: None,
            date_modified: None,
            version: None,
            default_set: None,
            mapping: None,
            self_uri: None,
        }
    }
}

/// The default set of wrap-up flags. These will be used if there is no entry for a given wrap-up code in the mapping.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DefaultSet {
    #[serde(rename = "CONTACT_UNCALLABLE")]
    CONTACTUNCALLABLE,
    #[serde(rename = "NUMBER_UNCALLABLE")]
    NUMBERUNCALLABLE,
    #[serde(rename = "RIGHT_PARTY_CONTACT")]
    RIGHTPARTYCONTACT,
}

impl Default for DefaultSet {
    fn default() -> DefaultSet {
        Self::CONTACTUNCALLABLE
    }
}
/// A map from wrap-up code identifiers to a set of wrap-up flags.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Mapping {
    #[serde(rename = "CONTACT_UNCALLABLE")]
    CONTACTUNCALLABLE,
    #[serde(rename = "NUMBER_UNCALLABLE")]
    NUMBERUNCALLABLE,
    #[serde(rename = "RIGHT_PARTY_CONTACT")]
    RIGHTPARTYCONTACT,
}

impl Default for Mapping {
    fn default() -> Mapping {
        Self::CONTACTUNCALLABLE
    }
}

