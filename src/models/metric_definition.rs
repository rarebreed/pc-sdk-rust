/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct MetricDefinition {
    /// The globally unique identifier for the object.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The type of associated metric unit
    #[serde(rename = "unitType", skip_serializing_if = "Option::is_none")]
    pub unit_type: Option<UnitType>,
    /// An alternate name for this metric definition, often abbreviation
    #[serde(rename = "shortName", skip_serializing_if = "Option::is_none")]
    pub short_name: Option<String>,
    /// Metric names used as dividend
    #[serde(rename = "dividendMetrics", skip_serializing_if = "Option::is_none")]
    pub dividend_metrics: Option<Vec<String>>,
    /// Metric names used as divisor
    #[serde(rename = "divisorMetrics", skip_serializing_if = "Option::is_none")]
    pub divisor_metrics: Option<Vec<String>>,
    #[serde(rename = "defaultObjective", skip_serializing_if = "Option::is_none")]
    pub default_objective: Option<Box<crate::models::DefaultObjective>>,
    /// An optional field to specify if this metric definition is locked to certain template. e.g. punctuality
    #[serde(rename = "lockTemplateId", skip_serializing_if = "Option::is_none")]
    pub lock_template_id: Option<String>,
    /// The URI for this object
    #[serde(rename = "selfUri", skip_serializing_if = "Option::is_none")]
    pub self_uri: Option<String>,
}

impl MetricDefinition {
    pub fn new() -> MetricDefinition {
        MetricDefinition {
            id: None,
            name: None,
            unit_type: None,
            short_name: None,
            dividend_metrics: None,
            divisor_metrics: None,
            default_objective: None,
            lock_template_id: None,
            self_uri: None,
        }
    }
}

/// The type of associated metric unit
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum UnitType {
    #[serde(rename = "None")]
    None,
    #[serde(rename = "Percent")]
    Percent,
    #[serde(rename = "Currency")]
    Currency,
    #[serde(rename = "Seconds")]
    Seconds,
    #[serde(rename = "Number")]
    Number,
    #[serde(rename = "AttendanceStatus")]
    AttendanceStatus,
    #[serde(rename = "Unit")]
    Unit,
}

impl Default for UnitType {
    fn default() -> UnitType {
        Self::None
    }
}

