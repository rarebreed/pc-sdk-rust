/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct CreateCallRequest {
    /// The phone number to dial.
    #[serde(rename = "phoneNumber", skip_serializing_if = "Option::is_none")]
    pub phone_number: Option<String>,
    /// The caller id phone number for this outbound call.
    #[serde(rename = "callerId", skip_serializing_if = "Option::is_none")]
    pub caller_id: Option<String>,
    /// The caller id name for this outbound call.
    #[serde(rename = "callerIdName", skip_serializing_if = "Option::is_none")]
    pub caller_id_name: Option<String>,
    /// The queue ID to call on behalf of.
    #[serde(rename = "callFromQueueId", skip_serializing_if = "Option::is_none")]
    pub call_from_queue_id: Option<String>,
    /// The queue ID to call.
    #[serde(rename = "callQueueId", skip_serializing_if = "Option::is_none")]
    pub call_queue_id: Option<String>,
    /// The user ID to call.
    #[serde(rename = "callUserId", skip_serializing_if = "Option::is_none")]
    pub call_user_id: Option<String>,
    /// The priority to assign to this call (if calling a queue).
    #[serde(rename = "priority", skip_serializing_if = "Option::is_none")]
    pub priority: Option<i32>,
    /// The language skill ID to use for routing this call (if calling a queue).
    #[serde(rename = "languageId", skip_serializing_if = "Option::is_none")]
    pub language_id: Option<String>,
    /// The skill ID's to use for routing this call (if calling a queue).
    #[serde(rename = "routingSkillsIds", skip_serializing_if = "Option::is_none")]
    pub routing_skills_ids: Option<Vec<String>>,
    /// The list of existing call conversations to merge into a new ad-hoc conference.
    #[serde(rename = "conversationIds", skip_serializing_if = "Option::is_none")]
    pub conversation_ids: Option<Vec<String>>,
    /// The list of participants to call to create a new ad-hoc conference.
    #[serde(rename = "participants", skip_serializing_if = "Option::is_none")]
    pub participants: Option<Vec<crate::models::Destination>>,
    /// User to User Information (UUI) data managed by SIP session application.
    #[serde(rename = "uuiData", skip_serializing_if = "Option::is_none")]
    pub uui_data: Option<String>,
    /// The external contact with which to associate the call.
    #[serde(rename = "externalContactId", skip_serializing_if = "Option::is_none")]
    pub external_contact_id: Option<String>,
}

impl CreateCallRequest {
    pub fn new() -> CreateCallRequest {
        CreateCallRequest {
            phone_number: None,
            caller_id: None,
            caller_id_name: None,
            call_from_queue_id: None,
            call_queue_id: None,
            call_user_id: None,
            priority: None,
            language_id: None,
            routing_skills_ids: None,
            conversation_ids: None,
            participants: None,
            uui_data: None,
            external_contact_id: None,
        }
    }
}


