/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Participant {
    /// A globally unique identifier for this conversation.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The timestamp when this participant joined the conversation in the provider clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "startTime", skip_serializing_if = "Option::is_none")]
    pub start_time: Option<String>,
    /// The timestamp when this participant disconnected from the conversation in the provider clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "endTime", skip_serializing_if = "Option::is_none")]
    pub end_time: Option<String>,
    /// The timestamp when this participant was connected to the conversation in the provider clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "connectedTime", skip_serializing_if = "Option::is_none")]
    pub connected_time: Option<String>,
    /// A human readable name identifying the participant.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// If this participant represents a user, then this will be an URI that can be used to fetch the user.
    #[serde(rename = "userUri", skip_serializing_if = "Option::is_none")]
    pub user_uri: Option<String>,
    /// If this participant represents a user, then this will be the globally unique identifier for the user.
    #[serde(rename = "userId", skip_serializing_if = "Option::is_none")]
    pub user_id: Option<String>,
    /// If this participant represents an external contact, then this will be the globally unique identifier for the external contact.
    #[serde(rename = "externalContactId", skip_serializing_if = "Option::is_none")]
    pub external_contact_id: Option<String>,
    /// If this participant represents an external org, then this will be the globally unique identifier for the external org.
    #[serde(rename = "externalOrganizationId", skip_serializing_if = "Option::is_none")]
    pub external_organization_id: Option<String>,
    /// If present, the queue id that the communication channel came in on.
    #[serde(rename = "queueId", skip_serializing_if = "Option::is_none")]
    pub queue_id: Option<String>,
    /// If present, group of users the participant represents.
    #[serde(rename = "groupId", skip_serializing_if = "Option::is_none")]
    pub group_id: Option<String>,
    /// The team id that this participant is a member of when added to the conversation.
    #[serde(rename = "teamId", skip_serializing_if = "Option::is_none")]
    pub team_id: Option<String>,
    /// If present, the queue name that the communication channel came in on.
    #[serde(rename = "queueName", skip_serializing_if = "Option::is_none")]
    pub queue_name: Option<String>,
    /// A well known string that specifies the purpose of this participant.
    #[serde(rename = "purpose", skip_serializing_if = "Option::is_none")]
    pub purpose: Option<String>,
    /// A well known string that specifies the type of this participant.
    #[serde(rename = "participantType", skip_serializing_if = "Option::is_none")]
    pub participant_type: Option<String>,
    /// If this participant is part of a consult transfer, then this will be the participant id of the participant being transferred.
    #[serde(rename = "consultParticipantId", skip_serializing_if = "Option::is_none")]
    pub consult_participant_id: Option<String>,
    /// The address for the this participant. For a phone call this will be the ANI.
    #[serde(rename = "address", skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    /// The address for the this participant. For a phone call this will be the ANI.
    #[serde(rename = "ani", skip_serializing_if = "Option::is_none")]
    pub ani: Option<String>,
    /// The ani-based name for this participant.
    #[serde(rename = "aniName", skip_serializing_if = "Option::is_none")]
    pub ani_name: Option<String>,
    /// The address for the this participant. For a phone call this will be the ANI.
    #[serde(rename = "dnis", skip_serializing_if = "Option::is_none")]
    pub dnis: Option<String>,
    /// An ISO 639 language code specifying the locale for this participant
    #[serde(rename = "locale", skip_serializing_if = "Option::is_none")]
    pub locale: Option<String>,
    /// True iff this participant is required to enter wrapup for this conversation.
    #[serde(rename = "wrapupRequired", skip_serializing_if = "Option::is_none")]
    pub wrapup_required: Option<bool>,
    /// This field controls how the UI prompts the agent for a wrapup.
    #[serde(rename = "wrapupPrompt", skip_serializing_if = "Option::is_none")]
    pub wrapup_prompt: Option<WrapupPrompt>,
    /// Specifies how long a timed ACW session will last.
    #[serde(rename = "wrapupTimeoutMs", skip_serializing_if = "Option::is_none")]
    pub wrapup_timeout_ms: Option<i32>,
    /// The UI sets this field when the agent chooses to skip entering a wrapup for this participant.
    #[serde(rename = "wrapupSkipped", skip_serializing_if = "Option::is_none")]
    pub wrapup_skipped: Option<bool>,
    #[serde(rename = "wrapup", skip_serializing_if = "Option::is_none")]
    pub wrapup: Option<Box<crate::models::Wrapup>>,
    #[serde(rename = "conversationRoutingData", skip_serializing_if = "Option::is_none")]
    pub conversation_routing_data: Option<Box<crate::models::ConversationRoutingData>>,
    /// Specifies how long the agent has to answer an interaction before being marked as not responding.
    #[serde(rename = "alertingTimeoutMs", skip_serializing_if = "Option::is_none")]
    pub alerting_timeout_ms: Option<i32>,
    /// If this participant is a monitor, then this will be the id of the participant that is being monitored.
    #[serde(rename = "monitoredParticipantId", skip_serializing_if = "Option::is_none")]
    pub monitored_participant_id: Option<String>,
    /// If this participant is a coach, then this will be the id of the participant that is being coached.
    #[serde(rename = "coachedParticipantId", skip_serializing_if = "Option::is_none")]
    pub coached_participant_id: Option<String>,
    /// Additional participant attributes
    #[serde(rename = "attributes", skip_serializing_if = "Option::is_none")]
    pub attributes: Option<::std::collections::HashMap<String, String>>,
    #[serde(rename = "calls", skip_serializing_if = "Option::is_none")]
    pub calls: Option<Vec<crate::models::Call>>,
    #[serde(rename = "callbacks", skip_serializing_if = "Option::is_none")]
    pub callbacks: Option<Vec<crate::models::Callback>>,
    #[serde(rename = "chats", skip_serializing_if = "Option::is_none")]
    pub chats: Option<Vec<crate::models::ConversationChat>>,
    #[serde(rename = "cobrowsesessions", skip_serializing_if = "Option::is_none")]
    pub cobrowsesessions: Option<Vec<crate::models::Cobrowsesession>>,
    #[serde(rename = "emails", skip_serializing_if = "Option::is_none")]
    pub emails: Option<Vec<crate::models::Email>>,
    #[serde(rename = "messages", skip_serializing_if = "Option::is_none")]
    pub messages: Option<Vec<crate::models::Message>>,
    #[serde(rename = "screenshares", skip_serializing_if = "Option::is_none")]
    pub screenshares: Option<Vec<crate::models::Screenshare>>,
    #[serde(rename = "socialExpressions", skip_serializing_if = "Option::is_none")]
    pub social_expressions: Option<Vec<crate::models::SocialExpression>>,
    #[serde(rename = "videos", skip_serializing_if = "Option::is_none")]
    pub videos: Option<Vec<crate::models::Video>>,
    #[serde(rename = "evaluations", skip_serializing_if = "Option::is_none")]
    pub evaluations: Option<Vec<crate::models::Evaluation>>,
    /// The current screen recording state for this participant.
    #[serde(rename = "screenRecordingState", skip_serializing_if = "Option::is_none")]
    pub screen_recording_state: Option<ScreenRecordingState>,
    /// The reason specifying why participant flagged the conversation.
    #[serde(rename = "flaggedReason", skip_serializing_if = "Option::is_none")]
    pub flagged_reason: Option<FlaggedReason>,
    /// The timestamp when this participant started after-call work. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "startAcwTime", skip_serializing_if = "Option::is_none")]
    pub start_acw_time: Option<String>,
    /// The timestamp when this participant ended after-call work. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "endAcwTime", skip_serializing_if = "Option::is_none")]
    pub end_acw_time: Option<String>,
}

impl Participant {
    pub fn new() -> Participant {
        Participant {
            id: None,
            start_time: None,
            end_time: None,
            connected_time: None,
            name: None,
            user_uri: None,
            user_id: None,
            external_contact_id: None,
            external_organization_id: None,
            queue_id: None,
            group_id: None,
            team_id: None,
            queue_name: None,
            purpose: None,
            participant_type: None,
            consult_participant_id: None,
            address: None,
            ani: None,
            ani_name: None,
            dnis: None,
            locale: None,
            wrapup_required: None,
            wrapup_prompt: None,
            wrapup_timeout_ms: None,
            wrapup_skipped: None,
            wrapup: None,
            conversation_routing_data: None,
            alerting_timeout_ms: None,
            monitored_participant_id: None,
            coached_participant_id: None,
            attributes: None,
            calls: None,
            callbacks: None,
            chats: None,
            cobrowsesessions: None,
            emails: None,
            messages: None,
            screenshares: None,
            social_expressions: None,
            videos: None,
            evaluations: None,
            screen_recording_state: None,
            flagged_reason: None,
            start_acw_time: None,
            end_acw_time: None,
        }
    }
}

/// This field controls how the UI prompts the agent for a wrapup.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum WrapupPrompt {
    #[serde(rename = "mandatory")]
    Mandatory,
    #[serde(rename = "optional")]
    Optional,
    #[serde(rename = "agentRequested")]
    AgentRequested,
    #[serde(rename = "timeout")]
    Timeout,
    #[serde(rename = "forcedTimeout")]
    ForcedTimeout,
}

impl Default for WrapupPrompt {
    fn default() -> WrapupPrompt {
        Self::Mandatory
    }
}
/// The current screen recording state for this participant.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ScreenRecordingState {
    #[serde(rename = "requested")]
    Requested,
    #[serde(rename = "active")]
    Active,
    #[serde(rename = "paused")]
    Paused,
    #[serde(rename = "stopped")]
    Stopped,
    #[serde(rename = "error")]
    Error,
    #[serde(rename = "timeout")]
    Timeout,
}

impl Default for ScreenRecordingState {
    fn default() -> ScreenRecordingState {
        Self::Requested
    }
}
/// The reason specifying why participant flagged the conversation.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FlaggedReason {
    #[serde(rename = "general")]
    General,
}

impl Default for FlaggedReason {
    fn default() -> FlaggedReason {
        Self::General
    }
}

