/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ChatMessage {
    /// The message body
    #[serde(rename = "body", skip_serializing_if = "Option::is_none")]
    pub body: Option<String>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The message recipient
    #[serde(rename = "to", skip_serializing_if = "Option::is_none")]
    pub to: Option<String>,
    /// The message sender
    #[serde(rename = "from", skip_serializing_if = "Option::is_none")]
    pub from: Option<String>,
    #[serde(rename = "utc", skip_serializing_if = "Option::is_none")]
    pub utc: Option<String>,
    /// The interaction id (if available)
    #[serde(rename = "chat", skip_serializing_if = "Option::is_none")]
    pub chat: Option<String>,
    /// The message id
    #[serde(rename = "message", skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<String>,
    /// Type of the message body (v2 chats only)
    #[serde(rename = "bodyType", skip_serializing_if = "Option::is_none")]
    pub body_type: Option<BodyType>,
    /// Communication of sender (v2 chats only)
    #[serde(rename = "senderCommunicationId", skip_serializing_if = "Option::is_none")]
    pub sender_communication_id: Option<String>,
    /// Participant purpose of sender (v2 chats only)
    #[serde(rename = "participantPurpose", skip_serializing_if = "Option::is_none")]
    pub participant_purpose: Option<String>,
    #[serde(rename = "user", skip_serializing_if = "Option::is_none")]
    pub user: Option<Box<crate::models::ChatMessageUser>>,
}

impl ChatMessage {
    pub fn new() -> ChatMessage {
        ChatMessage {
            body: None,
            id: None,
            to: None,
            from: None,
            utc: None,
            chat: None,
            message: None,
            _type: None,
            body_type: None,
            sender_communication_id: None,
            participant_purpose: None,
            user: None,
        }
    }
}

/// Type of the message body (v2 chats only)
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum BodyType {
    #[serde(rename = "STANDARD")]
    STANDARD,
    #[serde(rename = "ACTIVITY")]
    ACTIVITY,
    #[serde(rename = "TYPING")]
    TYPING,
    #[serde(rename = "NOTICE")]
    NOTICE,
    #[serde(rename = "MEMBERJOIN")]
    MEMBERJOIN,
    #[serde(rename = "MEMBERLEAVE")]
    MEMBERLEAVE,
    #[serde(rename = "MEDIAREQUEST")]
    MEDIAREQUEST,
}

impl Default for BodyType {
    fn default() -> BodyType {
        Self::STANDARD
    }
}

