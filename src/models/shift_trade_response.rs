/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ShiftTradeResponse {
    /// The ID of this shift trade
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The start week date of the associated schedule in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
    #[serde(rename = "weekDate", skip_serializing_if = "Option::is_none")]
    pub week_date: Option<String>,
    #[serde(rename = "schedule", skip_serializing_if = "Option::is_none")]
    pub schedule: Option<Box<crate::models::BuScheduleReferenceForMuRoute>>,
    /// The state of this shift trade
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<State>,
    #[serde(rename = "initiatingUser", skip_serializing_if = "Option::is_none")]
    pub initiating_user: Option<Box<crate::models::UserReference>>,
    /// The ID of the shift offered for trade by the initiating user
    #[serde(rename = "initiatingShiftId", skip_serializing_if = "Option::is_none")]
    pub initiating_shift_id: Option<String>,
    /// The start date/time of the shift being offered for trade. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "initiatingShiftStart", skip_serializing_if = "Option::is_none")]
    pub initiating_shift_start: Option<String>,
    /// The end date/time of the shift being offered for trade. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "initiatingShiftEnd", skip_serializing_if = "Option::is_none")]
    pub initiating_shift_end: Option<String>,
    #[serde(rename = "receivingUser", skip_serializing_if = "Option::is_none")]
    pub receiving_user: Option<Box<crate::models::UserReference>>,
    /// The ID of the shift being exchanged for the initiating shift, null if the receiving user is picking up a shift
    #[serde(rename = "receivingShiftId", skip_serializing_if = "Option::is_none")]
    pub receiving_shift_id: Option<String>,
    /// The start date/time of the receiving shift. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "receivingShiftStart", skip_serializing_if = "Option::is_none")]
    pub receiving_shift_start: Option<String>,
    /// The end date/time of the receiving shift. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "receivingShiftEnd", skip_serializing_if = "Option::is_none")]
    pub receiving_shift_end: Option<String>,
    /// When this shift trade offer will expire if not matched or approved. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "expiration", skip_serializing_if = "Option::is_none")]
    pub expiration: Option<String>,
    /// Whether this is a one-sided shift trade (e.g. the initiating user is not asking for a shift in return)
    #[serde(rename = "oneSided", skip_serializing_if = "Option::is_none")]
    pub one_sided: Option<bool>,
    #[serde(rename = "acceptableIntervals", skip_serializing_if = "Option::is_none")]
    pub acceptable_intervals: Option<Vec<String>>,
    #[serde(rename = "reviewedBy", skip_serializing_if = "Option::is_none")]
    pub reviewed_by: Option<Box<crate::models::UserReference>>,
    /// The timestamp when this shift trade was reviewed. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "reviewedDate", skip_serializing_if = "Option::is_none")]
    pub reviewed_date: Option<String>,
    #[serde(rename = "metadata", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<Box<crate::models::WfmVersionedEntityMetadata>>,
}

impl ShiftTradeResponse {
    pub fn new() -> ShiftTradeResponse {
        ShiftTradeResponse {
            id: None,
            week_date: None,
            schedule: None,
            state: None,
            initiating_user: None,
            initiating_shift_id: None,
            initiating_shift_start: None,
            initiating_shift_end: None,
            receiving_user: None,
            receiving_shift_id: None,
            receiving_shift_start: None,
            receiving_shift_end: None,
            expiration: None,
            one_sided: None,
            acceptable_intervals: None,
            reviewed_by: None,
            reviewed_date: None,
            metadata: None,
        }
    }
}

/// The state of this shift trade
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "Unmatched")]
    Unmatched,
    #[serde(rename = "Matched")]
    Matched,
    #[serde(rename = "Approved")]
    Approved,
    #[serde(rename = "Denied")]
    Denied,
    #[serde(rename = "Expired")]
    Expired,
    #[serde(rename = "Canceled")]
    Canceled,
}

impl Default for State {
    fn default() -> State {
        Self::Unmatched
    }
}

