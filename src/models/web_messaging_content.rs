/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */

/// WebMessagingContent : Message content element.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct WebMessagingContent {
    /// Type of this content element. If contentType = \"Attachment\" only one item is allowed.
    #[serde(rename = "contentType", skip_serializing_if = "Option::is_none")]
    pub content_type: Option<ContentType>,
    #[serde(rename = "attachment", skip_serializing_if = "Option::is_none")]
    pub attachment: Option<Box<crate::models::WebMessagingAttachment>>,
    #[serde(rename = "quickReply", skip_serializing_if = "Option::is_none")]
    pub quick_reply: Option<Box<crate::models::WebMessagingQuickReply>>,
    #[serde(rename = "buttonResponse", skip_serializing_if = "Option::is_none")]
    pub button_response: Option<Box<crate::models::WebMessagingButtonResponse>>,
    #[serde(rename = "generic", skip_serializing_if = "Option::is_none")]
    pub generic: Option<Box<crate::models::WebMessagingGeneric>>,
}

impl WebMessagingContent {
    /// Message content element.
    pub fn new() -> WebMessagingContent {
        WebMessagingContent {
            content_type: None,
            attachment: None,
            quick_reply: None,
            button_response: None,
            generic: None,
        }
    }
}

/// Type of this content element. If contentType = \"Attachment\" only one item is allowed.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ContentType {
    #[serde(rename = "Attachment")]
    Attachment,
    #[serde(rename = "QuickReply")]
    QuickReply,
    #[serde(rename = "ButtonResponse")]
    ButtonResponse,
    #[serde(rename = "GenericTemplate")]
    GenericTemplate,
}

impl Default for ContentType {
    fn default() -> ContentType {
        Self::Attachment
    }
}

