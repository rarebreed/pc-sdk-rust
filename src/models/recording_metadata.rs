/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct RecordingMetadata {
    /// The globally unique identifier for the object.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "conversationId", skip_serializing_if = "Option::is_none")]
    pub conversation_id: Option<String>,
    #[serde(rename = "path", skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// The start time of the recording for screen recordings. Null for other types.
    #[serde(rename = "startTime", skip_serializing_if = "Option::is_none")]
    pub start_time: Option<String>,
    #[serde(rename = "endTime", skip_serializing_if = "Option::is_none")]
    pub end_time: Option<String>,
    /// The type of media that the recording is. At the moment that could be audio, chat, email, or message.
    #[serde(rename = "media", skip_serializing_if = "Option::is_none")]
    pub media: Option<String>,
    /// Annotations that belong to the recording. Populated when recording filestate is AVAILABLE.
    #[serde(rename = "annotations", skip_serializing_if = "Option::is_none")]
    pub annotations: Option<Vec<crate::models::Annotation>>,
    /// Represents the current file state for a recording. Examples: Uploading, Archived, etc
    #[serde(rename = "fileState", skip_serializing_if = "Option::is_none")]
    pub file_state: Option<FileState>,
    /// The amount of time a restored recording will remain restored before being archived again. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "restoreExpirationTime", skip_serializing_if = "Option::is_none")]
    pub restore_expiration_time: Option<String>,
    /// The date the recording will be archived. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "archiveDate", skip_serializing_if = "Option::is_none")]
    pub archive_date: Option<String>,
    /// The type of archive medium used. Example: CloudArchive
    #[serde(rename = "archiveMedium", skip_serializing_if = "Option::is_none")]
    pub archive_medium: Option<ArchiveMedium>,
    /// The date the recording will be deleted. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "deleteDate", skip_serializing_if = "Option::is_none")]
    pub delete_date: Option<String>,
    /// The date the recording will be exported. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "exportDate", skip_serializing_if = "Option::is_none")]
    pub export_date: Option<String>,
    /// The date the recording was exported. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "exportedDate", skip_serializing_if = "Option::is_none")]
    pub exported_date: Option<String>,
    /// How many archive restorations the organization is allowed to have.
    #[serde(rename = "maxAllowedRestorationsForOrg", skip_serializing_if = "Option::is_none")]
    pub max_allowed_restorations_for_org: Option<i32>,
    /// The remaining archive restorations the organization has.
    #[serde(rename = "remainingRestorationsAllowedForOrg", skip_serializing_if = "Option::is_none")]
    pub remaining_restorations_allowed_for_org: Option<i32>,
    /// The session id represents an external resource id, such as email, call, chat, etc
    #[serde(rename = "sessionId", skip_serializing_if = "Option::is_none")]
    pub session_id: Option<String>,
    /// The URI for this object
    #[serde(rename = "selfUri", skip_serializing_if = "Option::is_none")]
    pub self_uri: Option<String>,
}

impl RecordingMetadata {
    pub fn new() -> RecordingMetadata {
        RecordingMetadata {
            id: None,
            name: None,
            conversation_id: None,
            path: None,
            start_time: None,
            end_time: None,
            media: None,
            annotations: None,
            file_state: None,
            restore_expiration_time: None,
            archive_date: None,
            archive_medium: None,
            delete_date: None,
            export_date: None,
            exported_date: None,
            max_allowed_restorations_for_org: None,
            remaining_restorations_allowed_for_org: None,
            session_id: None,
            self_uri: None,
        }
    }
}

/// Represents the current file state for a recording. Examples: Uploading, Archived, etc
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FileState {
    #[serde(rename = "ARCHIVED")]
    ARCHIVED,
    #[serde(rename = "AVAILABLE")]
    AVAILABLE,
    #[serde(rename = "DELETED")]
    DELETED,
    #[serde(rename = "RESTORED")]
    RESTORED,
    #[serde(rename = "RESTORING")]
    RESTORING,
    #[serde(rename = "UPLOADING")]
    UPLOADING,
    #[serde(rename = "ERROR")]
    ERROR,
}

impl Default for FileState {
    fn default() -> FileState {
        Self::ARCHIVED
    }
}
/// The type of archive medium used. Example: CloudArchive
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ArchiveMedium {
    #[serde(rename = "CLOUDARCHIVE")]
    CLOUDARCHIVE,
}

impl Default for ArchiveMedium {
    fn default() -> ArchiveMedium {
        Self::CLOUDARCHIVE
    }
}

