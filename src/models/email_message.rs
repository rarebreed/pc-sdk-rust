/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct EmailMessage {
    /// The globally unique identifier for the object.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The recipients of the email message.
    #[serde(rename = "to")]
    pub to: Vec<crate::models::EmailAddress>,
    /// The recipients that were copied on the email message.
    #[serde(rename = "cc", skip_serializing_if = "Option::is_none")]
    pub cc: Option<Vec<crate::models::EmailAddress>>,
    /// The recipients that were blind copied on the email message.
    #[serde(rename = "bcc", skip_serializing_if = "Option::is_none")]
    pub bcc: Option<Vec<crate::models::EmailAddress>>,
    #[serde(rename = "from")]
    pub from: Box<crate::models::EmailAddress>,
    #[serde(rename = "replyTo", skip_serializing_if = "Option::is_none")]
    pub reply_to: Option<Box<crate::models::EmailAddress>>,
    /// The subject of the email message.
    #[serde(rename = "subject", skip_serializing_if = "Option::is_none")]
    pub subject: Option<String>,
    /// The attachments of the email message.
    #[serde(rename = "attachments", skip_serializing_if = "Option::is_none")]
    pub attachments: Option<Vec<crate::models::Attachment>>,
    /// The text body of the email message.
    #[serde(rename = "textBody")]
    pub text_body: String,
    /// The html body of the email message.
    #[serde(rename = "htmlBody", skip_serializing_if = "Option::is_none")]
    pub html_body: Option<String>,
    /// The time when the message was received or sent. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "time", skip_serializing_if = "Option::is_none")]
    pub time: Option<String>,
    /// Indicates whether the history of previous emails of the conversation is included within the email bodies of this message.
    #[serde(rename = "historyIncluded", skip_serializing_if = "Option::is_none")]
    pub history_included: Option<bool>,
    /// The URI for this object
    #[serde(rename = "selfUri", skip_serializing_if = "Option::is_none")]
    pub self_uri: Option<String>,
}

impl EmailMessage {
    pub fn new(to: Vec<crate::models::EmailAddress>, from: crate::models::EmailAddress, text_body: String) -> EmailMessage {
        EmailMessage {
            id: None,
            name: None,
            to,
            cc: None,
            bcc: None,
            from: Box::new(from),
            reply_to: None,
            subject: None,
            attachments: None,
            text_body,
            html_body: None,
            time: None,
            history_included: None,
            self_uri: None,
        }
    }
}


