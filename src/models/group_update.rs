/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct GroupUpdate {
    /// The globally unique identifier for the object.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The group name.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// State of the group.
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<State>,
    /// Current version for this resource.
    #[serde(rename = "version")]
    pub version: i32,
    #[serde(rename = "images", skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<crate::models::UserImage>>,
    #[serde(rename = "addresses", skip_serializing_if = "Option::is_none")]
    pub addresses: Option<Vec<crate::models::GroupContact>>,
    /// Are membership rules visible to the person requesting to view the group
    #[serde(rename = "rulesVisible", skip_serializing_if = "Option::is_none")]
    pub rules_visible: Option<bool>,
    /// Who can view this group
    #[serde(rename = "visibility", skip_serializing_if = "Option::is_none")]
    pub visibility: Option<Visibility>,
    /// Owners of the group
    #[serde(rename = "ownerIds", skip_serializing_if = "Option::is_none")]
    pub owner_ids: Option<Vec<String>>,
    /// The URI for this object
    #[serde(rename = "selfUri", skip_serializing_if = "Option::is_none")]
    pub self_uri: Option<String>,
}

impl GroupUpdate {
    pub fn new(version: i32) -> GroupUpdate {
        GroupUpdate {
            id: None,
            name: None,
            description: None,
            state: None,
            version,
            images: None,
            addresses: None,
            rules_visible: None,
            visibility: None,
            owner_ids: None,
            self_uri: None,
        }
    }
}

/// State of the group.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "active")]
    Active,
    #[serde(rename = "inactive")]
    Inactive,
    #[serde(rename = "deleted")]
    Deleted,
}

impl Default for State {
    fn default() -> State {
        Self::Active
    }
}
/// Who can view this group
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Visibility {
    #[serde(rename = "public")]
    Public,
    #[serde(rename = "ownerIds")]
    OwnerIds,
    #[serde(rename = "members")]
    Members,
}

impl Default for Visibility {
    fn default() -> Visibility {
        Self::Public
    }
}

