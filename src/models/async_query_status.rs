/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct AsyncQueryStatus {
    /// The current state of the asynchronous query
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<State>,
    /// The error associated with the current query, if the state is FAILED
    #[serde(rename = "errorMessage", skip_serializing_if = "Option::is_none")]
    pub error_message: Option<String>,
    /// The time at which results for this query will expire. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "expirationDate", skip_serializing_if = "Option::is_none")]
    pub expiration_date: Option<String>,
    /// The time at which the query was submitted. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "submissionDate", skip_serializing_if = "Option::is_none")]
    pub submission_date: Option<String>,
    /// The time at which the query completed. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "completionDate", skip_serializing_if = "Option::is_none")]
    pub completion_date: Option<String>,
}

impl AsyncQueryStatus {
    pub fn new() -> AsyncQueryStatus {
        AsyncQueryStatus {
            state: None,
            error_message: None,
            expiration_date: None,
            submission_date: None,
            completion_date: None,
        }
    }
}

/// The current state of the asynchronous query
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "QUEUED")]
    QUEUED,
    #[serde(rename = "PENDING")]
    PENDING,
    #[serde(rename = "FAILED")]
    FAILED,
    #[serde(rename = "CANCELLED")]
    CANCELLED,
    #[serde(rename = "FULFILLED")]
    FULFILLED,
    #[serde(rename = "EXPIRED")]
    EXPIRED,
}

impl Default for State {
    fn default() -> State {
        Self::QUEUED
    }
}

