/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct KnowledgeSearchDocument {
    /// The globally unique identifier for the object.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Language of the document
    #[serde(rename = "languageCode")]
    pub language_code: LanguageCode,
    /// Document type
    #[serde(rename = "type")]
    pub _type: Type,
    #[serde(rename = "faq", skip_serializing_if = "Option::is_none")]
    pub faq: Option<Box<crate::models::DocumentFaq>>,
    /// Document creation date-time. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "dateCreated", skip_serializing_if = "Option::is_none")]
    pub date_created: Option<String>,
    /// Document last modification date-time. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "dateModified", skip_serializing_if = "Option::is_none")]
    pub date_modified: Option<String>,
    /// Document categories
    #[serde(rename = "categories", skip_serializing_if = "Option::is_none")]
    pub categories: Option<Vec<crate::models::KnowledgeCategory>>,
    #[serde(rename = "knowledgeBase", skip_serializing_if = "Option::is_none")]
    pub knowledge_base: Option<Box<crate::models::KnowledgeBase>>,
    /// External URL to the document
    #[serde(rename = "externalUrl", skip_serializing_if = "Option::is_none")]
    pub external_url: Option<String>,
    #[serde(rename = "article", skip_serializing_if = "Option::is_none")]
    pub article: Option<Box<crate::models::DocumentArticle>>,
    /// The confidence associated with a document with respect to a search query
    #[serde(rename = "confidence", skip_serializing_if = "Option::is_none")]
    pub confidence: Option<f64>,
    /// The URI for this object
    #[serde(rename = "selfUri", skip_serializing_if = "Option::is_none")]
    pub self_uri: Option<String>,
}

impl KnowledgeSearchDocument {
    pub fn new(language_code: LanguageCode, _type: Type) -> KnowledgeSearchDocument {
        KnowledgeSearchDocument {
            id: None,
            name: None,
            language_code,
            _type,
            faq: None,
            date_created: None,
            date_modified: None,
            categories: None,
            knowledge_base: None,
            external_url: None,
            article: None,
            confidence: None,
            self_uri: None,
        }
    }
}

/// Language of the document
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum LanguageCode {
    #[serde(rename = "en-US")]
    EnUS,
    #[serde(rename = "en-UK")]
    EnUK,
    #[serde(rename = "en-AU")]
    EnAU,
    #[serde(rename = "de-DE")]
    DeDE,
}

impl Default for LanguageCode {
    fn default() -> LanguageCode {
        Self::EnUS
    }
}
/// Document type
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "Faq")]
    Faq,
    #[serde(rename = "Article")]
    Article,
}

impl Default for Type {
    fn default() -> Type {
        Self::Faq
    }
}

