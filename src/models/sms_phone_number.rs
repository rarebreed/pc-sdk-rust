/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct SmsPhoneNumber {
    /// The globally unique identifier for the object.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// A phone number provisioned for SMS communications in E.164 format. E.g. +13175555555 or +34234234234
    #[serde(rename = "phoneNumber")]
    pub phone_number: String,
    /// Type of the phone number provisioned.
    #[serde(rename = "phoneNumberType", skip_serializing_if = "Option::is_none")]
    pub phone_number_type: Option<PhoneNumberType>,
    /// Is set to false, if the phone number is provisioned through a SMS provider, outside of PureCloud
    #[serde(rename = "provisionedThroughPureCloud", skip_serializing_if = "Option::is_none")]
    pub provisioned_through_pure_cloud: Option<bool>,
    /// Status of the provisioned phone number.
    #[serde(rename = "phoneNumberStatus", skip_serializing_if = "Option::is_none")]
    pub phone_number_status: Option<PhoneNumberStatus>,
    /// The capabilities of the phone number available for provisioning.
    #[serde(rename = "capabilities", skip_serializing_if = "Option::is_none")]
    pub capabilities: Option<Vec<Capabilities>>,
    /// The ISO 3166-1 alpha-2 country code of the country this phone number is associated with.
    #[serde(rename = "countryCode", skip_serializing_if = "Option::is_none")]
    pub country_code: Option<String>,
    /// Date this phone number was provisioned. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "dateCreated", skip_serializing_if = "Option::is_none")]
    pub date_created: Option<String>,
    /// Date this phone number was modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "dateModified", skip_serializing_if = "Option::is_none")]
    pub date_modified: Option<String>,
    #[serde(rename = "createdBy", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<Box<crate::models::User>>,
    #[serde(rename = "modifiedBy", skip_serializing_if = "Option::is_none")]
    pub modified_by: Option<Box<crate::models::User>>,
    /// Version number required for updates.
    #[serde(rename = "version")]
    pub version: i32,
    /// Date this phone number was purchased, if the phoneNumberType is shortcode. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "purchaseDate", skip_serializing_if = "Option::is_none")]
    pub purchase_date: Option<String>,
    /// Contract end date of this phone number, if the phoneNumberType is shortcode. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "cancellationDate", skip_serializing_if = "Option::is_none")]
    pub cancellation_date: Option<String>,
    /// Contract renewal date of this phone number, if the phoneNumberType is shortcode. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "renewalDate", skip_serializing_if = "Option::is_none")]
    pub renewal_date: Option<String>,
    /// Renewal time period of this phone number, if the phoneNumberType is shortcode.
    #[serde(rename = "autoRenewable", skip_serializing_if = "Option::is_none")]
    pub auto_renewable: Option<AutoRenewable>,
    #[serde(rename = "addressId", skip_serializing_if = "Option::is_none")]
    pub address_id: Option<Box<crate::models::SmsAddress>>,
    /// BillingType of this phone number, if the phoneNumberType is shortcode.
    #[serde(rename = "shortCodeBillingType", skip_serializing_if = "Option::is_none")]
    pub short_code_billing_type: Option<ShortCodeBillingType>,
    #[serde(rename = "provisioningStatus", skip_serializing_if = "Option::is_none")]
    pub provisioning_status: Option<Box<crate::models::SmsProvisioningStatus>>,
    /// Localized country name for the country code this phone number belongs too
    #[serde(rename = "country", skip_serializing_if = "Option::is_none")]
    pub country: Option<String>,
    /// Set to true if this phone number has the capability to support SMS
    #[serde(rename = "supportsSms", skip_serializing_if = "Option::is_none")]
    pub supports_sms: Option<bool>,
    /// Set to true if this phone number has the capability to support MMS
    #[serde(rename = "supportsMms", skip_serializing_if = "Option::is_none")]
    pub supports_mms: Option<bool>,
    /// Set to true if this phone number has the capability to support voice
    #[serde(rename = "supportsVoice", skip_serializing_if = "Option::is_none")]
    pub supports_voice: Option<bool>,
    /// The URI for this object
    #[serde(rename = "selfUri", skip_serializing_if = "Option::is_none")]
    pub self_uri: Option<String>,
}

impl SmsPhoneNumber {
    pub fn new(phone_number: String, version: i32) -> SmsPhoneNumber {
        SmsPhoneNumber {
            id: None,
            name: None,
            phone_number,
            phone_number_type: None,
            provisioned_through_pure_cloud: None,
            phone_number_status: None,
            capabilities: None,
            country_code: None,
            date_created: None,
            date_modified: None,
            created_by: None,
            modified_by: None,
            version,
            purchase_date: None,
            cancellation_date: None,
            renewal_date: None,
            auto_renewable: None,
            address_id: None,
            short_code_billing_type: None,
            provisioning_status: None,
            country: None,
            supports_sms: None,
            supports_mms: None,
            supports_voice: None,
            self_uri: None,
        }
    }
}

/// Type of the phone number provisioned.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PhoneNumberType {
    #[serde(rename = "local")]
    Local,
    #[serde(rename = "mobile")]
    Mobile,
    #[serde(rename = "tollfree")]
    Tollfree,
    #[serde(rename = "shortcode")]
    Shortcode,
}

impl Default for PhoneNumberType {
    fn default() -> PhoneNumberType {
        Self::Local
    }
}
/// Status of the provisioned phone number.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PhoneNumberStatus {
    #[serde(rename = "INVALID")]
    INVALID,
    #[serde(rename = "ACTIVE")]
    ACTIVE,
    #[serde(rename = "PORTING")]
    PORTING,
    #[serde(rename = "PENDING")]
    PENDING,
    #[serde(rename = "PENDING_CANCELLATION")]
    PENDINGCANCELLATION,
    #[serde(rename = "INITIATED")]
    INITIATED,
}

impl Default for PhoneNumberStatus {
    fn default() -> PhoneNumberStatus {
        Self::INVALID
    }
}
/// The capabilities of the phone number available for provisioning.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Capabilities {
    #[serde(rename = "sms")]
    Sms,
    #[serde(rename = "mms")]
    Mms,
    #[serde(rename = "voice")]
    Voice,
}

impl Default for Capabilities {
    fn default() -> Capabilities {
        Self::Sms
    }
}
/// Renewal time period of this phone number, if the phoneNumberType is shortcode.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AutoRenewable {
    #[serde(rename = "Quarterly")]
    Quarterly,
}

impl Default for AutoRenewable {
    fn default() -> AutoRenewable {
        Self::Quarterly
    }
}
/// BillingType of this phone number, if the phoneNumberType is shortcode.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ShortCodeBillingType {
    #[serde(rename = "Basic")]
    Basic,
    #[serde(rename = "Vanity")]
    Vanity,
}

impl Default for ShortCodeBillingType {
    fn default() -> ShortCodeBillingType {
        Self::Basic
    }
}

