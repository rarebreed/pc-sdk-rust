/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct FaxSendRequest {
    /// The globally unique identifier for the object.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// A list of outbound fax dialing addresses. E.g. +13175555555 or 3175555555
    #[serde(rename = "addresses")]
    pub addresses: Vec<String>,
    /// DocumentId of Content Management artifact. If Content Management document is not used for faxing, documentId should be null
    #[serde(rename = "documentId", skip_serializing_if = "Option::is_none")]
    pub document_id: Option<String>,
    /// The content type that is going to be uploaded. If Content Management document is used for faxing, contentType will be ignored
    #[serde(rename = "contentType", skip_serializing_if = "Option::is_none")]
    pub content_type: Option<ContentType>,
    #[serde(rename = "workspace", skip_serializing_if = "Option::is_none")]
    pub workspace: Option<Box<crate::models::Workspace>>,
    #[serde(rename = "coverSheet", skip_serializing_if = "Option::is_none")]
    pub cover_sheet: Option<Box<crate::models::CoverSheet>>,
    /// Time zone offset minutes from GMT
    #[serde(rename = "timeZoneOffsetMinutes", skip_serializing_if = "Option::is_none")]
    pub time_zone_offset_minutes: Option<i32>,
    /// The URI for this object
    #[serde(rename = "selfUri", skip_serializing_if = "Option::is_none")]
    pub self_uri: Option<String>,
}

impl FaxSendRequest {
    pub fn new(addresses: Vec<String>) -> FaxSendRequest {
        FaxSendRequest {
            id: None,
            name: None,
            addresses,
            document_id: None,
            content_type: None,
            workspace: None,
            cover_sheet: None,
            time_zone_offset_minutes: None,
            self_uri: None,
        }
    }
}

/// The content type that is going to be uploaded. If Content Management document is used for faxing, contentType will be ignored
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ContentType {
    #[serde(rename = "application/pdf")]
    ApplicationPdf,
    #[serde(rename = "image/tiff")]
    ImageTiff,
    #[serde(rename = "application/msword")]
    ApplicationMsword,
    #[serde(rename = "application/vnd.oasis.opendocument.text")]
    ApplicationVndOasisOpendocumentText,
    #[serde(rename = "application/vnd.openxmlformats-officedocument.wordprocessingml.document")]
    ApplicationVndOpenxmlformatsOfficedocumentWordprocessingmlDocument,
}

impl Default for ContentType {
    fn default() -> ContentType {
        Self::ApplicationPdf
    }
}

