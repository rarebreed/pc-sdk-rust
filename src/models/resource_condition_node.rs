/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ResourceConditionNode {
    #[serde(rename = "variableName", skip_serializing_if = "Option::is_none")]
    pub variable_name: Option<String>,
    #[serde(rename = "conjunction", skip_serializing_if = "Option::is_none")]
    pub conjunction: Option<Conjunction>,
    #[serde(rename = "operator", skip_serializing_if = "Option::is_none")]
    pub operator: Option<Operator>,
    #[serde(rename = "operands", skip_serializing_if = "Option::is_none")]
    pub operands: Option<Vec<crate::models::ResourceConditionValue>>,
    #[serde(rename = "terms", skip_serializing_if = "Option::is_none")]
    pub terms: Option<Vec<crate::models::ResourceConditionNode>>,
}

impl ResourceConditionNode {
    pub fn new() -> ResourceConditionNode {
        ResourceConditionNode {
            variable_name: None,
            conjunction: None,
            operator: None,
            operands: None,
            terms: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Conjunction {
    #[serde(rename = "AND")]
    AND,
    #[serde(rename = "OR")]
    OR,
}

impl Default for Conjunction {
    fn default() -> Conjunction {
        Self::AND
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Operator {
    #[serde(rename = "EQ")]
    EQ,
    #[serde(rename = "IN")]
    _IN,
    #[serde(rename = "GE")]
    GE,
    #[serde(rename = "GT")]
    GT,
    #[serde(rename = "LE")]
    LE,
    #[serde(rename = "LT")]
    LT,
}

impl Default for Operator {
    fn default() -> Operator {
        Self::EQ
    }
}

