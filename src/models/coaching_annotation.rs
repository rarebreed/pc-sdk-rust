/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct CoachingAnnotation {
    /// The globally unique identifier for the object.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "createdBy", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<Box<crate::models::UserReference>>,
    /// The date/time the annotation was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "dateCreated", skip_serializing_if = "Option::is_none")]
    pub date_created: Option<String>,
    #[serde(rename = "modifiedBy", skip_serializing_if = "Option::is_none")]
    pub modified_by: Option<Box<crate::models::UserReference>>,
    /// The date/time the annotation was last modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "dateModified", skip_serializing_if = "Option::is_none")]
    pub date_modified: Option<String>,
    /// The text of the annotation.
    #[serde(rename = "text")]
    pub text: String,
    /// Flag indicating whether the annotation is deleted.
    #[serde(rename = "isDeleted", skip_serializing_if = "Option::is_none")]
    pub is_deleted: Option<bool>,
    /// Determines the permissions required to view this item.
    #[serde(rename = "accessType", skip_serializing_if = "Option::is_none")]
    pub access_type: Option<AccessType>,
    /// The URI for this object
    #[serde(rename = "selfUri", skip_serializing_if = "Option::is_none")]
    pub self_uri: Option<String>,
}

impl CoachingAnnotation {
    pub fn new(text: String) -> CoachingAnnotation {
        CoachingAnnotation {
            id: None,
            created_by: None,
            date_created: None,
            modified_by: None,
            date_modified: None,
            text,
            is_deleted: None,
            access_type: None,
            self_uri: None,
        }
    }
}

/// Determines the permissions required to view this item.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AccessType {
    #[serde(rename = "Public")]
    Public,
    #[serde(rename = "Private")]
    Private,
}

impl Default for AccessType {
    fn default() -> AccessType {
        Self::Public
    }
}

