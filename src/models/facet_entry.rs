/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct FacetEntry {
    #[serde(rename = "attribute", skip_serializing_if = "Option::is_none")]
    pub attribute: Option<Box<crate::models::TermAttribute>>,
    #[serde(rename = "statistics", skip_serializing_if = "Option::is_none")]
    pub statistics: Option<Box<crate::models::FacetStatistics>>,
    #[serde(rename = "other", skip_serializing_if = "Option::is_none")]
    pub other: Option<i64>,
    #[serde(rename = "total", skip_serializing_if = "Option::is_none")]
    pub total: Option<i64>,
    #[serde(rename = "missing", skip_serializing_if = "Option::is_none")]
    pub missing: Option<i64>,
    #[serde(rename = "termCount", skip_serializing_if = "Option::is_none")]
    pub term_count: Option<i32>,
    #[serde(rename = "termType", skip_serializing_if = "Option::is_none")]
    pub term_type: Option<TermType>,
    #[serde(rename = "terms", skip_serializing_if = "Option::is_none")]
    pub terms: Option<Vec<crate::models::FacetTerm>>,
}

impl FacetEntry {
    pub fn new() -> FacetEntry {
        FacetEntry {
            attribute: None,
            statistics: None,
            other: None,
            total: None,
            missing: None,
            term_count: None,
            term_type: None,
            terms: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TermType {
    #[serde(rename = "TERM")]
    TERM,
    #[serde(rename = "NUMBERRANGE")]
    NUMBERRANGE,
    #[serde(rename = "NUMBERHISTOGRAM")]
    NUMBERHISTOGRAM,
    #[serde(rename = "DATERANGE")]
    DATERANGE,
    #[serde(rename = "DATEHISTOGRAM")]
    DATEHISTOGRAM,
    #[serde(rename = "ID")]
    ID,
}

impl Default for TermType {
    fn default() -> TermType {
        Self::TERM
    }
}

