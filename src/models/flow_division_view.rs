/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct FlowDivisionView {
    /// The flow identifier
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The flow name
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "division", skip_serializing_if = "Option::is_none")]
    pub division: Option<Box<crate::models::WritableDivision>>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<Type>,
    /// the flow description
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "inputSchema", skip_serializing_if = "Option::is_none")]
    pub input_schema: Option<Box<crate::models::JsonSchemaDocument>>,
    #[serde(rename = "outputSchema", skip_serializing_if = "Option::is_none")]
    pub output_schema: Option<Box<crate::models::JsonSchemaDocument>>,
    /// List of supported languages for the published version of the flow.
    #[serde(rename = "supportedLanguages", skip_serializing_if = "Option::is_none")]
    pub supported_languages: Option<Vec<crate::models::SupportedLanguage>>,
    #[serde(rename = "publishedVersion", skip_serializing_if = "Option::is_none")]
    pub published_version: Option<Box<crate::models::FlowVersion>>,
    #[serde(rename = "debugVersion", skip_serializing_if = "Option::is_none")]
    pub debug_version: Option<Box<crate::models::FlowVersion>>,
    /// The URI for this object
    #[serde(rename = "selfUri", skip_serializing_if = "Option::is_none")]
    pub self_uri: Option<String>,
}

impl FlowDivisionView {
    pub fn new(name: String) -> FlowDivisionView {
        FlowDivisionView {
            id: None,
            name,
            division: None,
            _type: None,
            description: None,
            input_schema: None,
            output_schema: None,
            supported_languages: None,
            published_version: None,
            debug_version: None,
            self_uri: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "BOT")]
    BOT,
    #[serde(rename = "COMMONMODULE")]
    COMMONMODULE,
    #[serde(rename = "INBOUNDCALL")]
    INBOUNDCALL,
    #[serde(rename = "INBOUNDCHAT")]
    INBOUNDCHAT,
    #[serde(rename = "INBOUNDEMAIL")]
    INBOUNDEMAIL,
    #[serde(rename = "INBOUNDSHORTMESSAGE")]
    INBOUNDSHORTMESSAGE,
    #[serde(rename = "INQUEUECALL")]
    INQUEUECALL,
    #[serde(rename = "INQUEUEEMAIL")]
    INQUEUEEMAIL,
    #[serde(rename = "INQUEUESHORTMESSAGE")]
    INQUEUESHORTMESSAGE,
    #[serde(rename = "OUTBOUNDCALL")]
    OUTBOUNDCALL,
    #[serde(rename = "SECURECALL")]
    SECURECALL,
    #[serde(rename = "SPEECH")]
    SPEECH,
    #[serde(rename = "SURVEYINVITE")]
    SURVEYINVITE,
    #[serde(rename = "VOICEMAIL")]
    VOICEMAIL,
    #[serde(rename = "WORKFLOW")]
    WORKFLOW,
    #[serde(rename = "WORKITEM")]
    WORKITEM,
}

impl Default for Type {
    fn default() -> Type {
        Self::BOT
    }
}

