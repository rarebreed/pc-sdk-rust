/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct TwitterIntegrationRequest {
    /// The globally unique identifier for the object.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The name of the Twitter Integration
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "supportedContent", skip_serializing_if = "Option::is_none")]
    pub supported_content: Option<Box<crate::models::SupportedContentReference>>,
    /// The Access Token Key from Twitter messenger
    #[serde(rename = "accessTokenKey")]
    pub access_token_key: String,
    /// The Access Token Secret from Twitter messenger
    #[serde(rename = "accessTokenSecret")]
    pub access_token_secret: String,
    /// The Consumer Key from Twitter messenger
    #[serde(rename = "consumerKey")]
    pub consumer_key: String,
    /// The Consumer Secret from Twitter messenger
    #[serde(rename = "consumerSecret")]
    pub consumer_secret: String,
    /// The type of twitter account to be used for the integration
    #[serde(rename = "tier")]
    pub tier: Tier,
    /// The Twitter environment name, e.g.: env-beta (required for premium tier)
    #[serde(rename = "envName", skip_serializing_if = "Option::is_none")]
    pub env_name: Option<String>,
    /// The URI for this object
    #[serde(rename = "selfUri", skip_serializing_if = "Option::is_none")]
    pub self_uri: Option<String>,
}

impl TwitterIntegrationRequest {
    pub fn new(name: String, access_token_key: String, access_token_secret: String, consumer_key: String, consumer_secret: String, tier: Tier) -> TwitterIntegrationRequest {
        TwitterIntegrationRequest {
            id: None,
            name,
            supported_content: None,
            access_token_key,
            access_token_secret,
            consumer_key,
            consumer_secret,
            tier,
            env_name: None,
            self_uri: None,
        }
    }
}

/// The type of twitter account to be used for the integration
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Tier {
    #[serde(rename = "premium")]
    Premium,
    #[serde(rename = "enterprise")]
    Enterprise,
}

impl Default for Tier {
    fn default() -> Tier {
        Self::Premium
    }
}

