/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct KnowledgeImport {
    /// Id of the import operation
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Name of the import operation
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Upload key
    #[serde(rename = "uploadKey")]
    pub upload_key: String,
    /// file type of the document
    #[serde(rename = "fileType")]
    pub file_type: FileType,
    /// Ignore headers for the specified file
    #[serde(rename = "ignoreHeaders", skip_serializing_if = "Option::is_none")]
    pub ignore_headers: Option<bool>,
    /// Status of the operation
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    #[serde(rename = "report", skip_serializing_if = "Option::is_none")]
    pub report: Option<Box<crate::models::ImportReport>>,
    #[serde(rename = "knowledgeBase", skip_serializing_if = "Option::is_none")]
    pub knowledge_base: Option<Box<crate::models::KnowledgeBase>>,
    /// Language code
    #[serde(rename = "languageCode", skip_serializing_if = "Option::is_none")]
    pub language_code: Option<LanguageCode>,
    /// Created date. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "dateCreated", skip_serializing_if = "Option::is_none")]
    pub date_created: Option<String>,
    /// Last modified date. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "dateModified", skip_serializing_if = "Option::is_none")]
    pub date_modified: Option<String>,
    /// The URI for this object
    #[serde(rename = "selfUri", skip_serializing_if = "Option::is_none")]
    pub self_uri: Option<String>,
}

impl KnowledgeImport {
    pub fn new(upload_key: String, file_type: FileType) -> KnowledgeImport {
        KnowledgeImport {
            id: None,
            name: None,
            upload_key,
            file_type,
            ignore_headers: None,
            status: None,
            report: None,
            knowledge_base: None,
            language_code: None,
            date_created: None,
            date_modified: None,
            self_uri: None,
        }
    }
}

/// file type of the document
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FileType {
    #[serde(rename = "Csv")]
    Csv,
    #[serde(rename = "JsonLines")]
    JsonLines,
}

impl Default for FileType {
    fn default() -> FileType {
        Self::Csv
    }
}
/// Status of the operation
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "Created")]
    Created,
    #[serde(rename = "ValidationInProgress")]
    ValidationInProgress,
    #[serde(rename = "ValidationCompleted")]
    ValidationCompleted,
    #[serde(rename = "ValidationFailed")]
    ValidationFailed,
    #[serde(rename = "Started")]
    Started,
    #[serde(rename = "InProgress")]
    InProgress,
    #[serde(rename = "Completed")]
    Completed,
    #[serde(rename = "PartialCompleted")]
    PartialCompleted,
    #[serde(rename = "Failed")]
    Failed,
}

impl Default for Status {
    fn default() -> Status {
        Self::Created
    }
}
/// Language code
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum LanguageCode {
    #[serde(rename = "en-US")]
    EnUS,
    #[serde(rename = "en-UK")]
    EnUK,
    #[serde(rename = "en-AU")]
    EnAU,
    #[serde(rename = "de-DE")]
    DeDE,
}

impl Default for LanguageCode {
    fn default() -> LanguageCode {
        Self::EnUS
    }
}

