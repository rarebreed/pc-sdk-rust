/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Edge {
    /// The globally unique identifier for the object.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The name of the entity.
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "division", skip_serializing_if = "Option::is_none")]
    pub division: Option<Box<crate::models::Division>>,
    /// The resource's description.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The current version of the resource.
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<i32>,
    /// The date the resource was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "dateCreated", skip_serializing_if = "Option::is_none")]
    pub date_created: Option<String>,
    /// The date of the last modification to the resource. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "dateModified", skip_serializing_if = "Option::is_none")]
    pub date_modified: Option<String>,
    /// The ID of the user that last modified the resource.
    #[serde(rename = "modifiedBy", skip_serializing_if = "Option::is_none")]
    pub modified_by: Option<String>,
    /// The ID of the user that created the resource.
    #[serde(rename = "createdBy", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<String>,
    /// Indicates if the resource is active, inactive, or deleted.
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<State>,
    /// The application that last modified the resource.
    #[serde(rename = "modifiedByApp", skip_serializing_if = "Option::is_none")]
    pub modified_by_app: Option<String>,
    /// The application that created the resource.
    #[serde(rename = "createdByApp", skip_serializing_if = "Option::is_none")]
    pub created_by_app: Option<String>,
    /// The list of interfaces for the edge. (Deprecated) Replaced by configuring trunks/ip info on the logical interface instead
    #[serde(rename = "interfaces", skip_serializing_if = "Option::is_none")]
    pub interfaces: Option<Vec<crate::models::EdgeInterface>>,
    #[serde(rename = "make", skip_serializing_if = "Option::is_none")]
    pub make: Option<String>,
    #[serde(rename = "model", skip_serializing_if = "Option::is_none")]
    pub model: Option<String>,
    #[serde(rename = "apiVersion", skip_serializing_if = "Option::is_none")]
    pub api_version: Option<String>,
    #[serde(rename = "softwareVersion", skip_serializing_if = "Option::is_none")]
    pub software_version: Option<String>,
    #[serde(rename = "softwareVersionTimestamp", skip_serializing_if = "Option::is_none")]
    pub software_version_timestamp: Option<String>,
    #[serde(rename = "softwareVersionPlatform", skip_serializing_if = "Option::is_none")]
    pub software_version_platform: Option<String>,
    #[serde(rename = "softwareVersionConfiguration", skip_serializing_if = "Option::is_none")]
    pub software_version_configuration: Option<String>,
    #[serde(rename = "fullSoftwareVersion", skip_serializing_if = "Option::is_none")]
    pub full_software_version: Option<String>,
    /// The pairing Id for a hardware Edge in the format: 00000-00000-00000-00000-00000. This field is only required when creating an Edge with a deployment type of HARDWARE.
    #[serde(rename = "pairingId", skip_serializing_if = "Option::is_none")]
    pub pairing_id: Option<String>,
    #[serde(rename = "fingerprint", skip_serializing_if = "Option::is_none")]
    pub fingerprint: Option<String>,
    #[serde(rename = "fingerprintHint", skip_serializing_if = "Option::is_none")]
    pub fingerprint_hint: Option<String>,
    #[serde(rename = "currentVersion", skip_serializing_if = "Option::is_none")]
    pub current_version: Option<String>,
    #[serde(rename = "stagedVersion", skip_serializing_if = "Option::is_none")]
    pub staged_version: Option<String>,
    #[serde(rename = "patch", skip_serializing_if = "Option::is_none")]
    pub patch: Option<String>,
    /// The current status of the Edge.
    #[serde(rename = "statusCode", skip_serializing_if = "Option::is_none")]
    pub status_code: Option<StatusCode>,
    #[serde(rename = "edgeGroup", skip_serializing_if = "Option::is_none")]
    pub edge_group: Option<Box<crate::models::EdgeGroup>>,
    #[serde(rename = "site", skip_serializing_if = "Option::is_none")]
    pub site: Option<Box<crate::models::Site>>,
    #[serde(rename = "softwareStatus", skip_serializing_if = "Option::is_none")]
    pub software_status: Option<Box<crate::models::DomainEdgeSoftwareUpdateDto>>,
    #[serde(rename = "onlineStatus", skip_serializing_if = "Option::is_none")]
    pub online_status: Option<OnlineStatus>,
    #[serde(rename = "serialNumber", skip_serializing_if = "Option::is_none")]
    pub serial_number: Option<String>,
    #[serde(rename = "physicalEdge", skip_serializing_if = "Option::is_none")]
    pub physical_edge: Option<bool>,
    #[serde(rename = "managed", skip_serializing_if = "Option::is_none")]
    pub managed: Option<bool>,
    #[serde(rename = "edgeDeploymentType", skip_serializing_if = "Option::is_none")]
    pub edge_deployment_type: Option<EdgeDeploymentType>,
    /// The current state of the Edge's call draining process before it can be safely rebooted or updated.
    #[serde(rename = "callDrainingState", skip_serializing_if = "Option::is_none")]
    pub call_draining_state: Option<CallDrainingState>,
    /// The remaining number of conversations the Edge has to drain before it can be safely rebooted or updated. When an Edge is not draining conversations, this will be NULL or 0.
    #[serde(rename = "conversationCount", skip_serializing_if = "Option::is_none")]
    pub conversation_count: Option<i32>,
    /// Edge HTTP proxy configuration for the WAN port. The field can be a hostname, FQDN, IPv4 or IPv6 address. If port is not included, port 80 is assumed.
    #[serde(rename = "proxy", skip_serializing_if = "Option::is_none")]
    pub proxy: Option<String>,
    /// True if the offline edge configuration endpoint has been called for this edge.
    #[serde(rename = "offlineConfigCalled", skip_serializing_if = "Option::is_none")]
    pub offline_config_called: Option<bool>,
    /// The name provided by the operating system of the Edge.
    #[serde(rename = "osName", skip_serializing_if = "Option::is_none")]
    pub os_name: Option<String>,
    /// The URI for this object
    #[serde(rename = "selfUri", skip_serializing_if = "Option::is_none")]
    pub self_uri: Option<String>,
}

impl Edge {
    pub fn new(name: String) -> Edge {
        Edge {
            id: None,
            name,
            division: None,
            description: None,
            version: None,
            date_created: None,
            date_modified: None,
            modified_by: None,
            created_by: None,
            state: None,
            modified_by_app: None,
            created_by_app: None,
            interfaces: None,
            make: None,
            model: None,
            api_version: None,
            software_version: None,
            software_version_timestamp: None,
            software_version_platform: None,
            software_version_configuration: None,
            full_software_version: None,
            pairing_id: None,
            fingerprint: None,
            fingerprint_hint: None,
            current_version: None,
            staged_version: None,
            patch: None,
            status_code: None,
            edge_group: None,
            site: None,
            software_status: None,
            online_status: None,
            serial_number: None,
            physical_edge: None,
            managed: None,
            edge_deployment_type: None,
            call_draining_state: None,
            conversation_count: None,
            proxy: None,
            offline_config_called: None,
            os_name: None,
            self_uri: None,
        }
    }
}

/// Indicates if the resource is active, inactive, or deleted.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "active")]
    Active,
    #[serde(rename = "inactive")]
    Inactive,
    #[serde(rename = "deleted")]
    Deleted,
}

impl Default for State {
    fn default() -> State {
        Self::Active
    }
}
/// The current status of the Edge.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum StatusCode {
    #[serde(rename = "NEW")]
    NEW,
    #[serde(rename = "AWAITING_CONNECTION")]
    AWAITINGCONNECTION,
    #[serde(rename = "AWAITING_FINGERPRINT")]
    AWAITINGFINGERPRINT,
    #[serde(rename = "AWAITING_FINGERPRINT_VERIFICATION")]
    AWAITINGFINGERPRINTVERIFICATION,
    #[serde(rename = "FINGERPRINT_VERIFIED")]
    FINGERPRINTVERIFIED,
    #[serde(rename = "AWAITING_BOOTSTRAP")]
    AWAITINGBOOTSTRAP,
    #[serde(rename = "ACTIVE")]
    ACTIVE,
    #[serde(rename = "INACTIVE")]
    INACTIVE,
    #[serde(rename = "RMA")]
    RMA,
    #[serde(rename = "UNPAIRING")]
    UNPAIRING,
    #[serde(rename = "UNPAIRED")]
    UNPAIRED,
    #[serde(rename = "INITIALIZING")]
    INITIALIZING,
}

impl Default for StatusCode {
    fn default() -> StatusCode {
        Self::NEW
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OnlineStatus {
    #[serde(rename = "ONLINE")]
    ONLINE,
    #[serde(rename = "OFFLINE")]
    OFFLINE,
}

impl Default for OnlineStatus {
    fn default() -> OnlineStatus {
        Self::ONLINE
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EdgeDeploymentType {
    #[serde(rename = "HARDWARE")]
    HARDWARE,
    #[serde(rename = "LDM")]
    LDM,
    #[serde(rename = "CDM")]
    CDM,
    #[serde(rename = "CHS")]
    CHS,
    #[serde(rename = "INVALID")]
    INVALID,
}

impl Default for EdgeDeploymentType {
    fn default() -> EdgeDeploymentType {
        Self::HARDWARE
    }
}
/// The current state of the Edge's call draining process before it can be safely rebooted or updated.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CallDrainingState {
    #[serde(rename = "NONE")]
    NONE,
    #[serde(rename = "WAIT")]
    WAIT,
    #[serde(rename = "WAIT_TIMEOUT")]
    WAITTIMEOUT,
    #[serde(rename = "TERMINATE")]
    TERMINATE,
    #[serde(rename = "COMPLETE")]
    COMPLETE,
}

impl Default for CallDrainingState {
    fn default() -> CallDrainingState {
        Self::NONE
    }
}

