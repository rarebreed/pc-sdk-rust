/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct GdprRequest {
    /// The globally unique identifier for the object.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "createdBy")]
    pub created_by: Box<crate::models::DomainEntityRef>,
    /// The replacement terms for the provided search terms, in the case of a GDPR_UPDATE request
    #[serde(rename = "replacementTerms", skip_serializing_if = "Option::is_none")]
    pub replacement_terms: Option<Vec<crate::models::ReplacementTerm>>,
    /// The type of GDPR request
    #[serde(rename = "requestType")]
    pub request_type: RequestType,
    /// When the request was submitted. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "createdDate")]
    pub created_date: String,
    /// The status of the request
    #[serde(rename = "status")]
    pub status: Status,
    #[serde(rename = "subject")]
    pub subject: Box<crate::models::GdprSubject>,
    /// The location where the results of the request can be retrieved
    #[serde(rename = "resultsUrl", skip_serializing_if = "Option::is_none")]
    pub results_url: Option<String>,
    /// The URI for this object
    #[serde(rename = "selfUri", skip_serializing_if = "Option::is_none")]
    pub self_uri: Option<String>,
}

impl GdprRequest {
    pub fn new(created_by: crate::models::DomainEntityRef, request_type: RequestType, created_date: String, status: Status, subject: crate::models::GdprSubject) -> GdprRequest {
        GdprRequest {
            id: None,
            name: None,
            created_by: Box::new(created_by),
            replacement_terms: None,
            request_type,
            created_date,
            status,
            subject: Box::new(subject),
            results_url: None,
            self_uri: None,
        }
    }
}

/// The type of GDPR request
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RequestType {
    #[serde(rename = "GDPR_EXPORT")]
    EXPORT,
    #[serde(rename = "GDPR_UPDATE")]
    UPDATE,
    #[serde(rename = "GDPR_DELETE")]
    DELETE,
}

impl Default for RequestType {
    fn default() -> RequestType {
        Self::EXPORT
    }
}
/// The status of the request
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "INITIATED")]
    INITIATED,
    #[serde(rename = "SEARCHING")]
    SEARCHING,
    #[serde(rename = "UPDATING")]
    UPDATING,
    #[serde(rename = "DELETING")]
    DELETING,
    #[serde(rename = "COMPLETED")]
    COMPLETED,
    #[serde(rename = "ERROR")]
    ERROR,
    #[serde(rename = "FINALIZING")]
    FINALIZING,
}

impl Default for Status {
    fn default() -> Status {
        Self::INITIATED
    }
}

