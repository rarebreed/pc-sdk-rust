/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct CallConversation {
    /// The globally unique identifier for the object.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The list of participants involved in the conversation.
    #[serde(rename = "participants", skip_serializing_if = "Option::is_none")]
    pub participants: Option<Vec<crate::models::CallMediaParticipant>>,
    /// The list of other media channels involved in the conversation.
    #[serde(rename = "otherMediaUris", skip_serializing_if = "Option::is_none")]
    pub other_media_uris: Option<Vec<String>>,
    #[serde(rename = "recordingState", skip_serializing_if = "Option::is_none")]
    pub recording_state: Option<RecordingState>,
    /// If this is a conference conversation, then this field indicates the maximum number of participants allowed to participant in the conference.
    #[serde(rename = "maxParticipants", skip_serializing_if = "Option::is_none")]
    pub max_participants: Option<i32>,
    /// The URI for this object
    #[serde(rename = "selfUri", skip_serializing_if = "Option::is_none")]
    pub self_uri: Option<String>,
}

impl CallConversation {
    pub fn new() -> CallConversation {
        CallConversation {
            id: None,
            name: None,
            participants: None,
            other_media_uris: None,
            recording_state: None,
            max_participants: None,
            self_uri: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RecordingState {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "active")]
    Active,
    #[serde(rename = "paused")]
    Paused,
}

impl Default for RecordingState {
    fn default() -> RecordingState {
        Self::None
    }
}

