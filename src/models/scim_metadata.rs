/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */

/// ScimMetadata : Defines the SCIM metadata.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ScimMetadata {
    /// The type of SCIM resource.
    #[serde(rename = "resourceType", skip_serializing_if = "Option::is_none")]
    pub resource_type: Option<ResourceType>,
    /// The last time that the resource was modified. Date time is represented as an \"ISO-8601 string\", for example, yyyy-MM-ddTHH:mm:ss.SSSZ. Not included with \"Schema\" and \"ResourceType\" resources.
    #[serde(rename = "lastModified", skip_serializing_if = "Option::is_none")]
    pub last_modified: Option<String>,
    /// The URI of the resource.
    #[serde(rename = "location", skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    /// The version of the resource. Matches the ETag HTTP response header. Not included with \"Schema\" and \"ResourceType\" resources.
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

impl ScimMetadata {
    /// Defines the SCIM metadata.
    pub fn new() -> ScimMetadata {
        ScimMetadata {
            resource_type: None,
            last_modified: None,
            location: None,
            version: None,
        }
    }
}

/// The type of SCIM resource.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ResourceType {
    #[serde(rename = "User")]
    User,
    #[serde(rename = "Group")]
    Group,
    #[serde(rename = "ServiceProviderConfig")]
    ServiceProviderConfig,
    #[serde(rename = "ResourceType")]
    ResourceType,
    #[serde(rename = "Schema")]
    Schema,
}

impl Default for ResourceType {
    fn default() -> ResourceType {
        Self::User
    }
}

