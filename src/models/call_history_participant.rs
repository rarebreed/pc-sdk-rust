/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct CallHistoryParticipant {
    /// The unique participant ID.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The display friendly name of the participant.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The participant address.
    #[serde(rename = "address", skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    /// The time when this participant first joined the conversation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "startTime", skip_serializing_if = "Option::is_none")]
    pub start_time: Option<String>,
    /// The time when this participant went disconnected for this media (eg: video disconnected time). Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "endTime", skip_serializing_if = "Option::is_none")]
    pub end_time: Option<String>,
    /// The participant's purpose.  Values can be: 'agent', 'user', 'customer', 'external', 'acd', 'ivr
    #[serde(rename = "purpose", skip_serializing_if = "Option::is_none")]
    pub purpose: Option<String>,
    /// The participant's direction.  Values can be: 'inbound' or 'outbound'
    #[serde(rename = "direction", skip_serializing_if = "Option::is_none")]
    pub direction: Option<Direction>,
    /// The call ANI.
    #[serde(rename = "ani", skip_serializing_if = "Option::is_none")]
    pub ani: Option<String>,
    /// The call DNIS.
    #[serde(rename = "dnis", skip_serializing_if = "Option::is_none")]
    pub dnis: Option<String>,
    #[serde(rename = "user", skip_serializing_if = "Option::is_none")]
    pub user: Option<Box<crate::models::User>>,
    #[serde(rename = "queue", skip_serializing_if = "Option::is_none")]
    pub queue: Option<Box<crate::models::Queue>>,
    #[serde(rename = "group", skip_serializing_if = "Option::is_none")]
    pub group: Option<Box<crate::models::Group>>,
    /// The reason the participant was disconnected from the conversation.
    #[serde(rename = "disconnectType", skip_serializing_if = "Option::is_none")]
    pub disconnect_type: Option<DisconnectType>,
    #[serde(rename = "externalContact", skip_serializing_if = "Option::is_none")]
    pub external_contact: Option<Box<crate::models::ExternalContact>>,
    #[serde(rename = "externalOrganization", skip_serializing_if = "Option::is_none")]
    pub external_organization: Option<Box<crate::models::ExternalOrganization>>,
    /// Indicates whether the contact ever connected
    #[serde(rename = "didInteract", skip_serializing_if = "Option::is_none")]
    pub did_interact: Option<bool>,
    /// Indicates SIP Response codes associated with the participant
    #[serde(rename = "sipResponseCodes", skip_serializing_if = "Option::is_none")]
    pub sip_response_codes: Option<Vec<i64>>,
    /// The reason specifying why participant flagged the conversation.
    #[serde(rename = "flaggedReason", skip_serializing_if = "Option::is_none")]
    pub flagged_reason: Option<FlaggedReason>,
    #[serde(rename = "outboundCampaign", skip_serializing_if = "Option::is_none")]
    pub outbound_campaign: Option<Box<crate::models::Campaign>>,
}

impl CallHistoryParticipant {
    pub fn new() -> CallHistoryParticipant {
        CallHistoryParticipant {
            id: None,
            name: None,
            address: None,
            start_time: None,
            end_time: None,
            purpose: None,
            direction: None,
            ani: None,
            dnis: None,
            user: None,
            queue: None,
            group: None,
            disconnect_type: None,
            external_contact: None,
            external_organization: None,
            did_interact: None,
            sip_response_codes: None,
            flagged_reason: None,
            outbound_campaign: None,
        }
    }
}

/// The participant's direction.  Values can be: 'inbound' or 'outbound'
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Direction {
    #[serde(rename = "inbound")]
    Inbound,
    #[serde(rename = "outbound")]
    Outbound,
}

impl Default for Direction {
    fn default() -> Direction {
        Self::Inbound
    }
}
/// The reason the participant was disconnected from the conversation.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DisconnectType {
    #[serde(rename = "endpoint")]
    Endpoint,
    #[serde(rename = "client")]
    Client,
    #[serde(rename = "system")]
    System,
    #[serde(rename = "transfer")]
    Transfer,
    #[serde(rename = "transfer.conference")]
    TransferConference,
    #[serde(rename = "transfer.consult")]
    TransferConsult,
    #[serde(rename = "transfer.forward")]
    TransferForward,
    #[serde(rename = "transfer.noanswer")]
    TransferNoanswer,
    #[serde(rename = "transfer.notavailable")]
    TransferNotavailable,
    #[serde(rename = "transport.failure")]
    TransportFailure,
    #[serde(rename = "error")]
    Error,
    #[serde(rename = "peer")]
    Peer,
    #[serde(rename = "other")]
    Other,
    #[serde(rename = "spam")]
    Spam,
}

impl Default for DisconnectType {
    fn default() -> DisconnectType {
        Self::Endpoint
    }
}
/// The reason specifying why participant flagged the conversation.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FlaggedReason {
    #[serde(rename = "general")]
    General,
}

impl Default for FlaggedReason {
    fn default() -> FlaggedReason {
        Self::General
    }
}

