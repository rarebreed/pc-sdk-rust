/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct SecureSession {
    /// The globally unique identifier for the object.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "flow")]
    pub flow: Box<crate::models::DomainEntityRef>,
    /// Customer-provided data
    #[serde(rename = "userData", skip_serializing_if = "Option::is_none")]
    pub user_data: Option<String>,
    /// The current state of a secure session
    #[serde(rename = "state")]
    pub state: State,
    /// Unique identifier for the participant initiating the secure session.
    #[serde(rename = "sourceParticipantId", skip_serializing_if = "Option::is_none")]
    pub source_participant_id: Option<String>,
    /// If true, disconnect the agent after creating the session
    #[serde(rename = "disconnect", skip_serializing_if = "Option::is_none")]
    pub disconnect: Option<bool>,
    /// The URI for this object
    #[serde(rename = "selfUri", skip_serializing_if = "Option::is_none")]
    pub self_uri: Option<String>,
}

impl SecureSession {
    pub fn new(flow: crate::models::DomainEntityRef, state: State) -> SecureSession {
        SecureSession {
            id: None,
            flow: Box::new(flow),
            user_data: None,
            state,
            source_participant_id: None,
            disconnect: None,
            self_uri: None,
        }
    }
}

/// The current state of a secure session
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "PENDING")]
    PENDING,
    #[serde(rename = "COMPLETED")]
    COMPLETED,
    #[serde(rename = "FAILED")]
    FAILED,
}

impl Default for State {
    fn default() -> State {
        Self::PENDING
    }
}

