/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct EntityTypeCriteria {
    /// The criteria key.
    #[serde(rename = "key")]
    pub key: String,
    /// The criteria values.
    #[serde(rename = "values")]
    pub values: Vec<String>,
    /// Should criteria be case insensitive.
    #[serde(rename = "shouldIgnoreCase")]
    pub should_ignore_case: bool,
    /// The comparison operator.
    #[serde(rename = "operator", skip_serializing_if = "Option::is_none")]
    pub operator: Option<Operator>,
    /// The entity to match the pattern against.
    #[serde(rename = "entityType", skip_serializing_if = "Option::is_none")]
    pub entity_type: Option<EntityType>,
}

impl EntityTypeCriteria {
    pub fn new(key: String, values: Vec<String>, should_ignore_case: bool) -> EntityTypeCriteria {
        EntityTypeCriteria {
            key,
            values,
            should_ignore_case,
            operator: None,
            entity_type: None,
        }
    }
}

/// The comparison operator.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Operator {
    #[serde(rename = "containsAll")]
    ContainsAll,
    #[serde(rename = "containsAny")]
    ContainsAny,
    #[serde(rename = "notContainsAll")]
    NotContainsAll,
    #[serde(rename = "notContainsAny")]
    NotContainsAny,
    #[serde(rename = "equal")]
    Equal,
    #[serde(rename = "notEqual")]
    NotEqual,
    #[serde(rename = "greaterThan")]
    GreaterThan,
    #[serde(rename = "greaterThanOrEqual")]
    GreaterThanOrEqual,
    #[serde(rename = "lessThan")]
    LessThan,
    #[serde(rename = "lessThanOrEqual")]
    LessThanOrEqual,
    #[serde(rename = "startsWith")]
    StartsWith,
    #[serde(rename = "endsWith")]
    EndsWith,
}

impl Default for Operator {
    fn default() -> Operator {
        Self::ContainsAll
    }
}
/// The entity to match the pattern against.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EntityType {
    #[serde(rename = "visit")]
    Visit,
}

impl Default for EntityType {
    fn default() -> EntityType {
        Self::Visit
    }
}

