/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct AnalyticsEvaluation {
    /// The calibration ID used for the purpose of training evaluators
    #[serde(rename = "calibrationId", skip_serializing_if = "Option::is_none")]
    pub calibration_id: Option<String>,
    /// A unique identifier for an evaluation form, regardless of version
    #[serde(rename = "contextId", skip_serializing_if = "Option::is_none")]
    pub context_id: Option<String>,
    /// Whether the evaluation has been deleted
    #[serde(rename = "deleted", skip_serializing_if = "Option::is_none")]
    pub deleted: Option<bool>,
    /// Unique identifier for the evaluation
    #[serde(rename = "evaluationId", skip_serializing_if = "Option::is_none")]
    pub evaluation_id: Option<String>,
    /// A unique identifier of the user who evaluated the interaction
    #[serde(rename = "evaluatorId", skip_serializing_if = "Option::is_none")]
    pub evaluator_id: Option<String>,
    /// Specifies when an evaluation occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "eventTime", skip_serializing_if = "Option::is_none")]
    pub event_time: Option<String>,
    /// ID of the evaluation form used
    #[serde(rename = "formId", skip_serializing_if = "Option::is_none")]
    pub form_id: Option<String>,
    /// Name of the evaluation form used
    #[serde(rename = "formName", skip_serializing_if = "Option::is_none")]
    pub form_name: Option<String>,
    /// The ID of the associated queue
    #[serde(rename = "queueId", skip_serializing_if = "Option::is_none")]
    pub queue_id: Option<String>,
    /// Whether the evaluation has been released
    #[serde(rename = "released", skip_serializing_if = "Option::is_none")]
    pub released: Option<bool>,
    /// Whether the evaluation has been rescored at least once
    #[serde(rename = "rescored", skip_serializing_if = "Option::is_none")]
    pub rescored: Option<bool>,
    /// ID of the agent the evaluation was performed against
    #[serde(rename = "userId", skip_serializing_if = "Option::is_none")]
    pub user_id: Option<String>,
    #[serde(rename = "oTotalCriticalScore", skip_serializing_if = "Option::is_none")]
    pub o_total_critical_score: Option<i64>,
    #[serde(rename = "oTotalScore", skip_serializing_if = "Option::is_none")]
    pub o_total_score: Option<i64>,
}

impl AnalyticsEvaluation {
    pub fn new() -> AnalyticsEvaluation {
        AnalyticsEvaluation {
            calibration_id: None,
            context_id: None,
            deleted: None,
            evaluation_id: None,
            evaluator_id: None,
            event_time: None,
            form_id: None,
            form_name: None,
            queue_id: None,
            released: None,
            rescored: None,
            user_id: None,
            o_total_critical_score: None,
            o_total_score: None,
        }
    }
}


