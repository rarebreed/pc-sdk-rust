/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */

/// LearningModuleRequest : Learning module request



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct LearningModuleRequest {
    /// The name of learning module
    #[serde(rename = "name")]
    pub name: String,
    /// The description of learning module
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The completion time of learning module in days
    #[serde(rename = "completionTimeInDays")]
    pub completion_time_in_days: i32,
    /// The list of inform steps in a learning module
    #[serde(rename = "informSteps", skip_serializing_if = "Option::is_none")]
    pub inform_steps: Option<Vec<crate::models::LearningModuleInformStepRequest>>,
    /// The type for the learning module
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<Type>,
    #[serde(rename = "assessmentForm", skip_serializing_if = "Option::is_none")]
    pub assessment_form: Option<Box<crate::models::AssessmentForm>>,
}

impl LearningModuleRequest {
    /// Learning module request
    pub fn new(name: String, completion_time_in_days: i32) -> LearningModuleRequest {
        LearningModuleRequest {
            name,
            description: None,
            completion_time_in_days,
            inform_steps: None,
            _type: None,
            assessment_form: None,
        }
    }
}

/// The type for the learning module
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "Informational")]
    Informational,
    #[serde(rename = "AssessedContent")]
    AssessedContent,
    #[serde(rename = "Assessment")]
    Assessment,
}

impl Default for Type {
    fn default() -> Type {
        Self::Informational
    }
}

