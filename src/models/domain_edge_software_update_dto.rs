/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct DomainEdgeSoftwareUpdateDto {
    #[serde(rename = "version")]
    pub version: Box<crate::models::DomainEdgeSoftwareVersionDto>,
    #[serde(rename = "maxDownloadRate", skip_serializing_if = "Option::is_none")]
    pub max_download_rate: Option<i32>,
    /// Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "downloadStartTime", skip_serializing_if = "Option::is_none")]
    pub download_start_time: Option<String>,
    /// Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "executeStartTime", skip_serializing_if = "Option::is_none")]
    pub execute_start_time: Option<String>,
    /// Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "executeStopTime", skip_serializing_if = "Option::is_none")]
    pub execute_stop_time: Option<String>,
    #[serde(rename = "executeOnIdle", skip_serializing_if = "Option::is_none")]
    pub execute_on_idle: Option<bool>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    #[serde(rename = "edgeUri", skip_serializing_if = "Option::is_none")]
    pub edge_uri: Option<String>,
    #[serde(rename = "callDrainingWaitTimeSeconds", skip_serializing_if = "Option::is_none")]
    pub call_draining_wait_time_seconds: Option<i64>,
    #[serde(rename = "current", skip_serializing_if = "Option::is_none")]
    pub current: Option<bool>,
}

impl DomainEdgeSoftwareUpdateDto {
    pub fn new(version: crate::models::DomainEdgeSoftwareVersionDto) -> DomainEdgeSoftwareUpdateDto {
        DomainEdgeSoftwareUpdateDto {
            version: Box::new(version),
            max_download_rate: None,
            download_start_time: None,
            execute_start_time: None,
            execute_stop_time: None,
            execute_on_idle: None,
            status: None,
            edge_uri: None,
            call_draining_wait_time_seconds: None,
            current: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "NONE")]
    NONE,
    #[serde(rename = "INIT")]
    INIT,
    #[serde(rename = "IN_PROGRESS")]
    INPROGRESS,
    #[serde(rename = "EXPIRED")]
    EXPIRED,
    #[serde(rename = "EXCEPTION")]
    EXCEPTION,
    #[serde(rename = "ABORTED")]
    ABORTED,
    #[serde(rename = "FAILED")]
    FAILED,
    #[serde(rename = "SUCCEEDED")]
    SUCCEEDED,
    #[serde(rename = "DELETE")]
    DELETE,
}

impl Default for Status {
    fn default() -> Status {
        Self::NONE
    }
}

