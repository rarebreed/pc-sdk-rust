/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */

/// OpenMessagingChannel : Channel-specific information that describes the message and the message channel/provider.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct OpenMessagingChannel {
    /// The Messaging Platform integration ID.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The provider type.
    #[serde(rename = "platform", skip_serializing_if = "Option::is_none")]
    pub platform: Option<Platform>,
    /// Specifies if this message is part of a private or public conversation.
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<Type>,
    /// Unique provider ID of the message such as a Facebook message ID.
    #[serde(rename = "messageId")]
    pub message_id: String,
    #[serde(rename = "to")]
    pub to: Box<crate::models::OpenMessagingToRecipient>,
    #[serde(rename = "from")]
    pub from: Box<crate::models::OpenMessagingFromRecipient>,
    /// Original time of the event. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "time")]
    pub time: String,
    /// Information about the channel.
    #[serde(rename = "metadata", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<serde_json::Value>,
}

impl OpenMessagingChannel {
    /// Channel-specific information that describes the message and the message channel/provider.
    pub fn new(message_id: String, to: crate::models::OpenMessagingToRecipient, from: crate::models::OpenMessagingFromRecipient, time: String) -> OpenMessagingChannel {
        OpenMessagingChannel {
            id: None,
            platform: None,
            _type: None,
            message_id,
            to: Box::new(to),
            from: Box::new(from),
            time,
            metadata: None,
        }
    }
}

/// The provider type.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Platform {
    #[serde(rename = "Open")]
    Open,
}

impl Default for Platform {
    fn default() -> Platform {
        Self::Open
    }
}
/// Specifies if this message is part of a private or public conversation.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "Private")]
    Private,
}

impl Default for Type {
    fn default() -> Type {
        Self::Private
    }
}

