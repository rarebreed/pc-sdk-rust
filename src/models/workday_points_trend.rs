/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct WorkdayPointsTrend {
    /// The start workday for the query range for the gamification points trend. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
    #[serde(rename = "dateStartWorkday", skip_serializing_if = "Option::is_none")]
    pub date_start_workday: Option<String>,
    /// The end workday for the query range for the gamification points trend. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
    #[serde(rename = "dateEndWorkday", skip_serializing_if = "Option::is_none")]
    pub date_end_workday: Option<String>,
    #[serde(rename = "user", skip_serializing_if = "Option::is_none")]
    pub user: Option<Box<crate::models::UserReference>>,
    /// Aggregated for same day comparison
    #[serde(rename = "dayOfWeek", skip_serializing_if = "Option::is_none")]
    pub day_of_week: Option<DayOfWeek>,
    /// The total average points
    #[serde(rename = "averagePoints", skip_serializing_if = "Option::is_none")]
    pub average_points: Option<f64>,
    /// Daily points trends
    #[serde(rename = "trend", skip_serializing_if = "Option::is_none")]
    pub trend: Option<Vec<crate::models::WorkdayPointsTrendItem>>,
}

impl WorkdayPointsTrend {
    pub fn new() -> WorkdayPointsTrend {
        WorkdayPointsTrend {
            date_start_workday: None,
            date_end_workday: None,
            user: None,
            day_of_week: None,
            average_points: None,
            trend: None,
        }
    }
}

/// Aggregated for same day comparison
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DayOfWeek {
    #[serde(rename = "Sunday")]
    Sunday,
    #[serde(rename = "Monday")]
    Monday,
    #[serde(rename = "Tuesday")]
    Tuesday,
    #[serde(rename = "Wednesday")]
    Wednesday,
    #[serde(rename = "Thursday")]
    Thursday,
    #[serde(rename = "Friday")]
    Friday,
    #[serde(rename = "Saturday")]
    Saturday,
}

impl Default for DayOfWeek {
    fn default() -> DayOfWeek {
        Self::Sunday
    }
}

