/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct CallHistoryConversation {
    /// The globally unique identifier for the object.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The list of participants involved in the conversation.
    #[serde(rename = "participants", skip_serializing_if = "Option::is_none")]
    pub participants: Option<Vec<crate::models::CallHistoryParticipant>>,
    /// The direction of the call relating to the current user
    #[serde(rename = "direction", skip_serializing_if = "Option::is_none")]
    pub direction: Option<Direction>,
    /// Did the call end in the current user's voicemail
    #[serde(rename = "wentToVoicemail", skip_serializing_if = "Option::is_none")]
    pub went_to_voicemail: Option<bool>,
    /// Did the user not answer this conversation
    #[serde(rename = "missedCall", skip_serializing_if = "Option::is_none")]
    pub missed_call: Option<bool>,
    /// The time the user joined the conversation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "startTime", skip_serializing_if = "Option::is_none")]
    pub start_time: Option<String>,
    /// Was this conversation a conference
    #[serde(rename = "wasConference", skip_serializing_if = "Option::is_none")]
    pub was_conference: Option<bool>,
    /// Was this conversation a callback
    #[serde(rename = "wasCallback", skip_serializing_if = "Option::is_none")]
    pub was_callback: Option<bool>,
    /// Did this conversation have a screen share session
    #[serde(rename = "hadScreenShare", skip_serializing_if = "Option::is_none")]
    pub had_screen_share: Option<bool>,
    /// Did this conversation have a cobrowse session
    #[serde(rename = "hadCobrowse", skip_serializing_if = "Option::is_none")]
    pub had_cobrowse: Option<bool>,
    /// Was this conversation associated with an outbound campaign
    #[serde(rename = "wasOutboundCampaign", skip_serializing_if = "Option::is_none")]
    pub was_outbound_campaign: Option<bool>,
    /// The URI for this object
    #[serde(rename = "selfUri", skip_serializing_if = "Option::is_none")]
    pub self_uri: Option<String>,
}

impl CallHistoryConversation {
    pub fn new() -> CallHistoryConversation {
        CallHistoryConversation {
            id: None,
            name: None,
            participants: None,
            direction: None,
            went_to_voicemail: None,
            missed_call: None,
            start_time: None,
            was_conference: None,
            was_callback: None,
            had_screen_share: None,
            had_cobrowse: None,
            was_outbound_campaign: None,
            self_uri: None,
        }
    }
}

/// The direction of the call relating to the current user
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Direction {
    #[serde(rename = "inbound")]
    Inbound,
    #[serde(rename = "outbound")]
    Outbound,
}

impl Default for Direction {
    fn default() -> Direction {
        Self::Inbound
    }
}

