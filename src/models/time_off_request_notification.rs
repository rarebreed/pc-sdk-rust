/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct TimeOffRequestNotification {
    /// The ID of this time off request
    #[serde(rename = "timeOffRequestId", skip_serializing_if = "Option::is_none")]
    pub time_off_request_id: Option<String>,
    #[serde(rename = "user", skip_serializing_if = "Option::is_none")]
    pub user: Option<Box<crate::models::UserReference>>,
    /// Whether this is a full day request (false means partial day)
    #[serde(rename = "isFullDayRequest", skip_serializing_if = "Option::is_none")]
    pub is_full_day_request: Option<bool>,
    /// The status of this time off request
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    /// A set of start date-times in ISO-8601 format for partial day requests.  Will be not empty if isFullDayRequest == false
    #[serde(rename = "partialDayStartDateTimes", skip_serializing_if = "Option::is_none")]
    pub partial_day_start_date_times: Option<Vec<String>>,
    /// A set of dates in yyyy-MM-dd format.  Should be interpreted in the management unit's configured time zone.  Will be not empty if isFullDayRequest == true
    #[serde(rename = "fullDayManagementUnitDates", skip_serializing_if = "Option::is_none")]
    pub full_day_management_unit_dates: Option<Vec<String>>,
}

impl TimeOffRequestNotification {
    pub fn new() -> TimeOffRequestNotification {
        TimeOffRequestNotification {
            time_off_request_id: None,
            user: None,
            is_full_day_request: None,
            status: None,
            partial_day_start_date_times: None,
            full_day_management_unit_dates: None,
        }
    }
}

/// The status of this time off request
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "PENDING")]
    PENDING,
    #[serde(rename = "APPROVED")]
    APPROVED,
    #[serde(rename = "DENIED")]
    DENIED,
    #[serde(rename = "CANCELED")]
    CANCELED,
}

impl Default for Status {
    fn default() -> Status {
        Self::PENDING
    }
}

