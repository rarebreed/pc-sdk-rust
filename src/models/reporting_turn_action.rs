/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ReportingTurnAction {
    /// The ID of the action in the bot flow.
    #[serde(rename = "actionId", skip_serializing_if = "Option::is_none")]
    pub action_id: Option<String>,
    /// The name of the action in the bot flow.
    #[serde(rename = "actionName", skip_serializing_if = "Option::is_none")]
    pub action_name: Option<String>,
    /// The number of the action in the bot flow.
    #[serde(rename = "actionNumber", skip_serializing_if = "Option::is_none")]
    pub action_number: Option<i32>,
    #[serde(rename = "actionType", skip_serializing_if = "Option::is_none")]
    pub action_type: Option<ActionType>,
}

impl ReportingTurnAction {
    pub fn new() -> ReportingTurnAction {
        ReportingTurnAction {
            action_id: None,
            action_name: None,
            action_number: None,
            action_type: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ActionType {
    #[serde(rename = "AskForNLUIntentAction")]
    AskForNLUIntentAction,
    #[serde(rename = "AskForBooleanAction")]
    AskForBooleanAction,
    #[serde(rename = "AskForSlotAction")]
    AskForSlotAction,
    #[serde(rename = "AskForNLUNextIntentAction")]
    AskForNLUNextIntentAction,
    #[serde(rename = "BotState")]
    BotState,
    #[serde(rename = "DisconnectAction")]
    DisconnectAction,
    #[serde(rename = "ExitBotFlowAction")]
    ExitBotFlowAction,
    #[serde(rename = "CallTaskAction")]
    CallTaskAction,
    #[serde(rename = "EndTaskAction")]
    EndTaskAction,
    #[serde(rename = "UpdateVariableAction")]
    UpdateVariableAction,
    #[serde(rename = "CommunicateAction")]
    CommunicateAction,
    #[serde(rename = "DecisionAction")]
    DecisionAction,
    #[serde(rename = "SwitchAction")]
    SwitchAction,
    #[serde(rename = "DataAction")]
    DataAction,
    #[serde(rename = "DataTableLookupAction")]
    DataTableLookupAction,
    #[serde(rename = "GetExternalContactAction")]
    GetExternalContactAction,
    #[serde(rename = "GetExternalOrganizationAction")]
    GetExternalOrganizationAction,
    #[serde(rename = "LoopAction")]
    LoopAction,
    #[serde(rename = "ExitLoopAction")]
    ExitLoopAction,
    #[serde(rename = "NextLoopAction")]
    NextLoopAction,
    #[serde(rename = "LoopUntilAction")]
    LoopUntilAction,
    #[serde(rename = "SetActiveIntentAction")]
    SetActiveIntentAction,
    #[serde(rename = "ClearSlotAction")]
    ClearSlotAction,
    #[serde(rename = "SetFlowOutcomeAction")]
    SetFlowOutcomeAction,
    #[serde(rename = "InitializeFlowOutcomeAction")]
    InitializeFlowOutcomeAction,
    #[serde(rename = "AddFlowMilestoneAction")]
    AddFlowMilestoneAction,
    #[serde(rename = "AskForStringAction")]
    AskForStringAction,
    #[serde(rename = "SendResponseAction")]
    SendResponseAction,
    #[serde(rename = "GetResponseAction")]
    GetResponseAction,
    #[serde(rename = "Unknown")]
    Unknown,
}

impl Default for ActionType {
    fn default() -> ActionType {
        Self::AskForNLUIntentAction
    }
}

