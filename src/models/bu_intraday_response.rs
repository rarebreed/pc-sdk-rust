/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct BuIntradayResponse {
    /// The start of the date range for which this data applies.  This is also the start reference point for the intervals represented in the various arrays. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "startDate", skip_serializing_if = "Option::is_none")]
    pub start_date: Option<String>,
    /// The end of the date range for which this data applies. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "endDate", skip_serializing_if = "Option::is_none")]
    pub end_date: Option<String>,
    /// The aggregation period in minutes, which determines the interval duration of the returned data
    #[serde(rename = "intervalLengthMinutes", skip_serializing_if = "Option::is_none")]
    pub interval_length_minutes: Option<i32>,
    /// If not null, the reason there was no data for the request
    #[serde(rename = "noDataReason", skip_serializing_if = "Option::is_none")]
    pub no_data_reason: Option<NoDataReason>,
    /// The categories to which this data corresponds
    #[serde(rename = "categories", skip_serializing_if = "Option::is_none")]
    pub categories: Option<Vec<Categories>>,
    #[serde(rename = "shortTermForecast", skip_serializing_if = "Option::is_none")]
    pub short_term_forecast: Option<Box<crate::models::BuShortTermForecastReference>>,
    #[serde(rename = "schedule", skip_serializing_if = "Option::is_none")]
    pub schedule: Option<Box<crate::models::BuScheduleReference>>,
    /// Intraday data grouped by a single media type and set of planning group IDs
    #[serde(rename = "intradayDataGroupings", skip_serializing_if = "Option::is_none")]
    pub intraday_data_groupings: Option<Vec<crate::models::BuIntradayDataGroup>>,
}

impl BuIntradayResponse {
    pub fn new() -> BuIntradayResponse {
        BuIntradayResponse {
            start_date: None,
            end_date: None,
            interval_length_minutes: None,
            no_data_reason: None,
            categories: None,
            short_term_forecast: None,
            schedule: None,
            intraday_data_groupings: None,
        }
    }
}

/// If not null, the reason there was no data for the request
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum NoDataReason {
    #[serde(rename = "NoPublishedSchedule")]
    NoPublishedSchedule,
    #[serde(rename = "NoSourceForecast")]
    NoSourceForecast,
}

impl Default for NoDataReason {
    fn default() -> NoDataReason {
        Self::NoPublishedSchedule
    }
}
/// The categories to which this data corresponds
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Categories {
    #[serde(rename = "ForecastData")]
    ForecastData,
    #[serde(rename = "ScheduleData")]
    ScheduleData,
    #[serde(rename = "PerformancePredictionData")]
    PerformancePredictionData,
}

impl Default for Categories {
    fn default() -> Categories {
        Self::ForecastData
    }
}

