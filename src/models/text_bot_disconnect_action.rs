/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */

/// TextBotDisconnectAction : Settings for a next-action of disconnecting, including the reason code for the disconnect.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct TextBotDisconnectAction {
    /// The reason for the disconnect.
    #[serde(rename = "reason")]
    pub reason: Reason,
    /// Extended information related to the reason, if available.
    #[serde(rename = "reasonExtendedInfo", skip_serializing_if = "Option::is_none")]
    pub reason_extended_info: Option<String>,
    #[serde(rename = "flowLocation", skip_serializing_if = "Option::is_none")]
    pub flow_location: Option<Box<crate::models::TextBotFlowLocation>>,
    /// The list of Flow Outcomes for the bot flow and their details.
    #[serde(rename = "flowOutcomes", skip_serializing_if = "Option::is_none")]
    pub flow_outcomes: Option<Vec<crate::models::TextBotFlowOutcome>>,
}

impl TextBotDisconnectAction {
    /// Settings for a next-action of disconnecting, including the reason code for the disconnect.
    pub fn new(reason: Reason) -> TextBotDisconnectAction {
        TextBotDisconnectAction {
            reason,
            reason_extended_info: None,
            flow_location: None,
            flow_outcomes: None,
        }
    }
}

/// The reason for the disconnect.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Reason {
    #[serde(rename = "TriggeredByUser")]
    TriggeredByUser,
    #[serde(rename = "TriggeredByFlow")]
    TriggeredByFlow,
    #[serde(rename = "SessionExpired")]
    SessionExpired,
    #[serde(rename = "Error")]
    Error,
    #[serde(rename = "RecognitionFailure")]
    RecognitionFailure,
}

impl Default for Reason {
    fn default() -> Reason {
        Self::TriggeredByUser
    }
}

