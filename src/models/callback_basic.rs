/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct CallbackBasic {
    /// The connection state of this communication.
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<State>,
    /// A globally unique identifier for this communication.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The time line of the participant's callback, divided into activity segments.
    #[serde(rename = "segments", skip_serializing_if = "Option::is_none")]
    pub segments: Option<Vec<crate::models::Segment>>,
    /// The direction of the call
    #[serde(rename = "direction", skip_serializing_if = "Option::is_none")]
    pub direction: Option<Direction>,
    /// True if this call is held and the person on this side hears silence.
    #[serde(rename = "held", skip_serializing_if = "Option::is_none")]
    pub held: Option<bool>,
    /// System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.
    #[serde(rename = "disconnectType", skip_serializing_if = "Option::is_none")]
    pub disconnect_type: Option<DisconnectType>,
    /// The timestamp the callback was placed on hold in the cloud clock if the callback is currently on hold. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "startHoldTime", skip_serializing_if = "Option::is_none")]
    pub start_hold_time: Option<String>,
    #[serde(rename = "dialerPreview", skip_serializing_if = "Option::is_none")]
    pub dialer_preview: Option<Box<crate::models::DialerPreview>>,
    #[serde(rename = "voicemail", skip_serializing_if = "Option::is_none")]
    pub voicemail: Option<Box<crate::models::Voicemail>>,
    /// The phone number(s) to use to place the callback.
    #[serde(rename = "callbackNumbers", skip_serializing_if = "Option::is_none")]
    pub callback_numbers: Option<Vec<String>>,
    /// The name of the user requesting a callback.
    #[serde(rename = "callbackUserName", skip_serializing_if = "Option::is_none")]
    pub callback_user_name: Option<String>,
    /// The UUID of the script to use.
    #[serde(rename = "scriptId", skip_serializing_if = "Option::is_none")]
    pub script_id: Option<String>,
    /// True if the call for the callback uses external dialing.
    #[serde(rename = "externalCampaign", skip_serializing_if = "Option::is_none")]
    pub external_campaign: Option<bool>,
    /// True if the ability to skip a callback should be enabled.
    #[serde(rename = "skipEnabled", skip_serializing_if = "Option::is_none")]
    pub skip_enabled: Option<bool>,
    /// The number of seconds before the system automatically places a call for a callback.  0 means the automatic placement is disabled.
    #[serde(rename = "timeoutSeconds", skip_serializing_if = "Option::is_none")]
    pub timeout_seconds: Option<i32>,
    /// The timestamp the communication has when it is first put into an alerting state. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "startAlertingTime", skip_serializing_if = "Option::is_none")]
    pub start_alerting_time: Option<String>,
    /// The timestamp when this communication was connected in the cloud clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "connectedTime", skip_serializing_if = "Option::is_none")]
    pub connected_time: Option<String>,
    /// The timestamp when this communication disconnected from the conversation in the provider clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "disconnectedTime", skip_serializing_if = "Option::is_none")]
    pub disconnected_time: Option<String>,
    /// The timestamp when this communication is scheduled in the provider clock. If this value is missing it indicates the callback will be placed immediately. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "callbackScheduledTime", skip_serializing_if = "Option::is_none")]
    pub callback_scheduled_time: Option<String>,
    /// The id of the config for automatically placing the callback (and handling the disposition). If null, the callback will not be placed automatically but routed to an agent as per normal.
    #[serde(rename = "automatedCallbackConfigId", skip_serializing_if = "Option::is_none")]
    pub automated_callback_config_id: Option<String>,
    /// The source provider for the callback.
    #[serde(rename = "provider", skip_serializing_if = "Option::is_none")]
    pub provider: Option<String>,
    /// The id of the peer communication corresponding to a matching leg for this communication.
    #[serde(rename = "peerId", skip_serializing_if = "Option::is_none")]
    pub peer_id: Option<String>,
    #[serde(rename = "wrapup", skip_serializing_if = "Option::is_none")]
    pub wrapup: Option<Box<crate::models::Wrapup>>,
    #[serde(rename = "afterCallWork", skip_serializing_if = "Option::is_none")]
    pub after_call_work: Option<Box<crate::models::AfterCallWork>>,
    /// Indicates if after-call work is required for a communication. Only used when the ACW Setting is Agent Requested.
    #[serde(rename = "afterCallWorkRequired", skip_serializing_if = "Option::is_none")]
    pub after_call_work_required: Option<bool>,
    /// The phone number displayed to recipients of the phone call. The value should conform to the E164 format.
    #[serde(rename = "callerId", skip_serializing_if = "Option::is_none")]
    pub caller_id: Option<String>,
    /// The name displayed to recipients of the phone call.
    #[serde(rename = "callerIdName", skip_serializing_if = "Option::is_none")]
    pub caller_id_name: Option<String>,
}

impl CallbackBasic {
    pub fn new() -> CallbackBasic {
        CallbackBasic {
            state: None,
            id: None,
            segments: None,
            direction: None,
            held: None,
            disconnect_type: None,
            start_hold_time: None,
            dialer_preview: None,
            voicemail: None,
            callback_numbers: None,
            callback_user_name: None,
            script_id: None,
            external_campaign: None,
            skip_enabled: None,
            timeout_seconds: None,
            start_alerting_time: None,
            connected_time: None,
            disconnected_time: None,
            callback_scheduled_time: None,
            automated_callback_config_id: None,
            provider: None,
            peer_id: None,
            wrapup: None,
            after_call_work: None,
            after_call_work_required: None,
            caller_id: None,
            caller_id_name: None,
        }
    }
}

/// The connection state of this communication.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "alerting")]
    Alerting,
    #[serde(rename = "dialing")]
    Dialing,
    #[serde(rename = "contacting")]
    Contacting,
    #[serde(rename = "offering")]
    Offering,
    #[serde(rename = "connected")]
    Connected,
    #[serde(rename = "disconnected")]
    Disconnected,
    #[serde(rename = "terminated")]
    Terminated,
    #[serde(rename = "scheduled")]
    Scheduled,
    #[serde(rename = "none")]
    None,
}

impl Default for State {
    fn default() -> State {
        Self::Alerting
    }
}
/// The direction of the call
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Direction {
    #[serde(rename = "inbound")]
    Inbound,
    #[serde(rename = "outbound")]
    Outbound,
}

impl Default for Direction {
    fn default() -> Direction {
        Self::Inbound
    }
}
/// System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DisconnectType {
    #[serde(rename = "endpoint")]
    Endpoint,
    #[serde(rename = "client")]
    Client,
    #[serde(rename = "system")]
    System,
    #[serde(rename = "timeout")]
    Timeout,
    #[serde(rename = "transfer")]
    Transfer,
    #[serde(rename = "transfer.conference")]
    TransferConference,
    #[serde(rename = "transfer.consult")]
    TransferConsult,
    #[serde(rename = "transfer.forward")]
    TransferForward,
    #[serde(rename = "transfer.noanswer")]
    TransferNoanswer,
    #[serde(rename = "transfer.notavailable")]
    TransferNotavailable,
    #[serde(rename = "transport.failure")]
    TransportFailure,
    #[serde(rename = "error")]
    Error,
    #[serde(rename = "peer")]
    Peer,
    #[serde(rename = "other")]
    Other,
    #[serde(rename = "spam")]
    Spam,
    #[serde(rename = "uncallable")]
    Uncallable,
}

impl Default for DisconnectType {
    fn default() -> DisconnectType {
        Self::Endpoint
    }
}

