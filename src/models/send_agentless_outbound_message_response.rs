/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct SendAgentlessOutboundMessageResponse {
    /// The globally unique identifier for the object.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The identifier of the conversation.
    #[serde(rename = "conversationId", skip_serializing_if = "Option::is_none")]
    pub conversation_id: Option<String>,
    /// The sender of the message.
    #[serde(rename = "fromAddress", skip_serializing_if = "Option::is_none")]
    pub from_address: Option<String>,
    /// The recipient of the message.
    #[serde(rename = "toAddress", skip_serializing_if = "Option::is_none")]
    pub to_address: Option<String>,
    /// Type of messenger.
    #[serde(rename = "messengerType", skip_serializing_if = "Option::is_none")]
    pub messenger_type: Option<MessengerType>,
    /// The body of the text message.
    #[serde(rename = "textBody", skip_serializing_if = "Option::is_none")]
    pub text_body: Option<String>,
    #[serde(rename = "messagingTemplate", skip_serializing_if = "Option::is_none")]
    pub messaging_template: Option<Box<crate::models::MessagingTemplateRequest>>,
    /// Use an existing active conversation to send the agentless outbound message. Set this parameter to 'true' to use active conversation. Default value: false
    #[serde(rename = "useExistingActiveConversation", skip_serializing_if = "Option::is_none")]
    pub use_existing_active_conversation: Option<bool>,
    /// The time when the message was sent. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "timestamp", skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<String>,
    /// The URI for this object
    #[serde(rename = "selfUri", skip_serializing_if = "Option::is_none")]
    pub self_uri: Option<String>,
    #[serde(rename = "user", skip_serializing_if = "Option::is_none")]
    pub user: Option<Box<crate::models::AddressableEntityRef>>,
}

impl SendAgentlessOutboundMessageResponse {
    pub fn new() -> SendAgentlessOutboundMessageResponse {
        SendAgentlessOutboundMessageResponse {
            id: None,
            conversation_id: None,
            from_address: None,
            to_address: None,
            messenger_type: None,
            text_body: None,
            messaging_template: None,
            use_existing_active_conversation: None,
            timestamp: None,
            self_uri: None,
            user: None,
        }
    }
}

/// Type of messenger.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MessengerType {
    #[serde(rename = "sms")]
    Sms,
    #[serde(rename = "facebook")]
    Facebook,
    #[serde(rename = "twitter")]
    Twitter,
    #[serde(rename = "line")]
    Line,
    #[serde(rename = "whatsapp")]
    Whatsapp,
    #[serde(rename = "webmessaging")]
    Webmessaging,
    #[serde(rename = "instagram")]
    Instagram,
    #[serde(rename = "open")]
    Open,
}

impl Default for MessengerType {
    fn default() -> MessengerType {
        Self::Sms
    }
}

