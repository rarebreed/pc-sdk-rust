/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */

/// WfmHistoricalAdherenceResponse : Response for Historical Adherence Query, intended to tell the client what to listen for on a notification topic



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct WfmHistoricalAdherenceResponse {
    /// The query ID to listen for
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Deprecated. Use downloadUrls instead.
    #[serde(rename = "downloadUrl", skip_serializing_if = "Option::is_none")]
    pub download_url: Option<String>,
    #[serde(rename = "downloadResult", skip_serializing_if = "Option::is_none")]
    pub download_result: Option<Box<crate::models::WfmHistoricalAdherenceResultWrapper>>,
    /// The uri list to GET the results of the Historical Adherence query. For notification purposes only
    #[serde(rename = "downloadUrls", skip_serializing_if = "Option::is_none")]
    pub download_urls: Option<Vec<String>>,
    /// The state of the adherence query
    #[serde(rename = "queryState", skip_serializing_if = "Option::is_none")]
    pub query_state: Option<QueryState>,
}

impl WfmHistoricalAdherenceResponse {
    /// Response for Historical Adherence Query, intended to tell the client what to listen for on a notification topic
    pub fn new() -> WfmHistoricalAdherenceResponse {
        WfmHistoricalAdherenceResponse {
            id: None,
            download_url: None,
            download_result: None,
            download_urls: None,
            query_state: None,
        }
    }
}

/// The state of the adherence query
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum QueryState {
    #[serde(rename = "Processing")]
    Processing,
    #[serde(rename = "Complete")]
    Complete,
    #[serde(rename = "Error")]
    Error,
}

impl Default for QueryState {
    fn default() -> QueryState {
        Self::Processing
    }
}

