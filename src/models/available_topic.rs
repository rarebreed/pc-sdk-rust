/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct AvailableTopic {
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Full detailed permissions required to subscribe to the topic
    #[serde(rename = "permissionDetails", skip_serializing_if = "Option::is_none")]
    pub permission_details: Option<Vec<crate::models::PermissionDetails>>,
    /// Permissions required to subscribe to the topic
    #[serde(rename = "requiresPermissions", skip_serializing_if = "Option::is_none")]
    pub requires_permissions: Option<Vec<String>>,
    /// True if the subscribing user must belong to the same division as the topic object ID
    #[serde(rename = "requiresDivisionPermissions", skip_serializing_if = "Option::is_none")]
    pub requires_division_permissions: Option<bool>,
    /// If multiple permissions are required for this topic, such as both requiresCurrentUser and requiresDivisionPermissions, then true here indicates that meeting any one condition will satisfy the requirements; false indicates all conditions must be met.
    #[serde(rename = "requiresAnyValidator", skip_serializing_if = "Option::is_none")]
    pub requires_any_validator: Option<bool>,
    /// Whether or not the permissions on this topic are enforced
    #[serde(rename = "enforced", skip_serializing_if = "Option::is_none")]
    pub enforced: Option<bool>,
    /// Visibility of this topic (Public or Preview)
    #[serde(rename = "visibility", skip_serializing_if = "Option::is_none")]
    pub visibility: Option<Visibility>,
    #[serde(rename = "schema", skip_serializing_if = "Option::is_none")]
    pub schema: Option<::std::collections::HashMap<String, serde_json::Value>>,
    /// True if the topic user ID is required to match the subscribing user ID
    #[serde(rename = "requiresCurrentUser", skip_serializing_if = "Option::is_none")]
    pub requires_current_user: Option<bool>,
    /// True if permissions are only required when the topic user ID does not match the subscribing user ID
    #[serde(rename = "requiresCurrentUserOrPermission", skip_serializing_if = "Option::is_none")]
    pub requires_current_user_or_permission: Option<bool>,
    /// Transports that support events for the topic
    #[serde(rename = "transports", skip_serializing_if = "Option::is_none")]
    pub transports: Option<Vec<Transports>>,
    #[serde(rename = "publicApiTemplateUriPaths", skip_serializing_if = "Option::is_none")]
    pub public_api_template_uri_paths: Option<Vec<String>>,
    /// Parameters in the topic name that can be substituted, in the order they appear in the topic name
    #[serde(rename = "topicParameters", skip_serializing_if = "Option::is_none")]
    pub topic_parameters: Option<Vec<String>>,
}

impl AvailableTopic {
    pub fn new() -> AvailableTopic {
        AvailableTopic {
            description: None,
            id: None,
            permission_details: None,
            requires_permissions: None,
            requires_division_permissions: None,
            requires_any_validator: None,
            enforced: None,
            visibility: None,
            schema: None,
            requires_current_user: None,
            requires_current_user_or_permission: None,
            transports: None,
            public_api_template_uri_paths: None,
            topic_parameters: None,
        }
    }
}

/// Visibility of this topic (Public or Preview)
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Visibility {
    #[serde(rename = "Public")]
    Public,
    #[serde(rename = "Preview")]
    Preview,
}

impl Default for Visibility {
    fn default() -> Visibility {
        Self::Public
    }
}
/// Transports that support events for the topic
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Transports {
    #[serde(rename = "All")]
    All,
    #[serde(rename = "Websocket")]
    Websocket,
    #[serde(rename = "EventBridge")]
    EventBridge,
}

impl Default for Transports {
    fn default() -> Transports {
        Self::All
    }
}

