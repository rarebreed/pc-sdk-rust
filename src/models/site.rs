/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Site {
    /// The globally unique identifier for the object.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The name of the entity.
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "division", skip_serializing_if = "Option::is_none")]
    pub division: Option<Box<crate::models::Division>>,
    /// The resource's description.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The current version of the resource.
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<i32>,
    /// The date the resource was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "dateCreated", skip_serializing_if = "Option::is_none")]
    pub date_created: Option<String>,
    /// The date of the last modification to the resource. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "dateModified", skip_serializing_if = "Option::is_none")]
    pub date_modified: Option<String>,
    /// The ID of the user that last modified the resource.
    #[serde(rename = "modifiedBy", skip_serializing_if = "Option::is_none")]
    pub modified_by: Option<String>,
    /// The ID of the user that created the resource.
    #[serde(rename = "createdBy", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<String>,
    /// Indicates if the resource is active, inactive, or deleted.
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<State>,
    /// The application that last modified the resource.
    #[serde(rename = "modifiedByApp", skip_serializing_if = "Option::is_none")]
    pub modified_by_app: Option<String>,
    /// The application that created the resource.
    #[serde(rename = "createdByApp", skip_serializing_if = "Option::is_none")]
    pub created_by_app: Option<String>,
    #[serde(rename = "primarySites", skip_serializing_if = "Option::is_none")]
    pub primary_sites: Option<Vec<crate::models::DomainEntityRef>>,
    #[serde(rename = "secondarySites", skip_serializing_if = "Option::is_none")]
    pub secondary_sites: Option<Vec<crate::models::DomainEntityRef>>,
    #[serde(rename = "primaryEdges", skip_serializing_if = "Option::is_none")]
    pub primary_edges: Option<Vec<crate::models::Edge>>,
    #[serde(rename = "secondaryEdges", skip_serializing_if = "Option::is_none")]
    pub secondary_edges: Option<Vec<crate::models::Edge>>,
    #[serde(rename = "addresses", skip_serializing_if = "Option::is_none")]
    pub addresses: Option<Vec<crate::models::Contact>>,
    #[serde(rename = "edges", skip_serializing_if = "Option::is_none")]
    pub edges: Option<Vec<crate::models::Edge>>,
    #[serde(rename = "edgeAutoUpdateConfig", skip_serializing_if = "Option::is_none")]
    pub edge_auto_update_config: Option<Box<crate::models::EdgeAutoUpdateConfig>>,
    #[serde(rename = "mediaRegionsUseLatencyBased", skip_serializing_if = "Option::is_none")]
    pub media_regions_use_latency_based: Option<bool>,
    #[serde(rename = "location")]
    pub location: Box<crate::models::LocationDefinition>,
    #[serde(rename = "managed", skip_serializing_if = "Option::is_none")]
    pub managed: Option<bool>,
    #[serde(rename = "ntpSettings", skip_serializing_if = "Option::is_none")]
    pub ntp_settings: Option<Box<crate::models::NtpSettings>>,
    /// Media model for the site
    #[serde(rename = "mediaModel", skip_serializing_if = "Option::is_none")]
    pub media_model: Option<MediaModel>,
    /// Is this site a core site
    #[serde(rename = "coreSite", skip_serializing_if = "Option::is_none")]
    pub core_site: Option<bool>,
    /// The site connections
    #[serde(rename = "siteConnections", skip_serializing_if = "Option::is_none")]
    pub site_connections: Option<Vec<crate::models::SiteConnection>>,
    /// The URI for this object
    #[serde(rename = "selfUri", skip_serializing_if = "Option::is_none")]
    pub self_uri: Option<String>,
}

impl Site {
    pub fn new(name: String, location: crate::models::LocationDefinition) -> Site {
        Site {
            id: None,
            name,
            division: None,
            description: None,
            version: None,
            date_created: None,
            date_modified: None,
            modified_by: None,
            created_by: None,
            state: None,
            modified_by_app: None,
            created_by_app: None,
            primary_sites: None,
            secondary_sites: None,
            primary_edges: None,
            secondary_edges: None,
            addresses: None,
            edges: None,
            edge_auto_update_config: None,
            media_regions_use_latency_based: None,
            location: Box::new(location),
            managed: None,
            ntp_settings: None,
            media_model: None,
            core_site: None,
            site_connections: None,
            self_uri: None,
        }
    }
}

/// Indicates if the resource is active, inactive, or deleted.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "active")]
    Active,
    #[serde(rename = "inactive")]
    Inactive,
    #[serde(rename = "deleted")]
    Deleted,
}

impl Default for State {
    fn default() -> State {
        Self::Active
    }
}
/// Media model for the site
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MediaModel {
    #[serde(rename = "Premises")]
    Premises,
    #[serde(rename = "Cloud")]
    Cloud,
}

impl Default for MediaModel {
    fn default() -> MediaModel {
        Self::Premises
    }
}

