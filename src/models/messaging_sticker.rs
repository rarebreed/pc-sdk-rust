/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct MessagingSticker {
    /// The globally unique identifier for the object.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The sticker Id of the sticker, assigned by the sticker provider.
    #[serde(rename = "providerStickerId")]
    pub provider_sticker_id: i32,
    /// The package Id of the sticker, assigned by the sticker provider.
    #[serde(rename = "providerPackageId", skip_serializing_if = "Option::is_none")]
    pub provider_package_id: Option<i32>,
    /// The package name of the sticker, assigned by the sticker provider.
    #[serde(rename = "packageName", skip_serializing_if = "Option::is_none")]
    pub package_name: Option<String>,
    /// The type of the messenger provider.
    #[serde(rename = "messengerType")]
    pub messenger_type: MessengerType,
    /// The type of the sticker.
    #[serde(rename = "stickerType")]
    pub sticker_type: StickerType,
    /// The version of the sticker, assigned by the provider.
    #[serde(rename = "providerVersion", skip_serializing_if = "Option::is_none")]
    pub provider_version: Option<i64>,
    #[serde(rename = "uriLocation", skip_serializing_if = "Option::is_none")]
    pub uri_location: Option<String>,
    /// The URI for this object
    #[serde(rename = "selfUri", skip_serializing_if = "Option::is_none")]
    pub self_uri: Option<String>,
}

impl MessagingSticker {
    pub fn new(provider_sticker_id: i32, messenger_type: MessengerType, sticker_type: StickerType) -> MessagingSticker {
        MessagingSticker {
            id: None,
            name: None,
            provider_sticker_id,
            provider_package_id: None,
            package_name: None,
            messenger_type,
            sticker_type,
            provider_version: None,
            uri_location: None,
            self_uri: None,
        }
    }
}

/// The type of the messenger provider.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MessengerType {
    #[serde(rename = "sms")]
    Sms,
    #[serde(rename = "facebook")]
    Facebook,
    #[serde(rename = "twitter")]
    Twitter,
    #[serde(rename = "line")]
    Line,
    #[serde(rename = "whatsapp")]
    Whatsapp,
    #[serde(rename = "webmessaging")]
    Webmessaging,
    #[serde(rename = "instagram")]
    Instagram,
    #[serde(rename = "open")]
    Open,
}

impl Default for MessengerType {
    fn default() -> MessengerType {
        Self::Sms
    }
}
/// The type of the sticker.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum StickerType {
    #[serde(rename = "standard")]
    Standard,
    #[serde(rename = "free")]
    Free,
    #[serde(rename = "paid")]
    Paid,
}

impl Default for StickerType {
    fn default() -> StickerType {
        Self::Standard
    }
}

