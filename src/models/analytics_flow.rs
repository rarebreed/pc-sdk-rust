/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct AnalyticsFlow {
    /// Flow ending language, e.g. en-us
    #[serde(rename = "endingLanguage", skip_serializing_if = "Option::is_none")]
    pub ending_language: Option<String>,
    /// The particular entry reason for this flow, e.g. an address, userId, or flowId
    #[serde(rename = "entryReason", skip_serializing_if = "Option::is_none")]
    pub entry_reason: Option<String>,
    /// The entry type for this flow, e.g. dnis, dialer, agent, flow, or direct
    #[serde(rename = "entryType", skip_serializing_if = "Option::is_none")]
    pub entry_type: Option<EntryType>,
    /// The exit reason for this flow, e.g. DISCONNECT
    #[serde(rename = "exitReason", skip_serializing_if = "Option::is_none")]
    pub exit_reason: Option<String>,
    /// The unique identifier of this flow
    #[serde(rename = "flowId", skip_serializing_if = "Option::is_none")]
    pub flow_id: Option<String>,
    /// The name of this flow at the time of flow execution
    #[serde(rename = "flowName", skip_serializing_if = "Option::is_none")]
    pub flow_name: Option<String>,
    /// The type of this flow
    #[serde(rename = "flowType", skip_serializing_if = "Option::is_none")]
    pub flow_type: Option<FlowType>,
    /// The version of this flow
    #[serde(rename = "flowVersion", skip_serializing_if = "Option::is_none")]
    pub flow_version: Option<String>,
    /// Flag indicating whether the flow issued a callback
    #[serde(rename = "issuedCallback", skip_serializing_if = "Option::is_none")]
    pub issued_callback: Option<bool>,
    /// The recognition failure reason causing to exit/disconnect
    #[serde(rename = "recognitionFailureReason", skip_serializing_if = "Option::is_none")]
    pub recognition_failure_reason: Option<String>,
    /// Flow starting language, e.g. en-us
    #[serde(rename = "startingLanguage", skip_serializing_if = "Option::is_none")]
    pub starting_language: Option<String>,
    /// The address of a flow transfer target, e.g. a phone number, an email address, or a queueId
    #[serde(rename = "transferTargetAddress", skip_serializing_if = "Option::is_none")]
    pub transfer_target_address: Option<String>,
    /// The name of a flow transfer target
    #[serde(rename = "transferTargetName", skip_serializing_if = "Option::is_none")]
    pub transfer_target_name: Option<String>,
    /// The type of transfer for flows that ended with a transfer
    #[serde(rename = "transferType", skip_serializing_if = "Option::is_none")]
    pub transfer_type: Option<String>,
    /// Flow outcomes
    #[serde(rename = "outcomes", skip_serializing_if = "Option::is_none")]
    pub outcomes: Option<Vec<crate::models::AnalyticsFlowOutcome>>,
}

impl AnalyticsFlow {
    pub fn new() -> AnalyticsFlow {
        AnalyticsFlow {
            ending_language: None,
            entry_reason: None,
            entry_type: None,
            exit_reason: None,
            flow_id: None,
            flow_name: None,
            flow_type: None,
            flow_version: None,
            issued_callback: None,
            recognition_failure_reason: None,
            starting_language: None,
            transfer_target_address: None,
            transfer_target_name: None,
            transfer_type: None,
            outcomes: None,
        }
    }
}

/// The entry type for this flow, e.g. dnis, dialer, agent, flow, or direct
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EntryType {
    #[serde(rename = "agent")]
    Agent,
    #[serde(rename = "direct")]
    Direct,
    #[serde(rename = "dnis")]
    Dnis,
    #[serde(rename = "flow")]
    Flow,
    #[serde(rename = "outbound")]
    Outbound,
}

impl Default for EntryType {
    fn default() -> EntryType {
        Self::Agent
    }
}
/// The type of this flow
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FlowType {
    #[serde(rename = "BOT")]
    BOT,
    #[serde(rename = "COMMONMODULE")]
    COMMONMODULE,
    #[serde(rename = "INBOUNDCALL")]
    INBOUNDCALL,
    #[serde(rename = "INBOUNDCHAT")]
    INBOUNDCHAT,
    #[serde(rename = "INBOUNDEMAIL")]
    INBOUNDEMAIL,
    #[serde(rename = "INBOUNDSHORTMESSAGE")]
    INBOUNDSHORTMESSAGE,
    #[serde(rename = "INQUEUECALL")]
    INQUEUECALL,
    #[serde(rename = "INQUEUEEMAIL")]
    INQUEUEEMAIL,
    #[serde(rename = "INQUEUESHORTMESSAGE")]
    INQUEUESHORTMESSAGE,
    #[serde(rename = "OUTBOUNDCALL")]
    OUTBOUNDCALL,
    #[serde(rename = "SECURECALL")]
    SECURECALL,
    #[serde(rename = "SPEECH")]
    SPEECH,
    #[serde(rename = "SURVEYINVITE")]
    SURVEYINVITE,
    #[serde(rename = "VOICEMAIL")]
    VOICEMAIL,
    #[serde(rename = "WORKFLOW")]
    WORKFLOW,
    #[serde(rename = "WORKITEM")]
    WORKITEM,
}

impl Default for FlowType {
    fn default() -> FlowType {
        Self::BOT
    }
}

