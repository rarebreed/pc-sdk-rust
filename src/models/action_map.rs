/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ActionMap {
    /// The globally unique identifier for the object.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The version of the action map.
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<i32>,
    /// Whether the action map is active.
    #[serde(rename = "isActive", skip_serializing_if = "Option::is_none")]
    pub is_active: Option<bool>,
    /// Display name of the action map.
    #[serde(rename = "displayName")]
    pub display_name: String,
    /// Trigger action map if any segment in the list is assigned to a given customer.
    #[serde(rename = "triggerWithSegments")]
    pub trigger_with_segments: Vec<String>,
    /// List of event conditions that must be satisfied to trigger the action map.
    #[serde(rename = "triggerWithEventConditions", skip_serializing_if = "Option::is_none")]
    pub trigger_with_event_conditions: Option<Vec<crate::models::EventCondition>>,
    /// Probability conditions for outcomes that must be satisfied to trigger the action map.
    #[serde(rename = "triggerWithOutcomeProbabilityConditions", skip_serializing_if = "Option::is_none")]
    pub trigger_with_outcome_probability_conditions: Option<Vec<crate::models::OutcomeProbabilityCondition>>,
    /// URL conditions that a page must match for web actions to be displayable.
    #[serde(rename = "pageUrlConditions")]
    pub page_url_conditions: Vec<crate::models::UrlCondition>,
    #[serde(rename = "activation", skip_serializing_if = "Option::is_none")]
    pub activation: Option<Box<crate::models::Activation>>,
    /// Weight of the action map with higher number denoting higher weight.
    #[serde(rename = "weight", skip_serializing_if = "Option::is_none")]
    pub weight: Option<i32>,
    #[serde(rename = "action", skip_serializing_if = "Option::is_none")]
    pub action: Option<Box<crate::models::ActionMapAction>>,
    #[serde(rename = "actionMapScheduleGroups", skip_serializing_if = "Option::is_none")]
    pub action_map_schedule_groups: Option<Box<crate::models::ActionMapScheduleGroups>>,
    /// Override organization-level frequency cap and always offer web engagements from this action map.
    #[serde(rename = "ignoreFrequencyCap", skip_serializing_if = "Option::is_none")]
    pub ignore_frequency_cap: Option<bool>,
    /// The URI for this object
    #[serde(rename = "selfUri", skip_serializing_if = "Option::is_none")]
    pub self_uri: Option<String>,
    /// Timestamp indicating when the action map was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "createdDate", skip_serializing_if = "Option::is_none")]
    pub created_date: Option<String>,
    /// Timestamp indicating when the action map was last updated. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "modifiedDate", skip_serializing_if = "Option::is_none")]
    pub modified_date: Option<String>,
    /// Timestamp at which the action map is scheduled to start firing. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "startDate", skip_serializing_if = "Option::is_none")]
    pub start_date: Option<String>,
    /// Timestamp at which the action map is scheduled to stop firing. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "endDate", skip_serializing_if = "Option::is_none")]
    pub end_date: Option<String>,
}

impl ActionMap {
    pub fn new(display_name: String, trigger_with_segments: Vec<String>, page_url_conditions: Vec<crate::models::UrlCondition>) -> ActionMap {
        ActionMap {
            id: None,
            version: None,
            is_active: None,
            display_name,
            trigger_with_segments,
            trigger_with_event_conditions: None,
            trigger_with_outcome_probability_conditions: None,
            page_url_conditions,
            activation: None,
            weight: None,
            action: None,
            action_map_schedule_groups: None,
            ignore_frequency_cap: None,
            self_uri: None,
            created_date: None,
            modified_date: None,
            start_date: None,
            end_date: None,
        }
    }
}


