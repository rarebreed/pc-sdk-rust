/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct CoachingNotification {
    /// The globally unique identifier for the object.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The name of the appointment for this notification.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Indicates if notification is read or unread
    #[serde(rename = "markedAsRead", skip_serializing_if = "Option::is_none")]
    pub marked_as_read: Option<bool>,
    /// Action causing the notification.
    #[serde(rename = "actionType", skip_serializing_if = "Option::is_none")]
    pub action_type: Option<ActionType>,
    /// The relationship of this user to this notification's appointment
    #[serde(rename = "relationship", skip_serializing_if = "Option::is_none")]
    pub relationship: Option<Relationship>,
    /// The start time of the appointment relating to this notification. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "dateStart", skip_serializing_if = "Option::is_none")]
    pub date_start: Option<String>,
    /// The duration of the appointment on this notification
    #[serde(rename = "lengthInMinutes", skip_serializing_if = "Option::is_none")]
    pub length_in_minutes: Option<i32>,
    /// The status of the appointment for this notification
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    #[serde(rename = "user", skip_serializing_if = "Option::is_none")]
    pub user: Option<Box<crate::models::UserReference>>,
    #[serde(rename = "appointment", skip_serializing_if = "Option::is_none")]
    pub appointment: Option<Box<crate::models::CoachingAppointmentResponse>>,
    /// The URI for this object
    #[serde(rename = "selfUri", skip_serializing_if = "Option::is_none")]
    pub self_uri: Option<String>,
}

impl CoachingNotification {
    pub fn new() -> CoachingNotification {
        CoachingNotification {
            id: None,
            name: None,
            marked_as_read: None,
            action_type: None,
            relationship: None,
            date_start: None,
            length_in_minutes: None,
            status: None,
            user: None,
            appointment: None,
            self_uri: None,
        }
    }
}

/// Action causing the notification.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ActionType {
    #[serde(rename = "Create")]
    Create,
    #[serde(rename = "Update")]
    Update,
    #[serde(rename = "Delete")]
    Delete,
    #[serde(rename = "StatusChange")]
    StatusChange,
}

impl Default for ActionType {
    fn default() -> ActionType {
        Self::Create
    }
}
/// The relationship of this user to this notification's appointment
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Relationship {
    #[serde(rename = "Attendee")]
    Attendee,
    #[serde(rename = "Creator")]
    Creator,
    #[serde(rename = "Facilitator")]
    Facilitator,
}

impl Default for Relationship {
    fn default() -> Relationship {
        Self::Attendee
    }
}
/// The status of the appointment for this notification
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "Scheduled")]
    Scheduled,
    #[serde(rename = "InProgress")]
    InProgress,
    #[serde(rename = "Completed")]
    Completed,
    #[serde(rename = "InvalidSchedule")]
    InvalidSchedule,
}

impl Default for Status {
    fn default() -> Status {
        Self::Scheduled
    }
}

