/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct LimitChangeRequestDetails {
    /// The globally unique identifier for the object.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Limit key to be overridden (see https://developer.mypurecloud.com/api/rest/v2/organization/limits.html#available_limits)
    #[serde(rename = "key")]
    pub key: String,
    /// Namespace the key belongs to (see https://developer.mypurecloud.com/api/rest/v2/organization/limits.html#available_limits)
    #[serde(rename = "namespace")]
    pub namespace: String,
    /// Requested limit value for a given key
    #[serde(rename = "requestedValue")]
    pub requested_value: f64,
    /// Description of the need for the limit change request
    #[serde(rename = "description")]
    pub description: String,
    /// The support case url created by Care
    #[serde(rename = "supportCaseUrl")]
    pub support_case_url: String,
    /// The user who created the change request
    #[serde(rename = "createdBy", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<String>,
    /// Current status of the limit change request
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    /// Current limit value for a given key
    #[serde(rename = "currentValue", skip_serializing_if = "Option::is_none")]
    pub current_value: Option<f64>,
    /// The date of the limit change request creation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "dateCreated", skip_serializing_if = "Option::is_none")]
    pub date_created: Option<String>,
    /// List of statuses that a limit change request has gone through
    #[serde(rename = "statusHistory", skip_serializing_if = "Option::is_none")]
    pub status_history: Option<Vec<crate::models::StatusChange>>,
    /// The date of the limit change request completion (ChangeImplemented, Rejected, or RollbackImplemented. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "dateCompleted", skip_serializing_if = "Option::is_none")]
    pub date_completed: Option<String>,
    /// The user who last updated the status of the limit change request
    #[serde(rename = "lastChangedBy", skip_serializing_if = "Option::is_none")]
    pub last_changed_by: Option<String>,
    /// The reason for rejecting the limit override request
    #[serde(rename = "rejectReason", skip_serializing_if = "Option::is_none")]
    pub reject_reason: Option<RejectReason>,
    /// The URI for this object
    #[serde(rename = "selfUri", skip_serializing_if = "Option::is_none")]
    pub self_uri: Option<String>,
}

impl LimitChangeRequestDetails {
    pub fn new(key: String, namespace: String, requested_value: f64, description: String, support_case_url: String) -> LimitChangeRequestDetails {
        LimitChangeRequestDetails {
            id: None,
            key,
            namespace,
            requested_value,
            description,
            support_case_url,
            created_by: None,
            status: None,
            current_value: None,
            date_created: None,
            status_history: None,
            date_completed: None,
            last_changed_by: None,
            reject_reason: None,
            self_uri: None,
        }
    }
}

/// Current status of the limit change request
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "Open")]
    Open,
    #[serde(rename = "Approved")]
    Approved,
    #[serde(rename = "ImplementingChange")]
    ImplementingChange,
    #[serde(rename = "ChangeImplemented")]
    ChangeImplemented,
    #[serde(rename = "Rejected")]
    Rejected,
    #[serde(rename = "Rollback")]
    Rollback,
    #[serde(rename = "ImplementingRollback")]
    ImplementingRollback,
    #[serde(rename = "RollbackImplemented")]
    RollbackImplemented,
}

impl Default for Status {
    fn default() -> Status {
        Self::Open
    }
}
/// The reason for rejecting the limit override request
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RejectReason {
    #[serde(rename = "AlternativeExists")]
    AlternativeExists,
    #[serde(rename = "IncreaseNotRequired")]
    IncreaseNotRequired,
    #[serde(rename = "PlatformMisuse")]
    PlatformMisuse,
    #[serde(rename = "PlatformStability")]
    PlatformStability,
    #[serde(rename = "OtherReason")]
    OtherReason,
}

impl Default for RejectReason {
    fn default() -> RejectReason {
        Self::AlternativeExists
    }
}

