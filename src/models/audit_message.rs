/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct AuditMessage {
    /// AuditMessage ID.
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "user", skip_serializing_if = "Option::is_none")]
    pub user: Option<Box<crate::models::AuditUser>>,
    /// Correlation ID.
    #[serde(rename = "correlationId", skip_serializing_if = "Option::is_none")]
    pub correlation_id: Option<String>,
    /// Transaction ID.
    #[serde(rename = "transactionId", skip_serializing_if = "Option::is_none")]
    pub transaction_id: Option<String>,
    /// Whether or not this audit can be considered the initiator of the transaction it is a part of.
    #[serde(rename = "transactionInitiator", skip_serializing_if = "Option::is_none")]
    pub transaction_initiator: Option<bool>,
    /// The application through which the action of this AuditMessage was initiated.
    #[serde(rename = "application", skip_serializing_if = "Option::is_none")]
    pub application: Option<String>,
    /// The name of the service which sent this AuditMessage.
    #[serde(rename = "serviceName")]
    pub service_name: String,
    /// The level of this audit. USER or SYSTEM.
    #[serde(rename = "level")]
    pub level: String,
    /// The time at which the action of this AuditMessage was initiated.
    #[serde(rename = "timestamp", skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<String>,
    /// The time at which this AuditMessage was received.
    #[serde(rename = "receivedTimestamp")]
    pub received_timestamp: String,
    /// The status of the action of this AuditMessage
    #[serde(rename = "status")]
    pub status: String,
    /// The context of a system-level action
    #[serde(rename = "actionContext", skip_serializing_if = "Option::is_none")]
    pub action_context: Option<String>,
    /// A string representing the action that took place
    #[serde(rename = "action", skip_serializing_if = "Option::is_none")]
    pub action: Option<String>,
    /// Details about any changes that occurred in this audit
    #[serde(rename = "changes", skip_serializing_if = "Option::is_none")]
    pub changes: Option<Vec<crate::models::Change>>,
    #[serde(rename = "entity", skip_serializing_if = "Option::is_none")]
    pub entity: Option<Box<crate::models::AuditEntity>>,
    #[serde(rename = "serviceContext", skip_serializing_if = "Option::is_none")]
    pub service_context: Option<Box<crate::models::ServiceContext>>,
}

impl AuditMessage {
    pub fn new(id: String, service_name: String, level: String, received_timestamp: String, status: String) -> AuditMessage {
        AuditMessage {
            id,
            user: None,
            correlation_id: None,
            transaction_id: None,
            transaction_initiator: None,
            application: None,
            service_name,
            level,
            timestamp: None,
            received_timestamp,
            status,
            action_context: None,
            action: None,
            changes: None,
            entity: None,
            service_context: None,
        }
    }
}


