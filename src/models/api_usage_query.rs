/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ApiUsageQuery {
    /// Behaves like one clause in a SQL WHERE. Specifies the date and time range of data being queried. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss
    #[serde(rename = "interval")]
    pub interval: String,
    /// Date granularity of the results
    #[serde(rename = "granularity", skip_serializing_if = "Option::is_none")]
    pub granularity: Option<Granularity>,
    /// Behaves like a SQL GROUPBY. Allows for multiple levels of grouping as a list of dimensions. Partitions resulting aggregate computations into distinct named subgroups rather than across the entire result set as if it were one group.
    #[serde(rename = "groupBy", skip_serializing_if = "Option::is_none")]
    pub group_by: Option<Vec<GroupBy>>,
    /// Behaves like a SQL SELECT clause. Enables retrieving only named metrics. If omitted, all metrics that are available will be returned (like SELECT *).
    #[serde(rename = "metrics", skip_serializing_if = "Option::is_none")]
    pub metrics: Option<Vec<Metrics>>,
}

impl ApiUsageQuery {
    pub fn new(interval: String) -> ApiUsageQuery {
        ApiUsageQuery {
            interval,
            granularity: None,
            group_by: None,
            metrics: None,
        }
    }
}

/// Date granularity of the results
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Granularity {
    #[serde(rename = "Day")]
    Day,
    #[serde(rename = "Week")]
    Week,
    #[serde(rename = "Month")]
    Month,
}

impl Default for Granularity {
    fn default() -> Granularity {
        Self::Day
    }
}
/// Behaves like a SQL GROUPBY. Allows for multiple levels of grouping as a list of dimensions. Partitions resulting aggregate computations into distinct named subgroups rather than across the entire result set as if it were one group.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum GroupBy {
    #[serde(rename = "OAuthClientId")]
    OAuthClientId,
    #[serde(rename = "OrganizationId")]
    OrganizationId,
    #[serde(rename = "UserId")]
    UserId,
    #[serde(rename = "TemplateUri")]
    TemplateUri,
    #[serde(rename = "HttpMethod")]
    HttpMethod,
}

impl Default for GroupBy {
    fn default() -> GroupBy {
        Self::OAuthClientId
    }
}
/// Behaves like a SQL SELECT clause. Enables retrieving only named metrics. If omitted, all metrics that are available will be returned (like SELECT *).
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Metrics {
    #[serde(rename = "Status200")]
    Status200,
    #[serde(rename = "Status300")]
    Status300,
    #[serde(rename = "Status400")]
    Status400,
    #[serde(rename = "Status500")]
    Status500,
    #[serde(rename = "Status429")]
    Status429,
    #[serde(rename = "Requests")]
    Requests,
}

impl Default for Metrics {
    fn default() -> Metrics {
        Self::Status200
    }
}

