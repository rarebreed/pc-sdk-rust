/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Conversation {
    /// The globally unique identifier for the object.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The external tag associated with the conversation.
    #[serde(rename = "externalTag", skip_serializing_if = "Option::is_none")]
    pub external_tag: Option<String>,
    /// The time when the conversation started. This will be the time when the first participant joined the conversation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "startTime")]
    pub start_time: String,
    /// The time when the conversation ended. This will be the time when the last participant left the conversation, or null when the conversation is still active. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "endTime", skip_serializing_if = "Option::is_none")]
    pub end_time: Option<String>,
    /// The address of the conversation as seen from an external participant. For phone calls this will be the DNIS for inbound calls and the ANI for outbound calls. For other media types this will be the address of the destination participant for inbound and the address of the initiating participant for outbound.
    #[serde(rename = "address", skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    /// The list of all participants in the conversation.
    #[serde(rename = "participants")]
    pub participants: Vec<crate::models::Participant>,
    /// A list of conversations to merge into this conversation to create a conference. This field is null except when being used to create a conference.
    #[serde(rename = "conversationIds", skip_serializing_if = "Option::is_none")]
    pub conversation_ids: Option<Vec<String>>,
    /// If this is a conference conversation, then this field indicates the maximum number of participants allowed to participant in the conference.
    #[serde(rename = "maxParticipants", skip_serializing_if = "Option::is_none")]
    pub max_participants: Option<i32>,
    /// On update, 'paused' initiates a secure pause, 'active' resumes any paused recordings; otherwise indicates state of conversation recording.
    #[serde(rename = "recordingState", skip_serializing_if = "Option::is_none")]
    pub recording_state: Option<RecordingState>,
    /// The conversation's state
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<State>,
    /// Identifiers of divisions associated with this conversation
    #[serde(rename = "divisions", skip_serializing_if = "Option::is_none")]
    pub divisions: Option<Vec<crate::models::ConversationDivisionMembership>>,
    /// The URI for this object
    #[serde(rename = "selfUri", skip_serializing_if = "Option::is_none")]
    pub self_uri: Option<String>,
}

impl Conversation {
    pub fn new(start_time: String, participants: Vec<crate::models::Participant>) -> Conversation {
        Conversation {
            id: None,
            name: None,
            external_tag: None,
            start_time,
            end_time: None,
            address: None,
            participants,
            conversation_ids: None,
            max_participants: None,
            recording_state: None,
            state: None,
            divisions: None,
            self_uri: None,
        }
    }
}

/// On update, 'paused' initiates a secure pause, 'active' resumes any paused recordings; otherwise indicates state of conversation recording.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RecordingState {
    #[serde(rename = "ACTIVE")]
    ACTIVE,
    #[serde(rename = "PAUSED")]
    PAUSED,
    #[serde(rename = "NONE")]
    NONE,
}

impl Default for RecordingState {
    fn default() -> RecordingState {
        Self::ACTIVE
    }
}
/// The conversation's state
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "alerting")]
    Alerting,
    #[serde(rename = "dialing")]
    Dialing,
    #[serde(rename = "contacting")]
    Contacting,
    #[serde(rename = "offering")]
    Offering,
    #[serde(rename = "connected")]
    Connected,
    #[serde(rename = "disconnected")]
    Disconnected,
    #[serde(rename = "terminated")]
    Terminated,
    #[serde(rename = "converting")]
    Converting,
    #[serde(rename = "uploading")]
    Uploading,
    #[serde(rename = "transmitting")]
    Transmitting,
    #[serde(rename = "none")]
    None,
}

impl Default for State {
    fn default() -> State {
        Self::Alerting
    }
}

