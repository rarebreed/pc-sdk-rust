/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Station {
    /// The globally unique identifier for the object.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    /// The Id of the user currently logged in and associated with the station.
    #[serde(rename = "userId", skip_serializing_if = "Option::is_none")]
    pub user_id: Option<String>,
    /// The Id of the user configured for the station if it is of type inin_webrtc_softphone. Empty if station type is not inin_webrtc_softphone.
    #[serde(rename = "webRtcUserId", skip_serializing_if = "Option::is_none")]
    pub web_rtc_user_id: Option<String>,
    #[serde(rename = "primaryEdge", skip_serializing_if = "Option::is_none")]
    pub primary_edge: Option<Box<crate::models::DomainEntityRef>>,
    #[serde(rename = "secondaryEdge", skip_serializing_if = "Option::is_none")]
    pub secondary_edge: Option<Box<crate::models::DomainEntityRef>>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<String>,
    #[serde(rename = "lineAppearanceId", skip_serializing_if = "Option::is_none")]
    pub line_appearance_id: Option<String>,
    /// The default or configured value of media dscp for the station. Empty if station type is not inin_webrtc_softphone.
    #[serde(rename = "webRtcMediaDscp", skip_serializing_if = "Option::is_none")]
    pub web_rtc_media_dscp: Option<i32>,
    /// The default or configured value of persistent connection setting for the station. Empty if station type is not inin_webrtc_softphone.
    #[serde(rename = "webRtcPersistentEnabled", skip_serializing_if = "Option::is_none")]
    pub web_rtc_persistent_enabled: Option<bool>,
    /// Whether the station is configured to require TURN for routing WebRTC calls. Empty if station type is not inin_webrtc_softphone.
    #[serde(rename = "webRtcForceTurn", skip_serializing_if = "Option::is_none")]
    pub web_rtc_force_turn: Option<bool>,
    /// The number of call appearances on the station.
    #[serde(rename = "webRtcCallAppearances", skip_serializing_if = "Option::is_none")]
    pub web_rtc_call_appearances: Option<i32>,
    /// The URI for this object
    #[serde(rename = "selfUri", skip_serializing_if = "Option::is_none")]
    pub self_uri: Option<String>,
}

impl Station {
    pub fn new() -> Station {
        Station {
            id: None,
            name: None,
            description: None,
            status: None,
            user_id: None,
            web_rtc_user_id: None,
            primary_edge: None,
            secondary_edge: None,
            _type: None,
            line_appearance_id: None,
            web_rtc_media_dscp: None,
            web_rtc_persistent_enabled: None,
            web_rtc_force_turn: None,
            web_rtc_call_appearances: None,
            self_uri: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "AVAILABLE")]
    AVAILABLE,
    #[serde(rename = "ASSOCIATED")]
    ASSOCIATED,
}

impl Default for Status {
    fn default() -> Status {
        Self::AVAILABLE
    }
}

