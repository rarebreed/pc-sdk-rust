/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct InboundRoute {
    /// The globally unique identifier for the object.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The search pattern that the mailbox name should match.
    #[serde(rename = "pattern")]
    pub pattern: String,
    #[serde(rename = "queue", skip_serializing_if = "Option::is_none")]
    pub queue: Option<Box<crate::models::DomainEntityRef>>,
    /// The priority to use for routing.
    #[serde(rename = "priority", skip_serializing_if = "Option::is_none")]
    pub priority: Option<i32>,
    /// The skills to use for routing.
    #[serde(rename = "skills", skip_serializing_if = "Option::is_none")]
    pub skills: Option<Vec<crate::models::DomainEntityRef>>,
    #[serde(rename = "language", skip_serializing_if = "Option::is_none")]
    pub language: Option<Box<crate::models::DomainEntityRef>>,
    /// The sender name to use for outgoing replies.
    #[serde(rename = "fromName")]
    pub from_name: String,
    /// The sender email to use for outgoing replies.
    #[serde(rename = "fromEmail", skip_serializing_if = "Option::is_none")]
    pub from_email: Option<String>,
    #[serde(rename = "flow", skip_serializing_if = "Option::is_none")]
    pub flow: Option<Box<crate::models::DomainEntityRef>>,
    #[serde(rename = "replyEmailAddress", skip_serializing_if = "Option::is_none")]
    pub reply_email_address: Option<Box<crate::models::QueueEmailAddress>>,
    /// The recipients that should be  automatically blind copied on outbound emails associated with this InboundRoute.
    #[serde(rename = "autoBcc", skip_serializing_if = "Option::is_none")]
    pub auto_bcc: Option<Vec<crate::models::EmailAddress>>,
    #[serde(rename = "spamFlow", skip_serializing_if = "Option::is_none")]
    pub spam_flow: Option<Box<crate::models::DomainEntityRef>>,
    /// The URI for this object
    #[serde(rename = "selfUri", skip_serializing_if = "Option::is_none")]
    pub self_uri: Option<String>,
}

impl InboundRoute {
    pub fn new(pattern: String, from_name: String) -> InboundRoute {
        InboundRoute {
            id: None,
            name: None,
            pattern,
            queue: None,
            priority: None,
            skills: None,
            language: None,
            from_name,
            from_email: None,
            flow: None,
            reply_email_address: None,
            auto_bcc: None,
            spam_flow: None,
            self_uri: None,
        }
    }
}


