/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ContactListFilterPredicate {
    /// Contact list column from the ContactListFilter's contactList.
    #[serde(rename = "column", skip_serializing_if = "Option::is_none")]
    pub column: Option<String>,
    /// The type of data in the contact column.
    #[serde(rename = "columnType", skip_serializing_if = "Option::is_none")]
    pub column_type: Option<ColumnType>,
    /// The operator for this ContactListFilterPredicate.
    #[serde(rename = "operator", skip_serializing_if = "Option::is_none")]
    pub operator: Option<Operator>,
    /// Value with which to compare the contact's data. This could be text, a number, or a relative time. A value for relative time should follow the format PxxDTyyHzzM, where xx, yy, and zz specify the days, hours and minutes. For example, a value of P01DT08H30M corresponds to 1 day, 8 hours, and 30 minutes from now. To specify a time in the past, include a negative sign before each numeric value. For example, a value of P-01DT-08H-30M corresponds to 1 day, 8 hours, and 30 minutes in the past. You can also do things like P01DT00H-30M, which would correspond to 23 hours and 30 minutes from now (1 day - 30 minutes).
    #[serde(rename = "value", skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(rename = "range", skip_serializing_if = "Option::is_none")]
    pub range: Option<Box<crate::models::ContactListFilterRange>>,
    /// Inverts the result of the predicate (i.e., if the predicate returns true, inverting it will return false).
    #[serde(rename = "inverted", skip_serializing_if = "Option::is_none")]
    pub inverted: Option<bool>,
}

impl ContactListFilterPredicate {
    pub fn new() -> ContactListFilterPredicate {
        ContactListFilterPredicate {
            column: None,
            column_type: None,
            operator: None,
            value: None,
            range: None,
            inverted: None,
        }
    }
}

/// The type of data in the contact column.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ColumnType {
    #[serde(rename = "numeric")]
    Numeric,
    #[serde(rename = "alphabetic")]
    Alphabetic,
}

impl Default for ColumnType {
    fn default() -> ColumnType {
        Self::Numeric
    }
}
/// The operator for this ContactListFilterPredicate.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Operator {
    #[serde(rename = "EQUALS")]
    EQUALS,
    #[serde(rename = "LESS_THAN")]
    LESSTHAN,
    #[serde(rename = "LESS_THAN_EQUALS")]
    LESSTHANEQUALS,
    #[serde(rename = "GREATER_THAN")]
    GREATERTHAN,
    #[serde(rename = "GREATER_THAN_EQUALS")]
    GREATERTHANEQUALS,
    #[serde(rename = "CONTAINS")]
    CONTAINS,
    #[serde(rename = "BEGINS_WITH")]
    BEGINSWITH,
    #[serde(rename = "ENDS_WITH")]
    ENDSWITH,
    #[serde(rename = "BEFORE")]
    BEFORE,
    #[serde(rename = "AFTER")]
    AFTER,
    #[serde(rename = "BETWEEN")]
    BETWEEN,
    #[serde(rename = "IN")]
    _IN,
}

impl Default for Operator {
    fn default() -> Operator {
        Self::EQUALS
    }
}

