/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct UserDevice {
    /// The globally unique identifier for the object.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// device token sent by mobile clients.
    #[serde(rename = "deviceToken")]
    pub device_token: String,
    /// notification id of the device.
    #[serde(rename = "notificationId")]
    pub notification_id: String,
    /// make of the device.
    #[serde(rename = "make")]
    pub make: String,
    /// Device model
    #[serde(rename = "model")]
    pub model: String,
    /// if the device accepts notifications
    #[serde(rename = "acceptNotifications")]
    pub accept_notifications: bool,
    /// type of the device; ios or android
    #[serde(rename = "type")]
    pub _type: Type,
    #[serde(rename = "sessionHash", skip_serializing_if = "Option::is_none")]
    pub session_hash: Option<String>,
    /// The URI for this object
    #[serde(rename = "selfUri", skip_serializing_if = "Option::is_none")]
    pub self_uri: Option<String>,
}

impl UserDevice {
    pub fn new(device_token: String, notification_id: String, make: String, model: String, accept_notifications: bool, _type: Type) -> UserDevice {
        UserDevice {
            id: None,
            name: None,
            device_token,
            notification_id,
            make,
            model,
            accept_notifications,
            _type,
            session_hash: None,
            self_uri: None,
        }
    }
}

/// type of the device; ios or android
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "android")]
    Android,
    #[serde(rename = "ios")]
    Ios,
}

impl Default for Type {
    fn default() -> Type {
        Self::Android
    }
}

