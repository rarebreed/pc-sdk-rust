/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct VoicemailGroupPolicy {
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "group", skip_serializing_if = "Option::is_none")]
    pub group: Option<Box<crate::models::Group>>,
    /// Whether voicemail is enabled for the group
    #[serde(rename = "enabled", skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Whether email notifications are sent to group members when a new voicemail is received
    #[serde(rename = "sendEmailNotifications", skip_serializing_if = "Option::is_none")]
    pub send_email_notifications: Option<bool>,
    /// Removes any PII from group emails. This is overridden by the analogous organization configuration value. This is always true if HIPAA is enabled or unknown for an organization.
    #[serde(rename = "disableEmailPii", skip_serializing_if = "Option::is_none")]
    pub disable_email_pii: Option<bool>,
    /// How many seconds to ring before rotating to the next member in the group
    #[serde(rename = "rotateCallsSecs", skip_serializing_if = "Option::is_none")]
    pub rotate_calls_secs: Option<i32>,
    /// How many rotations to go through
    #[serde(rename = "stopRingingAfterRotations", skip_serializing_if = "Option::is_none")]
    pub stop_ringing_after_rotations: Option<i32>,
    /// A fallback group to contact when all of the members in this group did not answer the call.
    #[serde(rename = "overflowGroupId", skip_serializing_if = "Option::is_none")]
    pub overflow_group_id: Option<String>,
    /// Specifies if the members in this group should be contacted randomly, in a specific order, or by round-robin.
    #[serde(rename = "groupAlertType", skip_serializing_if = "Option::is_none")]
    pub group_alert_type: Option<GroupAlertType>,
    /// The prompt to use when connecting a user to a Group Ring call
    #[serde(rename = "interactiveResponsePromptId", skip_serializing_if = "Option::is_none")]
    pub interactive_response_prompt_id: Option<String>,
}

impl VoicemailGroupPolicy {
    pub fn new() -> VoicemailGroupPolicy {
        VoicemailGroupPolicy {
            name: None,
            group: None,
            enabled: None,
            send_email_notifications: None,
            disable_email_pii: None,
            rotate_calls_secs: None,
            stop_ringing_after_rotations: None,
            overflow_group_id: None,
            group_alert_type: None,
            interactive_response_prompt_id: None,
        }
    }
}

/// Specifies if the members in this group should be contacted randomly, in a specific order, or by round-robin.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum GroupAlertType {
    #[serde(rename = "RANDOM")]
    RANDOM,
    #[serde(rename = "ROUND_ROBIN")]
    ROUNDROBIN,
    #[serde(rename = "SEQUENTIAL")]
    SEQUENTIAL,
}

impl Default for GroupAlertType {
    fn default() -> GroupAlertType {
        Self::RANDOM
    }
}

