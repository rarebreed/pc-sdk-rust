/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ConversationProperties {
    /// Indicates filtering for waiting
    #[serde(rename = "isWaiting", skip_serializing_if = "Option::is_none")]
    pub is_waiting: Option<bool>,
    /// Indicates filtering for active
    #[serde(rename = "isActive", skip_serializing_if = "Option::is_none")]
    pub is_active: Option<bool>,
    /// Indicates filtering for Acd
    #[serde(rename = "isAcd", skip_serializing_if = "Option::is_none")]
    pub is_acd: Option<bool>,
    /// Indicates filtering for Preferred Agent Routing
    #[serde(rename = "isPreferred", skip_serializing_if = "Option::is_none")]
    pub is_preferred: Option<bool>,
    /// Indicates filtering for screenshare
    #[serde(rename = "isScreenshare", skip_serializing_if = "Option::is_none")]
    pub is_screenshare: Option<bool>,
    /// Indicates filtering for Cobrowse
    #[serde(rename = "isCobrowse", skip_serializing_if = "Option::is_none")]
    pub is_cobrowse: Option<bool>,
    /// Indicates filtering for Voice mail
    #[serde(rename = "isVoicemail", skip_serializing_if = "Option::is_none")]
    pub is_voicemail: Option<bool>,
    /// Indicates filtering for flagged
    #[serde(rename = "isFlagged", skip_serializing_if = "Option::is_none")]
    pub is_flagged: Option<bool>,
    /// Indicates filtering for monitored
    #[serde(rename = "isMonitored", skip_serializing_if = "Option::is_none")]
    pub is_monitored: Option<bool>,
    /// Indicates filtering for WrapUpNotes
    #[serde(rename = "filterWrapUpNotes", skip_serializing_if = "Option::is_none")]
    pub filter_wrap_up_notes: Option<bool>,
    /// Indicates comparison operation, TRUE indicates filters will use AND logic, FALSE indicates OR logic
    #[serde(rename = "matchAll", skip_serializing_if = "Option::is_none")]
    pub match_all: Option<bool>,
}

impl ConversationProperties {
    pub fn new() -> ConversationProperties {
        ConversationProperties {
            is_waiting: None,
            is_active: None,
            is_acd: None,
            is_preferred: None,
            is_screenshare: None,
            is_cobrowse: None,
            is_voicemail: None,
            is_flagged: None,
            is_monitored: None,
            filter_wrap_up_notes: None,
            match_all: None,
        }
    }
}


