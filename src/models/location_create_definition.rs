/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct LocationCreateDefinition {
    /// The name of the Location. Required for creates, not required for updates
    #[serde(rename = "name")]
    pub name: String,
    /// Current version of the location
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<i32>,
    /// Current activity status of the location.
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<State>,
    /// A list of ancestor ids
    #[serde(rename = "path", skip_serializing_if = "Option::is_none")]
    pub path: Option<Vec<String>>,
    /// Notes for the location
    #[serde(rename = "notes", skip_serializing_if = "Option::is_none")]
    pub notes: Option<String>,
    /// The user id of the location contact
    #[serde(rename = "contactUser", skip_serializing_if = "Option::is_none")]
    pub contact_user: Option<String>,
    #[serde(rename = "emergencyNumber", skip_serializing_if = "Option::is_none")]
    pub emergency_number: Option<Box<crate::models::LocationEmergencyNumber>>,
    #[serde(rename = "address", skip_serializing_if = "Option::is_none")]
    pub address: Option<Box<crate::models::LocationAddress>>,
}

impl LocationCreateDefinition {
    pub fn new(name: String) -> LocationCreateDefinition {
        LocationCreateDefinition {
            name,
            version: None,
            state: None,
            path: None,
            notes: None,
            contact_user: None,
            emergency_number: None,
            address: None,
        }
    }
}

/// Current activity status of the location.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "active")]
    Active,
    #[serde(rename = "deleted")]
    Deleted,
}

impl Default for State {
    fn default() -> State {
        Self::Active
    }
}

