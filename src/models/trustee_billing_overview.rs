/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct TrusteeBillingOverview {
    /// The globally unique identifier for the object.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "organization")]
    pub organization: Box<crate::models::NamedEntity>,
    /// The currency type.
    #[serde(rename = "currency")]
    pub currency: String,
    /// The charge short names for products enabled during the specified period.
    #[serde(rename = "enabledProducts")]
    pub enabled_products: Vec<String>,
    /// The subscription type.
    #[serde(rename = "subscriptionType")]
    pub subscription_type: SubscriptionType,
    /// Date-time the ramp period starts. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "rampPeriodStartDate", skip_serializing_if = "Option::is_none")]
    pub ramp_period_start_date: Option<String>,
    /// Date-time the ramp period ends. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "rampPeriodEndDate", skip_serializing_if = "Option::is_none")]
    pub ramp_period_end_date: Option<String>,
    /// Date-time the billing period started. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "billingPeriodStartDate", skip_serializing_if = "Option::is_none")]
    pub billing_period_start_date: Option<String>,
    /// Date-time the billing period ended. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "billingPeriodEndDate", skip_serializing_if = "Option::is_none")]
    pub billing_period_end_date: Option<String>,
    /// Usages for the specified period.
    #[serde(rename = "usages")]
    pub usages: Vec<crate::models::SubscriptionOverviewUsage>,
    /// Date-time the contract was last amended. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "contractAmendmentDate", skip_serializing_if = "Option::is_none")]
    pub contract_amendment_date: Option<String>,
    /// Date-time the contract became effective. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "contractEffectiveDate", skip_serializing_if = "Option::is_none")]
    pub contract_effective_date: Option<String>,
    /// Date-time the contract ends. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "contractEndDate", skip_serializing_if = "Option::is_none")]
    pub contract_end_date: Option<String>,
    /// Minimum amount that will be charged for the month
    #[serde(rename = "minimumMonthlyAmount", skip_serializing_if = "Option::is_none")]
    pub minimum_monthly_amount: Option<String>,
    #[serde(rename = "inRampPeriod", skip_serializing_if = "Option::is_none")]
    pub in_ramp_period: Option<bool>,
    /// The URI for this object
    #[serde(rename = "selfUri", skip_serializing_if = "Option::is_none")]
    pub self_uri: Option<String>,
}

impl TrusteeBillingOverview {
    pub fn new(organization: crate::models::NamedEntity, currency: String, enabled_products: Vec<String>, subscription_type: SubscriptionType, usages: Vec<crate::models::SubscriptionOverviewUsage>) -> TrusteeBillingOverview {
        TrusteeBillingOverview {
            id: None,
            name: None,
            organization: Box::new(organization),
            currency,
            enabled_products,
            subscription_type,
            ramp_period_start_date: None,
            ramp_period_end_date: None,
            billing_period_start_date: None,
            billing_period_end_date: None,
            usages,
            contract_amendment_date: None,
            contract_effective_date: None,
            contract_end_date: None,
            minimum_monthly_amount: None,
            in_ramp_period: None,
            self_uri: None,
        }
    }
}

/// The subscription type.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SubscriptionType {
    #[serde(rename = "ININ")]
    ININ,
    #[serde(rename = "MONTH_TO_MONTH")]
    MONTHTOMONTH,
    #[serde(rename = "FREE_TRIAL_MONTH_TO_MONTH")]
    FREETRIALMONTHTOMONTH,
    #[serde(rename = "PREPAY_MONTHLY_COMMITMENT")]
    PREPAYMONTHLYCOMMITMENT,
    #[serde(rename = "PREPAY")]
    PREPAY,
    #[serde(rename = "DEV_ORG_MONTH_TO_MONTH")]
    DEVORGMONTHTOMONTH,
    #[serde(rename = "DEV_ORG_PREPAY_MONTHLY_COMMITMENT")]
    DEVORGPREPAYMONTHLYCOMMITMENT,
    #[serde(rename = "DEV_ORG_PREPAY")]
    DEVORGPREPAY,
}

impl Default for SubscriptionType {
    fn default() -> SubscriptionType {
        Self::ININ
    }
}

