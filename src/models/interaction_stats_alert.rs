/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */

use std::collections::HashSet;


#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct InteractionStatsAlert {
    /// The globally unique identifier for the object.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Name of the rule that generated the alert
    #[serde(rename = "name")]
    pub name: String,
    /// The dimension of concern.
    #[serde(rename = "dimension")]
    pub dimension: Dimension,
    /// The value of the dimension.
    #[serde(rename = "dimensionValue")]
    pub dimension_value: String,
    /// The metric to be assessed.
    #[serde(rename = "metric")]
    pub metric: Metric,
    /// The media type.
    #[serde(rename = "mediaType")]
    pub media_type: MediaType,
    /// The comparison descriptor used against the metric's value.
    #[serde(rename = "numericRange")]
    pub numeric_range: NumericRange,
    /// The statistic of concern for the metric.
    #[serde(rename = "statistic")]
    pub statistic: Statistic,
    /// The threshold value.
    #[serde(rename = "value")]
    pub value: f64,
    /// The id of the rule.
    #[serde(rename = "ruleId")]
    pub rule_id: String,
    /// Indicates if the alert has been read.
    #[serde(rename = "unread")]
    pub unread: bool,
    /// The date/time the alert was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "startDate")]
    pub start_date: String,
    /// The date/time the owning rule exiting in alarm status. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "endDate", skip_serializing_if = "Option::is_none")]
    pub end_date: Option<String>,
    /// The ids of users who were notified of alarm state change.
    #[serde(rename = "notificationUsers")]
    pub notification_users: Vec<crate::models::User>,
    /// A collection of notification methods.
    #[serde(rename = "alertTypes")]
    pub alert_types: std::collections::HashSet<AlertTypes>,
    #[serde(rename = "ruleUri", skip_serializing_if = "Option::is_none")]
    pub rule_uri: Option<String>,
    /// The URI for this object
    #[serde(rename = "selfUri", skip_serializing_if = "Option::is_none")]
    pub self_uri: Option<String>,
}

impl InteractionStatsAlert {
    pub fn new(name: String, dimension: Dimension, dimension_value: String, metric: Metric, media_type: MediaType, numeric_range: NumericRange, statistic: Statistic, value: f64, rule_id: String, unread: bool, start_date: String, notification_users: Vec<crate::models::User>, alert_types: HashSet<AlertTypes>) -> InteractionStatsAlert {
        InteractionStatsAlert {
            id: None,
            name,
            dimension,
            dimension_value,
            metric,
            media_type,
            numeric_range,
            statistic,
            value,
            rule_id,
            unread,
            start_date,
            end_date: None,
            notification_users,
            alert_types,
            rule_uri: None,
            self_uri: None,
        }
    }
}

/// The dimension of concern.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Dimension {
    #[serde(rename = "queueId")]
    QueueId,
    #[serde(rename = "userId")]
    UserId,
}

impl Default for Dimension {
    fn default() -> Dimension {
        Self::QueueId
    }
}
/// The metric to be assessed.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Metric {
    #[serde(rename = "tAbandon")]
    TAbandon,
    #[serde(rename = "tAnswered")]
    TAnswered,
    #[serde(rename = "tTalk")]
    TTalk,
    #[serde(rename = "nOffered")]
    NOffered,
    #[serde(rename = "tHandle")]
    THandle,
    #[serde(rename = "nTransferred")]
    NTransferred,
    #[serde(rename = "oServiceLevel")]
    OServiceLevel,
    #[serde(rename = "tWait")]
    TWait,
    #[serde(rename = "tHeld")]
    THeld,
    #[serde(rename = "tAcw")]
    TAcw,
}

impl Default for Metric {
    fn default() -> Metric {
        Self::TAbandon
    }
}
/// The media type.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MediaType {
    #[serde(rename = "voice")]
    Voice,
    #[serde(rename = "chat")]
    Chat,
    #[serde(rename = "email")]
    Email,
    #[serde(rename = "callback")]
    Callback,
    #[serde(rename = "message")]
    Message,
}

impl Default for MediaType {
    fn default() -> MediaType {
        Self::Voice
    }
}
/// The comparison descriptor used against the metric's value.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum NumericRange {
    #[serde(rename = "gt")]
    Gt,
    #[serde(rename = "gte")]
    Gte,
    #[serde(rename = "lt")]
    Lt,
    #[serde(rename = "lte")]
    Lte,
    #[serde(rename = "eq")]
    Eq,
    #[serde(rename = "ne")]
    Ne,
}

impl Default for NumericRange {
    fn default() -> NumericRange {
        Self::Gt
    }
}
/// The statistic of concern for the metric.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Statistic {
    #[serde(rename = "count")]
    Count,
    #[serde(rename = "min")]
    Min,
    #[serde(rename = "ratio")]
    Ratio,
    #[serde(rename = "max")]
    Max,
}

impl Default for Statistic {
    fn default() -> Statistic {
        Self::Count
    }
}
/// A collection of notification methods.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AlertTypes {
    #[serde(rename = "SMS")]
    SMS,
    #[serde(rename = "DEVICE")]
    DEVICE,
    #[serde(rename = "EMAIL")]
    EMAIL,
}

impl Default for AlertTypes {
    fn default() -> AlertTypes {
        Self::SMS
    }
}

