/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */

/// DataTableImportJob : State information for an import job of rows to a datatable



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct DataTableImportJob {
    /// The globally unique identifier for the object.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "owner", skip_serializing_if = "Option::is_none")]
    pub owner: Option<Box<crate::models::AddressableEntityRef>>,
    /// The status of the import job
    #[serde(rename = "status")]
    pub status: Status,
    /// The timestamp of when the import began. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "dateCreated", skip_serializing_if = "Option::is_none")]
    pub date_created: Option<String>,
    /// The timestamp of when the import stopped (either successfully or unsuccessfully). Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "dateCompleted", skip_serializing_if = "Option::is_none")]
    pub date_completed: Option<String>,
    /// The URL of the location at which the caller can upload the file to be imported
    #[serde(rename = "uploadURI", skip_serializing_if = "Option::is_none")]
    pub upload_uri: Option<String>,
    /// The indication of whether the processing should remove rows that don't appear in the import file
    #[serde(rename = "importMode", skip_serializing_if = "Option::is_none")]
    pub import_mode: Option<ImportMode>,
    #[serde(rename = "errorInformation", skip_serializing_if = "Option::is_none")]
    pub error_information: Option<Box<crate::models::ErrorBody>>,
    /// The current count of the number of records processed
    #[serde(rename = "countRecordsUpdated", skip_serializing_if = "Option::is_none")]
    pub count_records_updated: Option<i32>,
    /// The current count of the number of records deleted
    #[serde(rename = "countRecordsDeleted", skip_serializing_if = "Option::is_none")]
    pub count_records_deleted: Option<i32>,
    /// The current count of the number of records that failed to import
    #[serde(rename = "countRecordsFailed", skip_serializing_if = "Option::is_none")]
    pub count_records_failed: Option<i32>,
    /// The URI for this object
    #[serde(rename = "selfUri", skip_serializing_if = "Option::is_none")]
    pub self_uri: Option<String>,
}

impl DataTableImportJob {
    /// State information for an import job of rows to a datatable
    pub fn new(status: Status) -> DataTableImportJob {
        DataTableImportJob {
            id: None,
            name: None,
            owner: None,
            status,
            date_created: None,
            date_completed: None,
            upload_uri: None,
            import_mode: None,
            error_information: None,
            count_records_updated: None,
            count_records_deleted: None,
            count_records_failed: None,
            self_uri: None,
        }
    }
}

/// The status of the import job
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "WaitingForUpload")]
    WaitingForUpload,
    #[serde(rename = "Processing")]
    Processing,
    #[serde(rename = "Failed")]
    Failed,
    #[serde(rename = "Succeeded")]
    Succeeded,
}

impl Default for Status {
    fn default() -> Status {
        Self::WaitingForUpload
    }
}
/// The indication of whether the processing should remove rows that don't appear in the import file
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ImportMode {
    #[serde(rename = "ReplaceAll")]
    ReplaceAll,
    #[serde(rename = "Append")]
    Append,
}

impl Default for ImportMode {
    fn default() -> ImportMode {
        Self::ReplaceAll
    }
}

