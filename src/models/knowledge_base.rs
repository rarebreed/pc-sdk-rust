/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct KnowledgeBase {
    /// The globally unique identifier for the object.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Knowledge base description
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Core language for knowledge base in which initial content must be created first
    #[serde(rename = "coreLanguage")]
    pub core_language: CoreLanguage,
    /// Knowledge base creation date-time. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "dateCreated", skip_serializing_if = "Option::is_none")]
    pub date_created: Option<String>,
    /// Knowledge base last modification date-time. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "dateModified", skip_serializing_if = "Option::is_none")]
    pub date_modified: Option<String>,
    /// The count representing the number of documents of type FAQ in the KnowledgeBase
    #[serde(rename = "faqCount", skip_serializing_if = "Option::is_none")]
    pub faq_count: Option<i32>,
    /// The date representing when the last document is modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "dateDocumentLastModified", skip_serializing_if = "Option::is_none")]
    pub date_document_last_modified: Option<String>,
    /// The count representing the number of documents of type Article in the KnowledgeBase
    #[serde(rename = "articleCount", skip_serializing_if = "Option::is_none")]
    pub article_count: Option<i32>,
    /// Flag that indicates the knowledge base is published
    #[serde(rename = "published", skip_serializing_if = "Option::is_none")]
    pub published: Option<bool>,
    /// The URI for this object
    #[serde(rename = "selfUri", skip_serializing_if = "Option::is_none")]
    pub self_uri: Option<String>,
}

impl KnowledgeBase {
    pub fn new(core_language: CoreLanguage) -> KnowledgeBase {
        KnowledgeBase {
            id: None,
            name: None,
            description: None,
            core_language,
            date_created: None,
            date_modified: None,
            faq_count: None,
            date_document_last_modified: None,
            article_count: None,
            published: None,
            self_uri: None,
        }
    }
}

/// Core language for knowledge base in which initial content must be created first
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CoreLanguage {
    #[serde(rename = "en-US")]
    EnUS,
    #[serde(rename = "en-UK")]
    EnUK,
    #[serde(rename = "en-AU")]
    EnAU,
    #[serde(rename = "de-DE")]
    DeDE,
}

impl Default for CoreLanguage {
    fn default() -> CoreLanguage {
        Self::EnUS
    }
}

