/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct DomainLogicalInterface {
    /// The globally unique identifier for the object.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The name of the entity.
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "division", skip_serializing_if = "Option::is_none")]
    pub division: Option<Box<crate::models::Division>>,
    /// The resource's description.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The current version of the resource.
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<i32>,
    /// The date the resource was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "dateCreated", skip_serializing_if = "Option::is_none")]
    pub date_created: Option<String>,
    /// The date of the last modification to the resource. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "dateModified", skip_serializing_if = "Option::is_none")]
    pub date_modified: Option<String>,
    /// The ID of the user that last modified the resource.
    #[serde(rename = "modifiedBy", skip_serializing_if = "Option::is_none")]
    pub modified_by: Option<String>,
    /// The ID of the user that created the resource.
    #[serde(rename = "createdBy", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<String>,
    /// Indicates if the resource is active, inactive, or deleted.
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<State>,
    /// The application that last modified the resource.
    #[serde(rename = "modifiedByApp", skip_serializing_if = "Option::is_none")]
    pub modified_by_app: Option<String>,
    /// The application that created the resource.
    #[serde(rename = "createdByApp", skip_serializing_if = "Option::is_none")]
    pub created_by_app: Option<String>,
    #[serde(rename = "edgeUri", skip_serializing_if = "Option::is_none")]
    pub edge_uri: Option<String>,
    #[serde(rename = "edgeAssignedId", skip_serializing_if = "Option::is_none")]
    pub edge_assigned_id: Option<String>,
    /// Friendly Name
    #[serde(rename = "friendlyName")]
    pub friendly_name: String,
    #[serde(rename = "vlanTagId", skip_serializing_if = "Option::is_none")]
    pub vlan_tag_id: Option<i32>,
    /// Hardware Address
    #[serde(rename = "hardwareAddress")]
    pub hardware_address: String,
    /// Physical Adapter Id
    #[serde(rename = "physicalAdapterId")]
    pub physical_adapter_id: String,
    #[serde(rename = "ifStatus", skip_serializing_if = "Option::is_none")]
    pub if_status: Option<String>,
    /// The type of this network interface.
    #[serde(rename = "interfaceType", skip_serializing_if = "Option::is_none")]
    pub interface_type: Option<InterfaceType>,
    /// IPv4 NENT IP Address
    #[serde(rename = "publicNatAddressIpV4", skip_serializing_if = "Option::is_none")]
    pub public_nat_address_ip_v4: Option<String>,
    /// IPv6 NENT IP Address
    #[serde(rename = "publicNatAddressIpV6", skip_serializing_if = "Option::is_none")]
    pub public_nat_address_ip_v6: Option<String>,
    /// The list of routes assigned to this interface.
    #[serde(rename = "routes", skip_serializing_if = "Option::is_none")]
    pub routes: Option<Vec<crate::models::DomainNetworkRoute>>,
    /// The list of IP addresses on this interface.  Priority of dns addresses are based on order in the list.
    #[serde(rename = "addresses", skip_serializing_if = "Option::is_none")]
    pub addresses: Option<Vec<crate::models::DomainNetworkAddress>>,
    #[serde(rename = "ipv4Capabilities", skip_serializing_if = "Option::is_none")]
    pub ipv4_capabilities: Option<Box<crate::models::DomainCapabilities>>,
    #[serde(rename = "ipv6Capabilities", skip_serializing_if = "Option::is_none")]
    pub ipv6_capabilities: Option<Box<crate::models::DomainCapabilities>>,
    #[serde(rename = "currentState", skip_serializing_if = "Option::is_none")]
    pub current_state: Option<CurrentState>,
    #[serde(rename = "lastModifiedUserId", skip_serializing_if = "Option::is_none")]
    pub last_modified_user_id: Option<String>,
    #[serde(rename = "lastModifiedCorrelationId", skip_serializing_if = "Option::is_none")]
    pub last_modified_correlation_id: Option<String>,
    #[serde(rename = "commandResponses", skip_serializing_if = "Option::is_none")]
    pub command_responses: Option<Vec<crate::models::DomainNetworkCommandResponse>>,
    /// The IPv4 phone trunk base assignment will be inherited from the Edge Group.
    #[serde(rename = "inheritPhoneTrunkBasesIPv4", skip_serializing_if = "Option::is_none")]
    pub inherit_phone_trunk_bases_ipv4: Option<bool>,
    /// The IPv6 phone trunk base assignment will be inherited from the Edge Group.
    #[serde(rename = "inheritPhoneTrunkBasesIPv6", skip_serializing_if = "Option::is_none")]
    pub inherit_phone_trunk_bases_ipv6: Option<bool>,
    /// This interface will be used for all internal edge-to-edge communication using settings from the edgeTrunkBaseAssignment on the Edge Group.
    #[serde(rename = "useForInternalEdgeCommunication", skip_serializing_if = "Option::is_none")]
    pub use_for_internal_edge_communication: Option<bool>,
    /// Site Interconnects using the \"Indirect\" method will communicate using the Public IP Address specified on the interface. Use this option when a NAT enabled firewall is between the Edge and the far end.
    #[serde(rename = "useForIndirectEdgeCommunication", skip_serializing_if = "Option::is_none")]
    pub use_for_indirect_edge_communication: Option<bool>,
    /// Site Interconnects using the \"Cloud Proxy\" method will broker the connection between them with a Cloud Proxy. This method is required for connections between one or more Sites using Cloud Media, but can optionally be used between two premises Sites if Direct or Indirect are not an option.
    #[serde(rename = "useForCloudProxyEdgeCommunication", skip_serializing_if = "Option::is_none")]
    pub use_for_cloud_proxy_edge_communication: Option<bool>,
    /// This interface will be used for all communication with the internet.
    #[serde(rename = "useForWanInterface", skip_serializing_if = "Option::is_none")]
    pub use_for_wan_interface: Option<bool>,
    /// External trunk base settings to use for external communication from this interface.
    #[serde(rename = "externalTrunkBaseAssignments", skip_serializing_if = "Option::is_none")]
    pub external_trunk_base_assignments: Option<Vec<crate::models::TrunkBaseAssignment>>,
    /// Phone trunk base settings to use for phone communication from this interface.  These settings will be ignored when \"inheritPhoneTrunkBases\" is true.
    #[serde(rename = "phoneTrunkBaseAssignments", skip_serializing_if = "Option::is_none")]
    pub phone_trunk_base_assignments: Option<Vec<crate::models::TrunkBaseAssignment>>,
    #[serde(rename = "traceEnabled", skip_serializing_if = "Option::is_none")]
    pub trace_enabled: Option<bool>,
    /// Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "startDate", skip_serializing_if = "Option::is_none")]
    pub start_date: Option<String>,
    /// Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "endDate", skip_serializing_if = "Option::is_none")]
    pub end_date: Option<String>,
    /// The URI for this object
    #[serde(rename = "selfUri", skip_serializing_if = "Option::is_none")]
    pub self_uri: Option<String>,
}

impl DomainLogicalInterface {
    pub fn new(name: String, friendly_name: String, hardware_address: String, physical_adapter_id: String) -> DomainLogicalInterface {
        DomainLogicalInterface {
            id: None,
            name,
            division: None,
            description: None,
            version: None,
            date_created: None,
            date_modified: None,
            modified_by: None,
            created_by: None,
            state: None,
            modified_by_app: None,
            created_by_app: None,
            edge_uri: None,
            edge_assigned_id: None,
            friendly_name,
            vlan_tag_id: None,
            hardware_address,
            physical_adapter_id,
            if_status: None,
            interface_type: None,
            public_nat_address_ip_v4: None,
            public_nat_address_ip_v6: None,
            routes: None,
            addresses: None,
            ipv4_capabilities: None,
            ipv6_capabilities: None,
            current_state: None,
            last_modified_user_id: None,
            last_modified_correlation_id: None,
            command_responses: None,
            inherit_phone_trunk_bases_ipv4: None,
            inherit_phone_trunk_bases_ipv6: None,
            use_for_internal_edge_communication: None,
            use_for_indirect_edge_communication: None,
            use_for_cloud_proxy_edge_communication: None,
            use_for_wan_interface: None,
            external_trunk_base_assignments: None,
            phone_trunk_base_assignments: None,
            trace_enabled: None,
            start_date: None,
            end_date: None,
            self_uri: None,
        }
    }
}

/// Indicates if the resource is active, inactive, or deleted.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "active")]
    Active,
    #[serde(rename = "inactive")]
    Inactive,
    #[serde(rename = "deleted")]
    Deleted,
}

impl Default for State {
    fn default() -> State {
        Self::Active
    }
}
/// The type of this network interface.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum InterfaceType {
    #[serde(rename = "DIAGNOSTIC")]
    DIAGNOSTIC,
    #[serde(rename = "SYSTEM")]
    SYSTEM,
}

impl Default for InterfaceType {
    fn default() -> InterfaceType {
        Self::DIAGNOSTIC
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CurrentState {
    #[serde(rename = "INIT")]
    INIT,
    #[serde(rename = "CREATING")]
    CREATING,
    #[serde(rename = "UPDATING")]
    UPDATING,
    #[serde(rename = "OK")]
    OK,
    #[serde(rename = "EXCEPTION")]
    EXCEPTION,
    #[serde(rename = "DELETING")]
    DELETING,
}

impl Default for CurrentState {
    fn default() -> CurrentState {
        Self::INIT
    }
}

