/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Email {
    /// The connection state of this communication.
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<State>,
    /// A globally unique identifier for this communication.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// True if this call is held and the person on this side hears silence.
    #[serde(rename = "held", skip_serializing_if = "Option::is_none")]
    pub held: Option<bool>,
    /// The subject for the initial email that started this conversation.
    #[serde(rename = "subject", skip_serializing_if = "Option::is_none")]
    pub subject: Option<String>,
    /// The number of email messages sent by this participant.
    #[serde(rename = "messagesSent", skip_serializing_if = "Option::is_none")]
    pub messages_sent: Option<i32>,
    /// The time line of the participant's email, divided into activity segments.
    #[serde(rename = "segments", skip_serializing_if = "Option::is_none")]
    pub segments: Option<Vec<crate::models::Segment>>,
    /// The direction of the email
    #[serde(rename = "direction", skip_serializing_if = "Option::is_none")]
    pub direction: Option<Direction>,
    /// A globally unique identifier for the recording associated with this call.
    #[serde(rename = "recordingId", skip_serializing_if = "Option::is_none")]
    pub recording_id: Option<String>,
    #[serde(rename = "errorInfo", skip_serializing_if = "Option::is_none")]
    pub error_info: Option<Box<crate::models::ErrorBody>>,
    /// System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.
    #[serde(rename = "disconnectType", skip_serializing_if = "Option::is_none")]
    pub disconnect_type: Option<DisconnectType>,
    /// The timestamp the email was placed on hold in the cloud clock if the email is currently on hold. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "startHoldTime", skip_serializing_if = "Option::is_none")]
    pub start_hold_time: Option<String>,
    /// The timestamp the communication has when it is first put into an alerting state. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "startAlertingTime", skip_serializing_if = "Option::is_none")]
    pub start_alerting_time: Option<String>,
    /// The timestamp when this communication was connected in the cloud clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "connectedTime", skip_serializing_if = "Option::is_none")]
    pub connected_time: Option<String>,
    /// The timestamp when this communication disconnected from the conversation in the provider clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "disconnectedTime", skip_serializing_if = "Option::is_none")]
    pub disconnected_time: Option<String>,
    /// Indicates that the email was auto-generated like an Out of Office reply.
    #[serde(rename = "autoGenerated", skip_serializing_if = "Option::is_none")]
    pub auto_generated: Option<bool>,
    /// The source provider for the email.
    #[serde(rename = "provider", skip_serializing_if = "Option::is_none")]
    pub provider: Option<String>,
    /// The UUID of the script to use.
    #[serde(rename = "scriptId", skip_serializing_if = "Option::is_none")]
    pub script_id: Option<String>,
    /// The id of the peer communication corresponding to a matching leg for this communication.
    #[serde(rename = "peerId", skip_serializing_if = "Option::is_none")]
    pub peer_id: Option<String>,
    /// A globally unique identifier for the stored content of this communication.
    #[serde(rename = "messageId", skip_serializing_if = "Option::is_none")]
    pub message_id: Option<String>,
    /// A list of uploaded attachments on the email draft.
    #[serde(rename = "draftAttachments", skip_serializing_if = "Option::is_none")]
    pub draft_attachments: Option<Vec<crate::models::Attachment>>,
    /// Indicates if the inbound email was marked as spam.
    #[serde(rename = "spam", skip_serializing_if = "Option::is_none")]
    pub spam: Option<bool>,
    #[serde(rename = "wrapup", skip_serializing_if = "Option::is_none")]
    pub wrapup: Option<Box<crate::models::Wrapup>>,
    #[serde(rename = "afterCallWork", skip_serializing_if = "Option::is_none")]
    pub after_call_work: Option<Box<crate::models::AfterCallWork>>,
    /// Indicates if after-call work is required for a communication. Only used when the ACW Setting is Agent Requested.
    #[serde(rename = "afterCallWorkRequired", skip_serializing_if = "Option::is_none")]
    pub after_call_work_required: Option<bool>,
}

impl Email {
    pub fn new() -> Email {
        Email {
            state: None,
            id: None,
            held: None,
            subject: None,
            messages_sent: None,
            segments: None,
            direction: None,
            recording_id: None,
            error_info: None,
            disconnect_type: None,
            start_hold_time: None,
            start_alerting_time: None,
            connected_time: None,
            disconnected_time: None,
            auto_generated: None,
            provider: None,
            script_id: None,
            peer_id: None,
            message_id: None,
            draft_attachments: None,
            spam: None,
            wrapup: None,
            after_call_work: None,
            after_call_work_required: None,
        }
    }
}

/// The connection state of this communication.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "alerting")]
    Alerting,
    #[serde(rename = "connected")]
    Connected,
    #[serde(rename = "disconnected")]
    Disconnected,
    #[serde(rename = "none")]
    None,
    #[serde(rename = "transmitting")]
    Transmitting,
}

impl Default for State {
    fn default() -> State {
        Self::Alerting
    }
}
/// The direction of the email
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Direction {
    #[serde(rename = "inbound")]
    Inbound,
    #[serde(rename = "outbound")]
    Outbound,
}

impl Default for Direction {
    fn default() -> Direction {
        Self::Inbound
    }
}
/// System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DisconnectType {
    #[serde(rename = "endpoint")]
    Endpoint,
    #[serde(rename = "client")]
    Client,
    #[serde(rename = "system")]
    System,
    #[serde(rename = "timeout")]
    Timeout,
    #[serde(rename = "transfer")]
    Transfer,
    #[serde(rename = "transfer.conference")]
    TransferConference,
    #[serde(rename = "transfer.consult")]
    TransferConsult,
    #[serde(rename = "transfer.forward")]
    TransferForward,
    #[serde(rename = "transfer.noanswer")]
    TransferNoanswer,
    #[serde(rename = "transfer.notavailable")]
    TransferNotavailable,
    #[serde(rename = "transport.failure")]
    TransportFailure,
    #[serde(rename = "error")]
    Error,
    #[serde(rename = "peer")]
    Peer,
    #[serde(rename = "other")]
    Other,
    #[serde(rename = "spam")]
    Spam,
    #[serde(rename = "uncallable")]
    Uncallable,
}

impl Default for DisconnectType {
    fn default() -> DisconnectType {
        Self::Endpoint
    }
}

