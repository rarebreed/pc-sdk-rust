/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct SmsPhoneNumberProvision {
    /// The globally unique identifier for the object.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// A phone number to be used for SMS communications. E.g. +13175555555 or +34234234234
    #[serde(rename = "phoneNumber")]
    pub phone_number: String,
    /// Type of the phone number provisioned.
    #[serde(rename = "phoneNumberType")]
    pub phone_number_type: PhoneNumberType,
    /// The ISO 3166-1 alpha-2 country code of the country this phone number is associated with.
    #[serde(rename = "countryCode")]
    pub country_code: String,
    /// The id of an address added on your account. Due to regulatory requirements in some countries, an address may be required when provisioning a sms number. In those cases you should provide the provisioned sms address id here
    #[serde(rename = "addressId", skip_serializing_if = "Option::is_none")]
    pub address_id: Option<String>,
    /// The URI for this object
    #[serde(rename = "selfUri", skip_serializing_if = "Option::is_none")]
    pub self_uri: Option<String>,
}

impl SmsPhoneNumberProvision {
    pub fn new(phone_number: String, phone_number_type: PhoneNumberType, country_code: String) -> SmsPhoneNumberProvision {
        SmsPhoneNumberProvision {
            id: None,
            name: None,
            phone_number,
            phone_number_type,
            country_code,
            address_id: None,
            self_uri: None,
        }
    }
}

/// Type of the phone number provisioned.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PhoneNumberType {
    #[serde(rename = "local")]
    Local,
    #[serde(rename = "mobile")]
    Mobile,
    #[serde(rename = "tollfree")]
    Tollfree,
    #[serde(rename = "shortcode")]
    Shortcode,
}

impl Default for PhoneNumberType {
    fn default() -> PhoneNumberType {
        Self::Local
    }
}

