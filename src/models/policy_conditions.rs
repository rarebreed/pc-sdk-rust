/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct PolicyConditions {
    #[serde(rename = "forUsers", skip_serializing_if = "Option::is_none")]
    pub for_users: Option<Vec<crate::models::User>>,
    #[serde(rename = "directions", skip_serializing_if = "Option::is_none")]
    pub directions: Option<Vec<Directions>>,
    #[serde(rename = "dateRanges", skip_serializing_if = "Option::is_none")]
    pub date_ranges: Option<Vec<String>>,
    #[serde(rename = "mediaTypes", skip_serializing_if = "Option::is_none")]
    pub media_types: Option<Vec<MediaTypes>>,
    #[serde(rename = "forQueues", skip_serializing_if = "Option::is_none")]
    pub for_queues: Option<Vec<crate::models::Queue>>,
    #[serde(rename = "duration", skip_serializing_if = "Option::is_none")]
    pub duration: Option<Box<crate::models::DurationCondition>>,
    #[serde(rename = "wrapupCodes", skip_serializing_if = "Option::is_none")]
    pub wrapup_codes: Option<Vec<crate::models::WrapupCode>>,
    #[serde(rename = "timeAllowed", skip_serializing_if = "Option::is_none")]
    pub time_allowed: Option<Box<crate::models::TimeAllowed>>,
}

impl PolicyConditions {
    pub fn new() -> PolicyConditions {
        PolicyConditions {
            for_users: None,
            directions: None,
            date_ranges: None,
            media_types: None,
            for_queues: None,
            duration: None,
            wrapup_codes: None,
            time_allowed: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Directions {
    #[serde(rename = "INBOUND")]
    INBOUND,
    #[serde(rename = "OUTBOUND")]
    OUTBOUND,
}

impl Default for Directions {
    fn default() -> Directions {
        Self::INBOUND
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MediaTypes {
    #[serde(rename = "CALL")]
    CALL,
    #[serde(rename = "CHAT")]
    CHAT,
}

impl Default for MediaTypes {
    fn default() -> MediaTypes {
        Self::CALL
    }
}

