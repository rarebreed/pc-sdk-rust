/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Session {
    /// The globally unique identifier for the object.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Primary identifier of the customer in the source where the events for the session originate from.
    #[serde(rename = "customerId", skip_serializing_if = "Option::is_none")]
    pub customer_id: Option<String>,
    /// Type of source customer identifier (e.g. cookie, email, phone).
    #[serde(rename = "customerIdType", skip_serializing_if = "Option::is_none")]
    pub customer_id_type: Option<String>,
    /// Session types indicate the type or category of sessions (e.g. web, ticket, delivery, atm).
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<String>,
    /// Unique identifier in the external system where the events for the session originate from.
    #[serde(rename = "externalId", skip_serializing_if = "Option::is_none")]
    pub external_id: Option<String>,
    /// A URL that identifies an external system-of-record resource that may have more detailed information on the session.
    #[serde(rename = "externalUrl", skip_serializing_if = "Option::is_none")]
    pub external_url: Option<String>,
    /// Shortened numeric identifier of 4-6 digits.
    #[serde(rename = "shortId", skip_serializing_if = "Option::is_none")]
    pub short_id: Option<String>,
    /// List of the outcome achievements by the customer in this session.
    #[serde(rename = "outcomeAchievements", skip_serializing_if = "Option::is_none")]
    pub outcome_achievements: Option<Vec<crate::models::OutcomeAchievement>>,
    /// List of the segment assignments to the customer in this session.
    #[serde(rename = "segmentAssignments", skip_serializing_if = "Option::is_none")]
    pub segment_assignments: Option<Vec<crate::models::SessionSegmentAssignment>>,
    /// Attributes projected from the session's event stream.
    #[serde(rename = "attributes", skip_serializing_if = "Option::is_none")]
    pub attributes: Option<::std::collections::HashMap<String, crate::models::CustomEventAttribute>>,
    /// List-type attributes projected from the session's event stream.
    #[serde(rename = "attributeLists", skip_serializing_if = "Option::is_none")]
    pub attribute_lists: Option<::std::collections::HashMap<String, crate::models::CustomEventAttributeList>>,
    #[serde(rename = "browser", skip_serializing_if = "Option::is_none")]
    pub browser: Option<Box<crate::models::Browser>>,
    #[serde(rename = "device", skip_serializing_if = "Option::is_none")]
    pub device: Option<Box<crate::models::Device>>,
    #[serde(rename = "geolocation", skip_serializing_if = "Option::is_none")]
    pub geolocation: Option<Box<crate::models::JourneyGeolocation>>,
    /// Customer's IP address.
    #[serde(rename = "ipAddress", skip_serializing_if = "Option::is_none")]
    pub ip_address: Option<String>,
    /// Customer's IP-based organization or ISP name.
    #[serde(rename = "ipOrganization", skip_serializing_if = "Option::is_none")]
    pub ip_organization: Option<String>,
    #[serde(rename = "lastPage", skip_serializing_if = "Option::is_none")]
    pub last_page: Option<Box<crate::models::JourneyPage>>,
    #[serde(rename = "mktCampaign", skip_serializing_if = "Option::is_none")]
    pub mkt_campaign: Option<Box<crate::models::JourneyCampaign>>,
    #[serde(rename = "referrer", skip_serializing_if = "Option::is_none")]
    pub referrer: Option<Box<crate::models::Referrer>>,
    /// Search terms associated with the session.
    #[serde(rename = "searchTerms", skip_serializing_if = "Option::is_none")]
    pub search_terms: Option<Vec<String>>,
    /// String identifying the user agent.
    #[serde(rename = "userAgentString", skip_serializing_if = "Option::is_none")]
    pub user_agent_string: Option<String>,
    /// Indicates how long the session has been active (valid for an individual device).
    #[serde(rename = "durationInSeconds", skip_serializing_if = "Option::is_none")]
    pub duration_in_seconds: Option<i32>,
    /// The count of all events performed during the session.
    #[serde(rename = "eventCount", skip_serializing_if = "Option::is_none")]
    pub event_count: Option<i32>,
    /// The count of all pageviews performed during the session.
    #[serde(rename = "pageviewCount", skip_serializing_if = "Option::is_none")]
    pub pageview_count: Option<i32>,
    /// The count of all screenviews performed during the session.
    #[serde(rename = "screenviewCount", skip_serializing_if = "Option::is_none")]
    pub screenview_count: Option<i32>,
    #[serde(rename = "lastEvent", skip_serializing_if = "Option::is_none")]
    pub last_event: Option<Box<crate::models::SessionLastEvent>>,
    #[serde(rename = "lastConnectedQueue", skip_serializing_if = "Option::is_none")]
    pub last_connected_queue: Option<Box<crate::models::ConnectedQueue>>,
    #[serde(rename = "lastConnectedUser", skip_serializing_if = "Option::is_none")]
    pub last_connected_user: Option<Box<crate::models::ConnectedUser>>,
    #[serde(rename = "lastUserDisposition", skip_serializing_if = "Option::is_none")]
    pub last_user_disposition: Option<Box<crate::models::ConversationUserDisposition>>,
    /// Represents the channels used for this conversation.
    #[serde(rename = "conversationChannels", skip_serializing_if = "Option::is_none")]
    pub conversation_channels: Option<Vec<crate::models::ConversationChannel>>,
    /// The original direction of the conversation.
    #[serde(rename = "originatingDirection", skip_serializing_if = "Option::is_none")]
    pub originating_direction: Option<OriginatingDirection>,
    /// The subject for the conversation, for example an email subject.
    #[serde(rename = "conversationSubject", skip_serializing_if = "Option::is_none")]
    pub conversation_subject: Option<String>,
    /// Disconnect reason for the last user connected to the conversation.
    #[serde(rename = "lastUserDisconnectType", skip_serializing_if = "Option::is_none")]
    pub last_user_disconnect_type: Option<LastUserDisconnectType>,
    /// Last ACD outcome for the conversation.
    #[serde(rename = "lastAcdOutcome", skip_serializing_if = "Option::is_none")]
    pub last_acd_outcome: Option<LastAcdOutcome>,
    /// Indicates whether or not the session is authenticated.
    #[serde(rename = "authenticated", skip_serializing_if = "Option::is_none")]
    pub authenticated: Option<bool>,
    /// The URI for this object
    #[serde(rename = "selfUri", skip_serializing_if = "Option::is_none")]
    pub self_uri: Option<String>,
    /// Timestamp indicating when the session was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "createdDate", skip_serializing_if = "Option::is_none")]
    pub created_date: Option<String>,
    /// Timestamp indicating when the session was ended. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "endedDate", skip_serializing_if = "Option::is_none")]
    pub ended_date: Option<String>,
    #[serde(rename = "externalContact", skip_serializing_if = "Option::is_none")]
    pub external_contact: Option<Box<crate::models::AddressableEntityRef>>,
    /// Timestamp indicating when the visitor should be considered as away. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "awayDate", skip_serializing_if = "Option::is_none")]
    pub away_date: Option<String>,
    /// Timestamp indicating when the visitor should be considered as idle. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "idleDate", skip_serializing_if = "Option::is_none")]
    pub idle_date: Option<String>,
    #[serde(rename = "conversation", skip_serializing_if = "Option::is_none")]
    pub conversation: Option<Box<crate::models::AddressableEntityRef>>,
}

impl Session {
    pub fn new() -> Session {
        Session {
            id: None,
            customer_id: None,
            customer_id_type: None,
            _type: None,
            external_id: None,
            external_url: None,
            short_id: None,
            outcome_achievements: None,
            segment_assignments: None,
            attributes: None,
            attribute_lists: None,
            browser: None,
            device: None,
            geolocation: None,
            ip_address: None,
            ip_organization: None,
            last_page: None,
            mkt_campaign: None,
            referrer: None,
            search_terms: None,
            user_agent_string: None,
            duration_in_seconds: None,
            event_count: None,
            pageview_count: None,
            screenview_count: None,
            last_event: None,
            last_connected_queue: None,
            last_connected_user: None,
            last_user_disposition: None,
            conversation_channels: None,
            originating_direction: None,
            conversation_subject: None,
            last_user_disconnect_type: None,
            last_acd_outcome: None,
            authenticated: None,
            self_uri: None,
            created_date: None,
            ended_date: None,
            external_contact: None,
            away_date: None,
            idle_date: None,
            conversation: None,
        }
    }
}

/// The original direction of the conversation.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OriginatingDirection {
    #[serde(rename = "Unknown")]
    Unknown,
    #[serde(rename = "Inbound")]
    Inbound,
    #[serde(rename = "Outbound")]
    Outbound,
}

impl Default for OriginatingDirection {
    fn default() -> OriginatingDirection {
        Self::Unknown
    }
}
/// Disconnect reason for the last user connected to the conversation.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum LastUserDisconnectType {
    #[serde(rename = "Unknown")]
    Unknown,
    #[serde(rename = "Endpoint")]
    Endpoint,
    #[serde(rename = "Client")]
    Client,
    #[serde(rename = "System")]
    System,
    #[serde(rename = "Transfer")]
    Transfer,
    #[serde(rename = "Error")]
    Error,
    #[serde(rename = "Peer")]
    Peer,
    #[serde(rename = "Other")]
    Other,
    #[serde(rename = "Spam")]
    Spam,
    #[serde(rename = "Timeout")]
    Timeout,
    #[serde(rename = "TransportFailure")]
    TransportFailure,
    #[serde(rename = "ConferenceTransfer")]
    ConferenceTransfer,
    #[serde(rename = "ConsultTransfer")]
    ConsultTransfer,
    #[serde(rename = "ForwardTransfer")]
    ForwardTransfer,
    #[serde(rename = "NoAnswerTransfer")]
    NoAnswerTransfer,
    #[serde(rename = "NotAvailableTransfer")]
    NotAvailableTransfer,
    #[serde(rename = "Uncallable")]
    Uncallable,
}

impl Default for LastUserDisconnectType {
    fn default() -> LastUserDisconnectType {
        Self::Unknown
    }
}
/// Last ACD outcome for the conversation.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum LastAcdOutcome {
    #[serde(rename = "Unknown")]
    Unknown,
    #[serde(rename = "Abandon")]
    Abandon,
    #[serde(rename = "Answered")]
    Answered,
    #[serde(rename = "FlowOut")]
    FlowOut,
}

impl Default for LastAcdOutcome {
    fn default() -> LastAcdOutcome {
        Self::Unknown
    }
}

