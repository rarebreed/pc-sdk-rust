/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct LexBotAlias {
    /// The globally unique identifier for the object.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "bot", skip_serializing_if = "Option::is_none")]
    pub bot: Option<Box<crate::models::LexBot>>,
    /// The version of the Lex bot this alias points at
    #[serde(rename = "botVersion", skip_serializing_if = "Option::is_none")]
    pub bot_version: Option<String>,
    /// The status of the Lex bot alias
    #[serde(rename = "status")]
    pub status: Status,
    /// If the status is FAILED, Amazon Lex explains why it failed to build the bot
    #[serde(rename = "failureReason", skip_serializing_if = "Option::is_none")]
    pub failure_reason: Option<String>,
    /// The target language of the Lex bot
    #[serde(rename = "language", skip_serializing_if = "Option::is_none")]
    pub language: Option<Language>,
    /// An array of Intents associated with this bot alias
    #[serde(rename = "intents", skip_serializing_if = "Option::is_none")]
    pub intents: Option<Vec<crate::models::LexIntent>>,
    /// The URI for this object
    #[serde(rename = "selfUri", skip_serializing_if = "Option::is_none")]
    pub self_uri: Option<String>,
}

impl LexBotAlias {
    pub fn new(status: Status) -> LexBotAlias {
        LexBotAlias {
            id: None,
            name: None,
            bot: None,
            bot_version: None,
            status,
            failure_reason: None,
            language: None,
            intents: None,
            self_uri: None,
        }
    }
}

/// The status of the Lex bot alias
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "BUILDING")]
    BUILDING,
    #[serde(rename = "READY")]
    READY,
    #[serde(rename = "FAILED")]
    FAILED,
    #[serde(rename = "NOT_BUILT")]
    NOTBUILT,
}

impl Default for Status {
    fn default() -> Status {
        Self::BUILDING
    }
}
/// The target language of the Lex bot
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Language {
    #[serde(rename = "en-US")]
    EnUS,
}

impl Default for Language {
    fn default() -> Language {
        Self::EnUS
    }
}

