/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct AnalyticsConversationWithoutAttributes {
    /// The end time of a conversation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "conversationEnd", skip_serializing_if = "Option::is_none")]
    pub conversation_end: Option<String>,
    /// Unique identifier for the conversation
    #[serde(rename = "conversationId", skip_serializing_if = "Option::is_none")]
    pub conversation_id: Option<String>,
    /// Indicates the participant purpose of the participant initiating a message conversation
    #[serde(rename = "conversationInitiator", skip_serializing_if = "Option::is_none")]
    pub conversation_initiator: Option<ConversationInitiator>,
    /// The start time of a conversation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "conversationStart", skip_serializing_if = "Option::is_none")]
    pub conversation_start: Option<String>,
    /// Indicates a messaging conversation in which the customer participated by sending at least one message
    #[serde(rename = "customerParticipation", skip_serializing_if = "Option::is_none")]
    pub customer_participation: Option<bool>,
    /// Identifier(s) of division(s) associated with a conversation
    #[serde(rename = "divisionIds", skip_serializing_if = "Option::is_none")]
    pub division_ids: Option<Vec<String>>,
    /// External tag for the conversation
    #[serde(rename = "externalTag", skip_serializing_if = "Option::is_none")]
    pub external_tag: Option<String>,
    /// The unique identifier(s) of the knowledge base(s) used
    #[serde(rename = "knowledgeBaseIds", skip_serializing_if = "Option::is_none")]
    pub knowledge_base_ids: Option<Vec<String>>,
    /// The lowest estimated average MOS among all the audio streams belonging to this conversation
    #[serde(rename = "mediaStatsMinConversationMos", skip_serializing_if = "Option::is_none")]
    pub media_stats_min_conversation_mos: Option<f64>,
    /// The lowest R-factor value among all of the audio streams belonging to this conversation
    #[serde(rename = "mediaStatsMinConversationRFactor", skip_serializing_if = "Option::is_none")]
    pub media_stats_min_conversation_r_factor: Option<f64>,
    /// The original direction of the conversation
    #[serde(rename = "originatingDirection", skip_serializing_if = "Option::is_none")]
    pub originating_direction: Option<OriginatingDirection>,
    /// Indicates whether all flow sessions were self serviced
    #[serde(rename = "selfServed", skip_serializing_if = "Option::is_none")]
    pub self_served: Option<bool>,
    /// Evaluations associated with this conversation
    #[serde(rename = "evaluations", skip_serializing_if = "Option::is_none")]
    pub evaluations: Option<Vec<crate::models::AnalyticsEvaluation>>,
    /// Surveys associated with this conversation
    #[serde(rename = "surveys", skip_serializing_if = "Option::is_none")]
    pub surveys: Option<Vec<crate::models::AnalyticsSurvey>>,
    /// Resolutions associated with this conversation
    #[serde(rename = "resolutions", skip_serializing_if = "Option::is_none")]
    pub resolutions: Option<Vec<crate::models::AnalyticsResolution>>,
    /// Participants in the conversation
    #[serde(rename = "participants", skip_serializing_if = "Option::is_none")]
    pub participants: Option<Vec<crate::models::AnalyticsParticipantWithoutAttributes>>,
}

impl AnalyticsConversationWithoutAttributes {
    pub fn new() -> AnalyticsConversationWithoutAttributes {
        AnalyticsConversationWithoutAttributes {
            conversation_end: None,
            conversation_id: None,
            conversation_initiator: None,
            conversation_start: None,
            customer_participation: None,
            division_ids: None,
            external_tag: None,
            knowledge_base_ids: None,
            media_stats_min_conversation_mos: None,
            media_stats_min_conversation_r_factor: None,
            originating_direction: None,
            self_served: None,
            evaluations: None,
            surveys: None,
            resolutions: None,
            participants: None,
        }
    }
}

/// Indicates the participant purpose of the participant initiating a message conversation
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ConversationInitiator {
    #[serde(rename = "acd")]
    Acd,
    #[serde(rename = "agent")]
    Agent,
    #[serde(rename = "api")]
    Api,
    #[serde(rename = "botflow")]
    Botflow,
    #[serde(rename = "campaign")]
    Campaign,
    #[serde(rename = "customer")]
    Customer,
    #[serde(rename = "dialer")]
    Dialer,
    #[serde(rename = "external")]
    External,
    #[serde(rename = "fax")]
    Fax,
    #[serde(rename = "group")]
    Group,
    #[serde(rename = "inbound")]
    Inbound,
    #[serde(rename = "ivr")]
    Ivr,
    #[serde(rename = "manual")]
    Manual,
    #[serde(rename = "outbound")]
    Outbound,
    #[serde(rename = "station")]
    Station,
    #[serde(rename = "user")]
    User,
    #[serde(rename = "voicemail")]
    Voicemail,
    #[serde(rename = "workflow")]
    Workflow,
}

impl Default for ConversationInitiator {
    fn default() -> ConversationInitiator {
        Self::Acd
    }
}
/// The original direction of the conversation
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OriginatingDirection {
    #[serde(rename = "inbound")]
    Inbound,
    #[serde(rename = "outbound")]
    Outbound,
}

impl Default for OriginatingDirection {
    fn default() -> OriginatingDirection {
        Self::Inbound
    }
}

