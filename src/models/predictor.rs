/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Predictor {
    /// The globally unique identifier for the object.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The queue IDs associated with the predictor.
    #[serde(rename = "queues")]
    pub queues: Vec<crate::models::AddressableEntityRef>,
    /// The KPI that the predictor attempts to maximize/minimize.
    #[serde(rename = "kpi")]
    pub kpi: String,
    /// Number of seconds allocated to predictive routing before attempting a different routing method. This is a value between 12 and 900 seconds.
    #[serde(rename = "routingTimeoutSeconds", skip_serializing_if = "Option::is_none")]
    pub routing_timeout_seconds: Option<i32>,
    #[serde(rename = "schedule", skip_serializing_if = "Option::is_none")]
    pub schedule: Option<Box<crate::models::PredictorSchedule>>,
    /// The predictor state.
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<State>,
    /// DateTime indicating when the predictor was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "dateCreated", skip_serializing_if = "Option::is_none")]
    pub date_created: Option<String>,
    /// DateTime indicating when the predictor was last updated. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "dateModified", skip_serializing_if = "Option::is_none")]
    pub date_modified: Option<String>,
    #[serde(rename = "workloadBalancingConfig", skip_serializing_if = "Option::is_none")]
    pub workload_balancing_config: Option<Box<crate::models::PredictorWorkloadBalancing>>,
    /// Predictor error code - optional details on why the predictor went into error state.
    #[serde(rename = "errorCode", skip_serializing_if = "Option::is_none")]
    pub error_code: Option<String>,
    /// The URI for this object
    #[serde(rename = "selfUri", skip_serializing_if = "Option::is_none")]
    pub self_uri: Option<String>,
}

impl Predictor {
    pub fn new(queues: Vec<crate::models::AddressableEntityRef>, kpi: String) -> Predictor {
        Predictor {
            id: None,
            queues,
            kpi,
            routing_timeout_seconds: None,
            schedule: None,
            state: None,
            date_created: None,
            date_modified: None,
            workload_balancing_config: None,
            error_code: None,
            self_uri: None,
        }
    }
}

/// The predictor state.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "Created")]
    Created,
    #[serde(rename = "Error")]
    Error,
    #[serde(rename = "Active")]
    Active,
}

impl Default for State {
    fn default() -> State {
        Self::Created
    }
}

