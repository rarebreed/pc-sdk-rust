/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ExternalContact {
    /// The globally unique identifier for the object.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The first name of the contact.
    #[serde(rename = "firstName")]
    pub first_name: String,
    #[serde(rename = "middleName", skip_serializing_if = "Option::is_none")]
    pub middle_name: Option<String>,
    /// The last name of the contact.
    #[serde(rename = "lastName")]
    pub last_name: String,
    #[serde(rename = "salutation", skip_serializing_if = "Option::is_none")]
    pub salutation: Option<String>,
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(rename = "workPhone", skip_serializing_if = "Option::is_none")]
    pub work_phone: Option<Box<crate::models::PhoneNumber>>,
    #[serde(rename = "cellPhone", skip_serializing_if = "Option::is_none")]
    pub cell_phone: Option<Box<crate::models::PhoneNumber>>,
    #[serde(rename = "homePhone", skip_serializing_if = "Option::is_none")]
    pub home_phone: Option<Box<crate::models::PhoneNumber>>,
    #[serde(rename = "otherPhone", skip_serializing_if = "Option::is_none")]
    pub other_phone: Option<Box<crate::models::PhoneNumber>>,
    #[serde(rename = "workEmail", skip_serializing_if = "Option::is_none")]
    pub work_email: Option<String>,
    #[serde(rename = "personalEmail", skip_serializing_if = "Option::is_none")]
    pub personal_email: Option<String>,
    #[serde(rename = "otherEmail", skip_serializing_if = "Option::is_none")]
    pub other_email: Option<String>,
    #[serde(rename = "address", skip_serializing_if = "Option::is_none")]
    pub address: Option<Box<crate::models::ContactAddress>>,
    #[serde(rename = "twitterId", skip_serializing_if = "Option::is_none")]
    pub twitter_id: Option<Box<crate::models::TwitterId>>,
    #[serde(rename = "lineId", skip_serializing_if = "Option::is_none")]
    pub line_id: Option<Box<crate::models::LineId>>,
    #[serde(rename = "whatsAppId", skip_serializing_if = "Option::is_none")]
    pub whats_app_id: Option<Box<crate::models::WhatsAppId>>,
    #[serde(rename = "facebookId", skip_serializing_if = "Option::is_none")]
    pub facebook_id: Option<Box<crate::models::FacebookId>>,
    /// Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "modifyDate", skip_serializing_if = "Option::is_none")]
    pub modify_date: Option<String>,
    /// Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "createDate", skip_serializing_if = "Option::is_none")]
    pub create_date: Option<String>,
    #[serde(rename = "externalOrganization", skip_serializing_if = "Option::is_none")]
    pub external_organization: Option<Box<crate::models::ExternalOrganization>>,
    #[serde(rename = "surveyOptOut", skip_serializing_if = "Option::is_none")]
    pub survey_opt_out: Option<bool>,
    /// A string that identifies an external system-of-record resource that may have more detailed information on the contact. It should be a valid URL (including the http/https protocol, port, and path [if any]). The value is automatically trimmed of any leading and trailing whitespace.
    #[serde(rename = "externalSystemUrl", skip_serializing_if = "Option::is_none")]
    pub external_system_url: Option<String>,
    #[serde(rename = "schema", skip_serializing_if = "Option::is_none")]
    pub schema: Option<Box<crate::models::DataSchema>>,
    /// Custom fields defined in the schema referenced by schemaId and schemaVersion.
    #[serde(rename = "customFields", skip_serializing_if = "Option::is_none")]
    pub custom_fields: Option<::std::collections::HashMap<String, serde_json::Value>>,
    /// Links to the sources of data (e.g. one source might be a CRM) that contributed data to this record.  Read-only, and only populated when requested via expand param.
    #[serde(rename = "externalDataSources", skip_serializing_if = "Option::is_none")]
    pub external_data_sources: Option<Vec<crate::models::ExternalDataSource>>,
    /// The URI for this object
    #[serde(rename = "selfUri", skip_serializing_if = "Option::is_none")]
    pub self_uri: Option<String>,
}

impl ExternalContact {
    pub fn new(first_name: String, last_name: String) -> ExternalContact {
        ExternalContact {
            id: None,
            first_name,
            middle_name: None,
            last_name,
            salutation: None,
            title: None,
            work_phone: None,
            cell_phone: None,
            home_phone: None,
            other_phone: None,
            work_email: None,
            personal_email: None,
            other_email: None,
            address: None,
            twitter_id: None,
            line_id: None,
            whats_app_id: None,
            facebook_id: None,
            modify_date: None,
            create_date: None,
            external_organization: None,
            survey_opt_out: None,
            external_system_url: None,
            schema: None,
            custom_fields: None,
            external_data_sources: None,
            self_uri: None,
        }
    }
}


