/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct SchedulingStatusResponse {
    /// The ID generated for the scheduling job.  Use to GET result when job is completed.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The status of the scheduling job.
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    /// If the request could not be properly processed, error details will be given here.
    #[serde(rename = "errorDetails", skip_serializing_if = "Option::is_none")]
    pub error_details: Option<Vec<crate::models::SchedulingProcessingError>>,
    /// The uri of the scheduling result. It has a value if the status is 'Success'.
    #[serde(rename = "schedulingResultUri", skip_serializing_if = "Option::is_none")]
    pub scheduling_result_uri: Option<String>,
    /// The percentage of the job that is complete.
    #[serde(rename = "percentComplete", skip_serializing_if = "Option::is_none")]
    pub percent_complete: Option<i32>,
}

impl SchedulingStatusResponse {
    pub fn new() -> SchedulingStatusResponse {
        SchedulingStatusResponse {
            id: None,
            status: None,
            error_details: None,
            scheduling_result_uri: None,
            percent_complete: None,
        }
    }
}

/// The status of the scheduling job.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "Pending")]
    Pending,
    #[serde(rename = "Success")]
    Success,
    #[serde(rename = "Failed")]
    Failed,
    #[serde(rename = "Ongoing")]
    Ongoing,
    #[serde(rename = "PartialFailure")]
    PartialFailure,
}

impl Default for Status {
    fn default() -> Status {
        Self::Pending
    }
}

