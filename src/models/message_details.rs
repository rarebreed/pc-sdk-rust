/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct MessageDetails {
    /// UUID identifying the message media.
    #[serde(rename = "messageId", skip_serializing_if = "Option::is_none")]
    pub message_id: Option<String>,
    /// A URI for this message entity.
    #[serde(rename = "messageURI", skip_serializing_if = "Option::is_none")]
    pub message_uri: Option<String>,
    /// Indicates the delivery status of the message.
    #[serde(rename = "messageStatus", skip_serializing_if = "Option::is_none")]
    pub message_status: Option<MessageStatus>,
    /// The message segment count, greater than 1 if the message content was split into multiple parts for this message type, e.g. SMS character limits.
    #[serde(rename = "messageSegmentCount", skip_serializing_if = "Option::is_none")]
    pub message_segment_count: Option<i32>,
    /// The time when the message was sent or received. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "messageTime", skip_serializing_if = "Option::is_none")]
    pub message_time: Option<String>,
    /// The media (images, files, etc) associated with this message, if any
    #[serde(rename = "media", skip_serializing_if = "Option::is_none")]
    pub media: Option<Vec<crate::models::MessageMedia>>,
    /// One or more stickers associated with this message, if any
    #[serde(rename = "stickers", skip_serializing_if = "Option::is_none")]
    pub stickers: Option<Vec<crate::models::MessageSticker>>,
}

impl MessageDetails {
    pub fn new() -> MessageDetails {
        MessageDetails {
            message_id: None,
            message_uri: None,
            message_status: None,
            message_segment_count: None,
            message_time: None,
            media: None,
            stickers: None,
        }
    }
}

/// Indicates the delivery status of the message.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MessageStatus {
    #[serde(rename = "queued")]
    Queued,
    #[serde(rename = "sent")]
    Sent,
    #[serde(rename = "failed")]
    Failed,
    #[serde(rename = "received")]
    Received,
    #[serde(rename = "delivery-success")]
    DeliverySuccess,
    #[serde(rename = "delivery-failed")]
    DeliveryFailed,
    #[serde(rename = "read")]
    Read,
}

impl Default for MessageStatus {
    fn default() -> MessageStatus {
        Self::Queued
    }
}

