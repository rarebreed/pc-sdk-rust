/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */

/// Response : Contains information about a response.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Response {
    /// The globally unique identifier for the object.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Version number required for updates.
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<i32>,
    /// One or more libraries response is associated with.
    #[serde(rename = "libraries")]
    pub libraries: Vec<crate::models::DomainEntityRef>,
    /// One or more texts associated with the response.
    #[serde(rename = "texts")]
    pub texts: Vec<crate::models::ResponseText>,
    #[serde(rename = "createdBy", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<Box<crate::models::User>>,
    /// The date and time the response was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "dateCreated", skip_serializing_if = "Option::is_none")]
    pub date_created: Option<String>,
    /// The interaction type for this response.
    #[serde(rename = "interactionType", skip_serializing_if = "Option::is_none")]
    pub interaction_type: Option<InteractionType>,
    /// Details about any text substitutions used in the texts for this response.
    #[serde(rename = "substitutions", skip_serializing_if = "Option::is_none")]
    pub substitutions: Option<Vec<crate::models::ResponseSubstitution>>,
    #[serde(rename = "substitutionsSchema", skip_serializing_if = "Option::is_none")]
    pub substitutions_schema: Option<Box<crate::models::JsonSchemaDocument>>,
    /// The response type represented by the response.
    #[serde(rename = "responseType", skip_serializing_if = "Option::is_none")]
    pub response_type: Option<ResponseType>,
    #[serde(rename = "messagingTemplate", skip_serializing_if = "Option::is_none")]
    pub messaging_template: Option<Box<crate::models::MessagingTemplate>>,
    /// Assets used in the response
    #[serde(rename = "assets", skip_serializing_if = "Option::is_none")]
    pub assets: Option<Vec<crate::models::AddressableEntityRef>>,
    /// The URI for this object
    #[serde(rename = "selfUri", skip_serializing_if = "Option::is_none")]
    pub self_uri: Option<String>,
}

impl Response {
    /// Contains information about a response.
    pub fn new(libraries: Vec<crate::models::DomainEntityRef>, texts: Vec<crate::models::ResponseText>) -> Response {
        Response {
            id: None,
            name: None,
            version: None,
            libraries,
            texts,
            created_by: None,
            date_created: None,
            interaction_type: None,
            substitutions: None,
            substitutions_schema: None,
            response_type: None,
            messaging_template: None,
            assets: None,
            self_uri: None,
        }
    }
}

/// The interaction type for this response.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum InteractionType {
    #[serde(rename = "chat")]
    Chat,
    #[serde(rename = "email")]
    Email,
    #[serde(rename = "twitter")]
    Twitter,
}

impl Default for InteractionType {
    fn default() -> InteractionType {
        Self::Chat
    }
}
/// The response type represented by the response.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ResponseType {
    #[serde(rename = "MessagingTemplate")]
    MessagingTemplate,
    #[serde(rename = "CampaignSmsTemplate")]
    CampaignSmsTemplate,
    #[serde(rename = "CampaignEmailTemplate")]
    CampaignEmailTemplate,
}

impl Default for ResponseType {
    fn default() -> ResponseType {
        Self::MessagingTemplate
    }
}

