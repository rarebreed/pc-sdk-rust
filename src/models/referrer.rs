/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Referrer {
    /// Referrer URL.
    #[serde(rename = "url")]
    pub url: String,
    /// Referrer URL domain.
    #[serde(rename = "domain")]
    pub domain: String,
    /// Referrer URL hostname.
    #[serde(rename = "hostname")]
    pub hostname: String,
    /// Referrer keywords.
    #[serde(rename = "keywords", skip_serializing_if = "Option::is_none")]
    pub keywords: Option<String>,
    /// Referrer URL pathname.
    #[serde(rename = "pathname")]
    pub pathname: String,
    /// Referrer URL querystring.
    #[serde(rename = "queryString", skip_serializing_if = "Option::is_none")]
    pub query_string: Option<String>,
    /// Referrer URL fragment.
    #[serde(rename = "fragment", skip_serializing_if = "Option::is_none")]
    pub fragment: Option<String>,
    /// Name of referrer (e.g. Yahoo!, Google, InfoSpace).
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Type of referrer (e.g. search, social).
    #[serde(rename = "medium", skip_serializing_if = "Option::is_none")]
    pub medium: Option<Medium>,
}

impl Referrer {
    pub fn new(url: String, domain: String, hostname: String, pathname: String) -> Referrer {
        Referrer {
            url,
            domain,
            hostname,
            keywords: None,
            pathname,
            query_string: None,
            fragment: None,
            name: None,
            medium: None,
        }
    }
}

/// Type of referrer (e.g. search, social).
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Medium {
    #[serde(rename = "internal")]
    Internal,
    #[serde(rename = "search")]
    Search,
    #[serde(rename = "social")]
    Social,
    #[serde(rename = "email")]
    Email,
    #[serde(rename = "unknown")]
    Unknown,
    #[serde(rename = "paid")]
    Paid,
}

impl Default for Medium {
    fn default() -> Medium {
        Self::Internal
    }
}

