/*
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * The version of the OpenAPI document: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://openapi-generator.tech
 */

/// WebDeploymentConfigurationVersion : Details about the configuration version of a Web Deployment



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct WebDeploymentConfigurationVersion {
    /// The configuration version ID
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The configuration version name
    #[serde(rename = "name")]
    pub name: String,
    /// The version of the configuration
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    /// The description of the configuration
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// A list of languages supported on the configuration
    #[serde(rename = "languages", skip_serializing_if = "Option::is_none")]
    pub languages: Option<Vec<String>>,
    /// The default language to use for the configuration
    #[serde(rename = "defaultLanguage", skip_serializing_if = "Option::is_none")]
    pub default_language: Option<String>,
    #[serde(rename = "messenger", skip_serializing_if = "Option::is_none")]
    pub messenger: Option<Box<crate::models::MessengerSettings>>,
    #[serde(rename = "position", skip_serializing_if = "Option::is_none")]
    pub position: Option<Box<crate::models::PositionSettings>>,
    #[serde(rename = "supportCenter", skip_serializing_if = "Option::is_none")]
    pub support_center: Option<Box<crate::models::SupportCenterSettings>>,
    #[serde(rename = "cobrowse", skip_serializing_if = "Option::is_none")]
    pub cobrowse: Option<Box<crate::models::CobrowseSettings>>,
    #[serde(rename = "journeyEvents", skip_serializing_if = "Option::is_none")]
    pub journey_events: Option<Box<crate::models::JourneyEventsSettings>>,
    #[serde(rename = "authenticationSettings", skip_serializing_if = "Option::is_none")]
    pub authentication_settings: Option<Box<crate::models::AuthenticationSettings>>,
    /// The date the configuration version was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "dateCreated", skip_serializing_if = "Option::is_none")]
    pub date_created: Option<String>,
    /// The date the configuration version was most recently modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "dateModified", skip_serializing_if = "Option::is_none")]
    pub date_modified: Option<String>,
    /// The date the configuration version was most recently published. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
    #[serde(rename = "datePublished", skip_serializing_if = "Option::is_none")]
    pub date_published: Option<String>,
    #[serde(rename = "lastModifiedUser", skip_serializing_if = "Option::is_none")]
    pub last_modified_user: Option<Box<crate::models::AddressableEntityRef>>,
    #[serde(rename = "createdUser", skip_serializing_if = "Option::is_none")]
    pub created_user: Option<Box<crate::models::AddressableEntityRef>>,
    #[serde(rename = "publishedUser", skip_serializing_if = "Option::is_none")]
    pub published_user: Option<Box<crate::models::AddressableEntityRef>>,
    /// The current status of the configuration version
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    /// The URI for this object
    #[serde(rename = "selfUri", skip_serializing_if = "Option::is_none")]
    pub self_uri: Option<String>,
}

impl WebDeploymentConfigurationVersion {
    /// Details about the configuration version of a Web Deployment
    pub fn new(name: String) -> WebDeploymentConfigurationVersion {
        WebDeploymentConfigurationVersion {
            id: None,
            name,
            version: None,
            description: None,
            languages: None,
            default_language: None,
            messenger: None,
            position: None,
            support_center: None,
            cobrowse: None,
            journey_events: None,
            authentication_settings: None,
            date_created: None,
            date_modified: None,
            date_published: None,
            last_modified_user: None,
            created_user: None,
            published_user: None,
            status: None,
            self_uri: None,
        }
    }
}

/// The current status of the configuration version
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "Pending")]
    Pending,
    #[serde(rename = "Active")]
    Active,
    #[serde(rename = "Inactive")]
    Inactive,
    #[serde(rename = "Error")]
    Error,
    #[serde(rename = "Deleting")]
    Deleting,
}

impl Default for Status {
    fn default() -> Status {
        Self::Pending
    }
}

